Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    ARROW
    AT
    BACKSLASH
    BREAK
    DIVIDEASSIGN
    DOT
    DOUBLEQUOTE
    HASH
    INPUT
    MINUSASSIGN
    MODASSIGN
    NEW
    NULL
    PARAMS
    PIPE
    PLUSASSIGN
    SLASH
    TIMESASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt_list -> empty
Rule 5     stmt -> class_declaration
Rule 6     stmt -> fun_declaration
Rule 7     stmt -> import_declaration
Rule 8     stmt -> assignment
Rule 9     stmt -> variable_declaration
Rule 10    stmt -> print_stmt
Rule 11    stmt -> control_structure
Rule 12    stmt -> return_stmt
Rule 13    stmt -> function_call
Rule 14    stmt -> empty
Rule 15    class_declaration -> CLASS identifier LBRACE stmt_list RBRACE
Rule 16    fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
Rule 17    params -> general_type identifier COMMA params
Rule 18    params -> general_type identifier
Rule 19    params -> empty
Rule 20    import_declaration -> IMPORT STRING_LITERAL
Rule 21    variable_declaration -> general_type identifier SEMICOLON
Rule 22    variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON
Rule 23    variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON
Rule 24    assignment -> general_type identifier ASSIGN expression SEMICOLON
Rule 25    assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
Rule 26    assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
Rule 27    assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
Rule 28    assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
Rule 29    assignment -> identifier ASSIGN expression SEMICOLON
Rule 30    print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 31    control_structure -> if_stmt
Rule 32    control_structure -> for_stmt
Rule 33    control_structure -> while_stmt
Rule 34    control_structure -> switch_stmt
Rule 35    function_call -> identifier LPAREN arg_list RPAREN SEMICOLON
Rule 36    arg_list -> expression COMMA arg_list
Rule 37    arg_list -> expression
Rule 38    return_stmt -> RETURN expression SEMICOLON
Rule 39    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 40    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 41    if_stmt -> expression QUESTION expression COLON expression SEMICOLON
Rule 42    for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
Rule 43    while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 44    switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
Rule 45    case_stmts -> CASE expression COLON stmt_list case_stmts
Rule 46    case_stmts -> empty
Rule 47    default_stmt -> DEFAULT COLON stmt_list
Rule 48    default_stmt -> empty
Rule 49    expression -> expression PLUS expression
Rule 50    expression -> expression MINUS expression
Rule 51    expression -> expression MULTIPLY expression
Rule 52    expression -> expression DIVIDE expression
Rule 53    expression -> expression MODULUS expression
Rule 54    expression -> expression AND expression
Rule 55    expression -> expression OR expression
Rule 56    expression -> expression EQUAL expression
Rule 57    expression -> expression NOTEQUAL expression
Rule 58    expression -> expression LESSTHAN expression
Rule 59    expression -> expression GREATERTHAN expression
Rule 60    expression -> expression LESSTHANEQUAL expression
Rule 61    expression -> expression GREATERTHANEQUAL expression
Rule 62    expression -> expression INCREMENT
Rule 63    expression -> expression DECREMENT
Rule 64    expression -> expression COMMA expression
Rule 65    expression -> expression POW expression
Rule 66    expression -> NOT expression
Rule 67    expression -> LPAREN expression RPAREN
Rule 68    expression -> identifier
Rule 69    expression -> digit
Rule 70    expression -> string
Rule 71    expression -> boolean
Rule 72    expression -> identifier LBRACKET expression RBRACKET
Rule 73    expression -> identifier LBRACE expression RBRACE
Rule 74    digit -> NUMBER
Rule 75    boolean -> TRUE
Rule 76    boolean -> FALSE
Rule 77    general_type -> INT
Rule 78    general_type -> FLOAT
Rule 79    general_type -> DOUBLE
Rule 80    general_type -> STRING
Rule 81    general_type -> BOOLEAN
Rule 82    general_type -> identifier
Rule 83    array_type -> INTARRAY
Rule 84    array_type -> FLOATARRAY
Rule 85    array_type -> STRINGARRAY
Rule 86    array_type -> DOUBLEARRAY
Rule 87    list_type -> INTLIST
Rule 88    list_type -> FLOATLIST
Rule 89    list_type -> STRINGLIST
Rule 90    list_type -> DOUBLELIST
Rule 91    identifier -> IDENTIFIER
Rule 92    string -> STRING_LITERAL
Rule 93    empty -> <empty>

Terminals, with rules where they appear

AND                  : 54
APOSTROPHE           : 
ARROW                : 
ASSIGN               : 24 25 26 27 28 29
AT                   : 
BACKSLASH            : 
BOOLEAN              : 81
BREAK                : 
CASE                 : 45
CLASS                : 15
COLON                : 41 45 47
COMMA                : 17 36 64
DECREMENT            : 63
DEFAULT              : 47
DIVIDE               : 52
DIVIDEASSIGN         : 
DOT                  : 
DOUBLE               : 79
DOUBLEARRAY          : 86
DOUBLELIST           : 90
DOUBLEQUOTE          : 
ELSE                 : 40
EQUAL                : 56
FALSE                : 76
FLOAT                : 78
FLOATARRAY           : 84
FLOATLIST            : 88
FOR                  : 42
FUN                  : 16
GREATERTHAN          : 59
GREATERTHANEQUAL     : 61
HASH                 : 
IDENTIFIER           : 91
IF                   : 39 40
IMPORT               : 20
INCREMENT            : 62
INPUT                : 
INT                  : 77
INTARRAY             : 83
INTLIST              : 87
LBRACE               : 15 16 23 27 28 39 40 40 42 43 44 73
LBRACKET             : 22 25 26 72
LESSTHAN             : 58
LESSTHANEQUAL        : 60
LPAREN               : 16 30 35 39 40 42 43 44 67
MINUS                : 50
MINUSASSIGN          : 
MODASSIGN            : 
MODULUS              : 53
MULTIPLY             : 51
NEW                  : 
NOT                  : 66
NOTEQUAL             : 57
NULL                 : 
NUMBER               : 74
OR                   : 55
PARAMS               : 
PIPE                 : 
PLUS                 : 49
PLUSASSIGN           : 
POW                  : 65
PRINT                : 30
QUESTION             : 41
RBRACE               : 15 16 23 27 28 39 40 40 42 43 44 73
RBRACKET             : 22 25 26 72
RETURN               : 38
RPAREN               : 16 30 35 39 40 42 43 44 67
SEMICOLON            : 21 22 23 24 25 26 27 28 29 30 35 38 41 42 42
SLASH                : 
STRING               : 80
STRINGARRAY          : 85
STRINGLIST           : 89
STRING_LITERAL       : 20 92
SWITCH               : 44
TIMESASSIGN          : 
TRUE                 : 75
WHILE                : 43
error                : 

Nonterminals, with rules where they appear

arg_list             : 35 36
array_type           : 23 27 28
assignment           : 8 42
boolean              : 71
case_stmts           : 44 45
class_declaration    : 5
control_structure    : 11
default_stmt         : 44
digit                : 25 27 69
empty                : 4 14 19 46 48
expression           : 24 25 26 27 28 29 30 36 37 38 39 40 41 41 41 42 42 43 44 45 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 63 64 64 65 65 66 67 72 73
for_stmt             : 32
fun_declaration      : 6
function_call        : 13
general_type         : 17 18 21 24
identifier           : 15 16 17 18 21 22 23 24 25 26 27 28 29 35 68 72 73 82
if_stmt              : 31
import_declaration   : 7
list_type            : 22 25 26
params               : 16 17
print_stmt           : 10
program              : 0
return_stmt          : 12
stmt                 : 2 3
stmt_list            : 1 2 15 16 39 40 40 42 43 45 47
string               : 70
switch_stmt          : 34
variable_declaration : 9
while_stmt           : 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 3

    (2) stmt_list -> stmt . stmt_list
    (3) stmt_list -> stmt .
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! reduce/reduce conflict for $end resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for RBRACE resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 3 (stmt_list -> stmt .)
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 3 (stmt_list -> stmt .)
    RBRACE          reduce using rule 3 (stmt_list -> stmt .)
    CASE            reduce using rule 3 (stmt_list -> stmt .)
    DEFAULT         reduce using rule 3 (stmt_list -> stmt .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! $end            [ reduce using rule 93 (empty -> .) ]
  ! RBRACE          [ reduce using rule 93 (empty -> .) ]
  ! CASE            [ reduce using rule 93 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 93 (empty -> .) ]
  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    stmt                           shift and go to state 3
    stmt_list                      shift and go to state 55
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 4

    (4) stmt_list -> empty .
    (14) stmt -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 4 (stmt_list -> empty .)
    $end            reduce using rule 4 (stmt_list -> empty .)
    RBRACE          reduce using rule 4 (stmt_list -> empty .)
    CASE            reduce using rule 4 (stmt_list -> empty .)
    DEFAULT         reduce using rule 4 (stmt_list -> empty .)
    CLASS           reduce using rule 14 (stmt -> empty .)
    FUN             reduce using rule 14 (stmt -> empty .)
    IMPORT          reduce using rule 14 (stmt -> empty .)
    PRINT           reduce using rule 14 (stmt -> empty .)
    RETURN          reduce using rule 14 (stmt -> empty .)
    INT             reduce using rule 14 (stmt -> empty .)
    FLOAT           reduce using rule 14 (stmt -> empty .)
    DOUBLE          reduce using rule 14 (stmt -> empty .)
    STRING          reduce using rule 14 (stmt -> empty .)
    BOOLEAN         reduce using rule 14 (stmt -> empty .)
    INTLIST         reduce using rule 14 (stmt -> empty .)
    FLOATLIST       reduce using rule 14 (stmt -> empty .)
    STRINGLIST      reduce using rule 14 (stmt -> empty .)
    DOUBLELIST      reduce using rule 14 (stmt -> empty .)
    INTARRAY        reduce using rule 14 (stmt -> empty .)
    FLOATARRAY      reduce using rule 14 (stmt -> empty .)
    STRINGARRAY     reduce using rule 14 (stmt -> empty .)
    DOUBLEARRAY     reduce using rule 14 (stmt -> empty .)
    IDENTIFIER      reduce using rule 14 (stmt -> empty .)
    IF              reduce using rule 14 (stmt -> empty .)
    FOR             reduce using rule 14 (stmt -> empty .)
    WHILE           reduce using rule 14 (stmt -> empty .)
    SWITCH          reduce using rule 14 (stmt -> empty .)
    NOT             reduce using rule 14 (stmt -> empty .)
    LPAREN          reduce using rule 14 (stmt -> empty .)
    NUMBER          reduce using rule 14 (stmt -> empty .)
    STRING_LITERAL  reduce using rule 14 (stmt -> empty .)
    TRUE            reduce using rule 14 (stmt -> empty .)
    FALSE           reduce using rule 14 (stmt -> empty .)

  ! $end            [ reduce using rule 14 (stmt -> empty .) ]
  ! RBRACE          [ reduce using rule 14 (stmt -> empty .) ]
  ! CASE            [ reduce using rule 14 (stmt -> empty .) ]
  ! DEFAULT         [ reduce using rule 14 (stmt -> empty .) ]


state 5

    (5) stmt -> class_declaration .

    CLASS           reduce using rule 5 (stmt -> class_declaration .)
    FUN             reduce using rule 5 (stmt -> class_declaration .)
    IMPORT          reduce using rule 5 (stmt -> class_declaration .)
    PRINT           reduce using rule 5 (stmt -> class_declaration .)
    RETURN          reduce using rule 5 (stmt -> class_declaration .)
    INT             reduce using rule 5 (stmt -> class_declaration .)
    FLOAT           reduce using rule 5 (stmt -> class_declaration .)
    DOUBLE          reduce using rule 5 (stmt -> class_declaration .)
    STRING          reduce using rule 5 (stmt -> class_declaration .)
    BOOLEAN         reduce using rule 5 (stmt -> class_declaration .)
    INTLIST         reduce using rule 5 (stmt -> class_declaration .)
    FLOATLIST       reduce using rule 5 (stmt -> class_declaration .)
    STRINGLIST      reduce using rule 5 (stmt -> class_declaration .)
    DOUBLELIST      reduce using rule 5 (stmt -> class_declaration .)
    INTARRAY        reduce using rule 5 (stmt -> class_declaration .)
    FLOATARRAY      reduce using rule 5 (stmt -> class_declaration .)
    STRINGARRAY     reduce using rule 5 (stmt -> class_declaration .)
    DOUBLEARRAY     reduce using rule 5 (stmt -> class_declaration .)
    IDENTIFIER      reduce using rule 5 (stmt -> class_declaration .)
    IF              reduce using rule 5 (stmt -> class_declaration .)
    FOR             reduce using rule 5 (stmt -> class_declaration .)
    WHILE           reduce using rule 5 (stmt -> class_declaration .)
    SWITCH          reduce using rule 5 (stmt -> class_declaration .)
    NOT             reduce using rule 5 (stmt -> class_declaration .)
    LPAREN          reduce using rule 5 (stmt -> class_declaration .)
    NUMBER          reduce using rule 5 (stmt -> class_declaration .)
    STRING_LITERAL  reduce using rule 5 (stmt -> class_declaration .)
    TRUE            reduce using rule 5 (stmt -> class_declaration .)
    FALSE           reduce using rule 5 (stmt -> class_declaration .)
    $end            reduce using rule 5 (stmt -> class_declaration .)
    RBRACE          reduce using rule 5 (stmt -> class_declaration .)
    CASE            reduce using rule 5 (stmt -> class_declaration .)
    DEFAULT         reduce using rule 5 (stmt -> class_declaration .)


state 6

    (6) stmt -> fun_declaration .

    CLASS           reduce using rule 6 (stmt -> fun_declaration .)
    FUN             reduce using rule 6 (stmt -> fun_declaration .)
    IMPORT          reduce using rule 6 (stmt -> fun_declaration .)
    PRINT           reduce using rule 6 (stmt -> fun_declaration .)
    RETURN          reduce using rule 6 (stmt -> fun_declaration .)
    INT             reduce using rule 6 (stmt -> fun_declaration .)
    FLOAT           reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLE          reduce using rule 6 (stmt -> fun_declaration .)
    STRING          reduce using rule 6 (stmt -> fun_declaration .)
    BOOLEAN         reduce using rule 6 (stmt -> fun_declaration .)
    INTLIST         reduce using rule 6 (stmt -> fun_declaration .)
    FLOATLIST       reduce using rule 6 (stmt -> fun_declaration .)
    STRINGLIST      reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLELIST      reduce using rule 6 (stmt -> fun_declaration .)
    INTARRAY        reduce using rule 6 (stmt -> fun_declaration .)
    FLOATARRAY      reduce using rule 6 (stmt -> fun_declaration .)
    STRINGARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLEARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    IDENTIFIER      reduce using rule 6 (stmt -> fun_declaration .)
    IF              reduce using rule 6 (stmt -> fun_declaration .)
    FOR             reduce using rule 6 (stmt -> fun_declaration .)
    WHILE           reduce using rule 6 (stmt -> fun_declaration .)
    SWITCH          reduce using rule 6 (stmt -> fun_declaration .)
    NOT             reduce using rule 6 (stmt -> fun_declaration .)
    LPAREN          reduce using rule 6 (stmt -> fun_declaration .)
    NUMBER          reduce using rule 6 (stmt -> fun_declaration .)
    STRING_LITERAL  reduce using rule 6 (stmt -> fun_declaration .)
    TRUE            reduce using rule 6 (stmt -> fun_declaration .)
    FALSE           reduce using rule 6 (stmt -> fun_declaration .)
    $end            reduce using rule 6 (stmt -> fun_declaration .)
    RBRACE          reduce using rule 6 (stmt -> fun_declaration .)
    CASE            reduce using rule 6 (stmt -> fun_declaration .)
    DEFAULT         reduce using rule 6 (stmt -> fun_declaration .)


state 7

    (7) stmt -> import_declaration .

    CLASS           reduce using rule 7 (stmt -> import_declaration .)
    FUN             reduce using rule 7 (stmt -> import_declaration .)
    IMPORT          reduce using rule 7 (stmt -> import_declaration .)
    PRINT           reduce using rule 7 (stmt -> import_declaration .)
    RETURN          reduce using rule 7 (stmt -> import_declaration .)
    INT             reduce using rule 7 (stmt -> import_declaration .)
    FLOAT           reduce using rule 7 (stmt -> import_declaration .)
    DOUBLE          reduce using rule 7 (stmt -> import_declaration .)
    STRING          reduce using rule 7 (stmt -> import_declaration .)
    BOOLEAN         reduce using rule 7 (stmt -> import_declaration .)
    INTLIST         reduce using rule 7 (stmt -> import_declaration .)
    FLOATLIST       reduce using rule 7 (stmt -> import_declaration .)
    STRINGLIST      reduce using rule 7 (stmt -> import_declaration .)
    DOUBLELIST      reduce using rule 7 (stmt -> import_declaration .)
    INTARRAY        reduce using rule 7 (stmt -> import_declaration .)
    FLOATARRAY      reduce using rule 7 (stmt -> import_declaration .)
    STRINGARRAY     reduce using rule 7 (stmt -> import_declaration .)
    DOUBLEARRAY     reduce using rule 7 (stmt -> import_declaration .)
    IDENTIFIER      reduce using rule 7 (stmt -> import_declaration .)
    IF              reduce using rule 7 (stmt -> import_declaration .)
    FOR             reduce using rule 7 (stmt -> import_declaration .)
    WHILE           reduce using rule 7 (stmt -> import_declaration .)
    SWITCH          reduce using rule 7 (stmt -> import_declaration .)
    NOT             reduce using rule 7 (stmt -> import_declaration .)
    LPAREN          reduce using rule 7 (stmt -> import_declaration .)
    NUMBER          reduce using rule 7 (stmt -> import_declaration .)
    STRING_LITERAL  reduce using rule 7 (stmt -> import_declaration .)
    TRUE            reduce using rule 7 (stmt -> import_declaration .)
    FALSE           reduce using rule 7 (stmt -> import_declaration .)
    $end            reduce using rule 7 (stmt -> import_declaration .)
    RBRACE          reduce using rule 7 (stmt -> import_declaration .)
    CASE            reduce using rule 7 (stmt -> import_declaration .)
    DEFAULT         reduce using rule 7 (stmt -> import_declaration .)


state 8

    (8) stmt -> assignment .

    CLASS           reduce using rule 8 (stmt -> assignment .)
    FUN             reduce using rule 8 (stmt -> assignment .)
    IMPORT          reduce using rule 8 (stmt -> assignment .)
    PRINT           reduce using rule 8 (stmt -> assignment .)
    RETURN          reduce using rule 8 (stmt -> assignment .)
    INT             reduce using rule 8 (stmt -> assignment .)
    FLOAT           reduce using rule 8 (stmt -> assignment .)
    DOUBLE          reduce using rule 8 (stmt -> assignment .)
    STRING          reduce using rule 8 (stmt -> assignment .)
    BOOLEAN         reduce using rule 8 (stmt -> assignment .)
    INTLIST         reduce using rule 8 (stmt -> assignment .)
    FLOATLIST       reduce using rule 8 (stmt -> assignment .)
    STRINGLIST      reduce using rule 8 (stmt -> assignment .)
    DOUBLELIST      reduce using rule 8 (stmt -> assignment .)
    INTARRAY        reduce using rule 8 (stmt -> assignment .)
    FLOATARRAY      reduce using rule 8 (stmt -> assignment .)
    STRINGARRAY     reduce using rule 8 (stmt -> assignment .)
    DOUBLEARRAY     reduce using rule 8 (stmt -> assignment .)
    IDENTIFIER      reduce using rule 8 (stmt -> assignment .)
    IF              reduce using rule 8 (stmt -> assignment .)
    FOR             reduce using rule 8 (stmt -> assignment .)
    WHILE           reduce using rule 8 (stmt -> assignment .)
    SWITCH          reduce using rule 8 (stmt -> assignment .)
    NOT             reduce using rule 8 (stmt -> assignment .)
    LPAREN          reduce using rule 8 (stmt -> assignment .)
    NUMBER          reduce using rule 8 (stmt -> assignment .)
    STRING_LITERAL  reduce using rule 8 (stmt -> assignment .)
    TRUE            reduce using rule 8 (stmt -> assignment .)
    FALSE           reduce using rule 8 (stmt -> assignment .)
    $end            reduce using rule 8 (stmt -> assignment .)
    RBRACE          reduce using rule 8 (stmt -> assignment .)
    CASE            reduce using rule 8 (stmt -> assignment .)
    DEFAULT         reduce using rule 8 (stmt -> assignment .)


state 9

    (9) stmt -> variable_declaration .

    CLASS           reduce using rule 9 (stmt -> variable_declaration .)
    FUN             reduce using rule 9 (stmt -> variable_declaration .)
    IMPORT          reduce using rule 9 (stmt -> variable_declaration .)
    PRINT           reduce using rule 9 (stmt -> variable_declaration .)
    RETURN          reduce using rule 9 (stmt -> variable_declaration .)
    INT             reduce using rule 9 (stmt -> variable_declaration .)
    FLOAT           reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLE          reduce using rule 9 (stmt -> variable_declaration .)
    STRING          reduce using rule 9 (stmt -> variable_declaration .)
    BOOLEAN         reduce using rule 9 (stmt -> variable_declaration .)
    INTLIST         reduce using rule 9 (stmt -> variable_declaration .)
    FLOATLIST       reduce using rule 9 (stmt -> variable_declaration .)
    STRINGLIST      reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLELIST      reduce using rule 9 (stmt -> variable_declaration .)
    INTARRAY        reduce using rule 9 (stmt -> variable_declaration .)
    FLOATARRAY      reduce using rule 9 (stmt -> variable_declaration .)
    STRINGARRAY     reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLEARRAY     reduce using rule 9 (stmt -> variable_declaration .)
    IDENTIFIER      reduce using rule 9 (stmt -> variable_declaration .)
    IF              reduce using rule 9 (stmt -> variable_declaration .)
    FOR             reduce using rule 9 (stmt -> variable_declaration .)
    WHILE           reduce using rule 9 (stmt -> variable_declaration .)
    SWITCH          reduce using rule 9 (stmt -> variable_declaration .)
    NOT             reduce using rule 9 (stmt -> variable_declaration .)
    LPAREN          reduce using rule 9 (stmt -> variable_declaration .)
    NUMBER          reduce using rule 9 (stmt -> variable_declaration .)
    STRING_LITERAL  reduce using rule 9 (stmt -> variable_declaration .)
    TRUE            reduce using rule 9 (stmt -> variable_declaration .)
    FALSE           reduce using rule 9 (stmt -> variable_declaration .)
    $end            reduce using rule 9 (stmt -> variable_declaration .)
    RBRACE          reduce using rule 9 (stmt -> variable_declaration .)
    CASE            reduce using rule 9 (stmt -> variable_declaration .)
    DEFAULT         reduce using rule 9 (stmt -> variable_declaration .)


state 10

    (10) stmt -> print_stmt .

    CLASS           reduce using rule 10 (stmt -> print_stmt .)
    FUN             reduce using rule 10 (stmt -> print_stmt .)
    IMPORT          reduce using rule 10 (stmt -> print_stmt .)
    PRINT           reduce using rule 10 (stmt -> print_stmt .)
    RETURN          reduce using rule 10 (stmt -> print_stmt .)
    INT             reduce using rule 10 (stmt -> print_stmt .)
    FLOAT           reduce using rule 10 (stmt -> print_stmt .)
    DOUBLE          reduce using rule 10 (stmt -> print_stmt .)
    STRING          reduce using rule 10 (stmt -> print_stmt .)
    BOOLEAN         reduce using rule 10 (stmt -> print_stmt .)
    INTLIST         reduce using rule 10 (stmt -> print_stmt .)
    FLOATLIST       reduce using rule 10 (stmt -> print_stmt .)
    STRINGLIST      reduce using rule 10 (stmt -> print_stmt .)
    DOUBLELIST      reduce using rule 10 (stmt -> print_stmt .)
    INTARRAY        reduce using rule 10 (stmt -> print_stmt .)
    FLOATARRAY      reduce using rule 10 (stmt -> print_stmt .)
    STRINGARRAY     reduce using rule 10 (stmt -> print_stmt .)
    DOUBLEARRAY     reduce using rule 10 (stmt -> print_stmt .)
    IDENTIFIER      reduce using rule 10 (stmt -> print_stmt .)
    IF              reduce using rule 10 (stmt -> print_stmt .)
    FOR             reduce using rule 10 (stmt -> print_stmt .)
    WHILE           reduce using rule 10 (stmt -> print_stmt .)
    SWITCH          reduce using rule 10 (stmt -> print_stmt .)
    NOT             reduce using rule 10 (stmt -> print_stmt .)
    LPAREN          reduce using rule 10 (stmt -> print_stmt .)
    NUMBER          reduce using rule 10 (stmt -> print_stmt .)
    STRING_LITERAL  reduce using rule 10 (stmt -> print_stmt .)
    TRUE            reduce using rule 10 (stmt -> print_stmt .)
    FALSE           reduce using rule 10 (stmt -> print_stmt .)
    $end            reduce using rule 10 (stmt -> print_stmt .)
    RBRACE          reduce using rule 10 (stmt -> print_stmt .)
    CASE            reduce using rule 10 (stmt -> print_stmt .)
    DEFAULT         reduce using rule 10 (stmt -> print_stmt .)


state 11

    (11) stmt -> control_structure .

    CLASS           reduce using rule 11 (stmt -> control_structure .)
    FUN             reduce using rule 11 (stmt -> control_structure .)
    IMPORT          reduce using rule 11 (stmt -> control_structure .)
    PRINT           reduce using rule 11 (stmt -> control_structure .)
    RETURN          reduce using rule 11 (stmt -> control_structure .)
    INT             reduce using rule 11 (stmt -> control_structure .)
    FLOAT           reduce using rule 11 (stmt -> control_structure .)
    DOUBLE          reduce using rule 11 (stmt -> control_structure .)
    STRING          reduce using rule 11 (stmt -> control_structure .)
    BOOLEAN         reduce using rule 11 (stmt -> control_structure .)
    INTLIST         reduce using rule 11 (stmt -> control_structure .)
    FLOATLIST       reduce using rule 11 (stmt -> control_structure .)
    STRINGLIST      reduce using rule 11 (stmt -> control_structure .)
    DOUBLELIST      reduce using rule 11 (stmt -> control_structure .)
    INTARRAY        reduce using rule 11 (stmt -> control_structure .)
    FLOATARRAY      reduce using rule 11 (stmt -> control_structure .)
    STRINGARRAY     reduce using rule 11 (stmt -> control_structure .)
    DOUBLEARRAY     reduce using rule 11 (stmt -> control_structure .)
    IDENTIFIER      reduce using rule 11 (stmt -> control_structure .)
    IF              reduce using rule 11 (stmt -> control_structure .)
    FOR             reduce using rule 11 (stmt -> control_structure .)
    WHILE           reduce using rule 11 (stmt -> control_structure .)
    SWITCH          reduce using rule 11 (stmt -> control_structure .)
    NOT             reduce using rule 11 (stmt -> control_structure .)
    LPAREN          reduce using rule 11 (stmt -> control_structure .)
    NUMBER          reduce using rule 11 (stmt -> control_structure .)
    STRING_LITERAL  reduce using rule 11 (stmt -> control_structure .)
    TRUE            reduce using rule 11 (stmt -> control_structure .)
    FALSE           reduce using rule 11 (stmt -> control_structure .)
    $end            reduce using rule 11 (stmt -> control_structure .)
    RBRACE          reduce using rule 11 (stmt -> control_structure .)
    CASE            reduce using rule 11 (stmt -> control_structure .)
    DEFAULT         reduce using rule 11 (stmt -> control_structure .)


state 12

    (12) stmt -> return_stmt .

    CLASS           reduce using rule 12 (stmt -> return_stmt .)
    FUN             reduce using rule 12 (stmt -> return_stmt .)
    IMPORT          reduce using rule 12 (stmt -> return_stmt .)
    PRINT           reduce using rule 12 (stmt -> return_stmt .)
    RETURN          reduce using rule 12 (stmt -> return_stmt .)
    INT             reduce using rule 12 (stmt -> return_stmt .)
    FLOAT           reduce using rule 12 (stmt -> return_stmt .)
    DOUBLE          reduce using rule 12 (stmt -> return_stmt .)
    STRING          reduce using rule 12 (stmt -> return_stmt .)
    BOOLEAN         reduce using rule 12 (stmt -> return_stmt .)
    INTLIST         reduce using rule 12 (stmt -> return_stmt .)
    FLOATLIST       reduce using rule 12 (stmt -> return_stmt .)
    STRINGLIST      reduce using rule 12 (stmt -> return_stmt .)
    DOUBLELIST      reduce using rule 12 (stmt -> return_stmt .)
    INTARRAY        reduce using rule 12 (stmt -> return_stmt .)
    FLOATARRAY      reduce using rule 12 (stmt -> return_stmt .)
    STRINGARRAY     reduce using rule 12 (stmt -> return_stmt .)
    DOUBLEARRAY     reduce using rule 12 (stmt -> return_stmt .)
    IDENTIFIER      reduce using rule 12 (stmt -> return_stmt .)
    IF              reduce using rule 12 (stmt -> return_stmt .)
    FOR             reduce using rule 12 (stmt -> return_stmt .)
    WHILE           reduce using rule 12 (stmt -> return_stmt .)
    SWITCH          reduce using rule 12 (stmt -> return_stmt .)
    NOT             reduce using rule 12 (stmt -> return_stmt .)
    LPAREN          reduce using rule 12 (stmt -> return_stmt .)
    NUMBER          reduce using rule 12 (stmt -> return_stmt .)
    STRING_LITERAL  reduce using rule 12 (stmt -> return_stmt .)
    TRUE            reduce using rule 12 (stmt -> return_stmt .)
    FALSE           reduce using rule 12 (stmt -> return_stmt .)
    $end            reduce using rule 12 (stmt -> return_stmt .)
    RBRACE          reduce using rule 12 (stmt -> return_stmt .)
    CASE            reduce using rule 12 (stmt -> return_stmt .)
    DEFAULT         reduce using rule 12 (stmt -> return_stmt .)


state 13

    (13) stmt -> function_call .

    CLASS           reduce using rule 13 (stmt -> function_call .)
    FUN             reduce using rule 13 (stmt -> function_call .)
    IMPORT          reduce using rule 13 (stmt -> function_call .)
    PRINT           reduce using rule 13 (stmt -> function_call .)
    RETURN          reduce using rule 13 (stmt -> function_call .)
    INT             reduce using rule 13 (stmt -> function_call .)
    FLOAT           reduce using rule 13 (stmt -> function_call .)
    DOUBLE          reduce using rule 13 (stmt -> function_call .)
    STRING          reduce using rule 13 (stmt -> function_call .)
    BOOLEAN         reduce using rule 13 (stmt -> function_call .)
    INTLIST         reduce using rule 13 (stmt -> function_call .)
    FLOATLIST       reduce using rule 13 (stmt -> function_call .)
    STRINGLIST      reduce using rule 13 (stmt -> function_call .)
    DOUBLELIST      reduce using rule 13 (stmt -> function_call .)
    INTARRAY        reduce using rule 13 (stmt -> function_call .)
    FLOATARRAY      reduce using rule 13 (stmt -> function_call .)
    STRINGARRAY     reduce using rule 13 (stmt -> function_call .)
    DOUBLEARRAY     reduce using rule 13 (stmt -> function_call .)
    IDENTIFIER      reduce using rule 13 (stmt -> function_call .)
    IF              reduce using rule 13 (stmt -> function_call .)
    FOR             reduce using rule 13 (stmt -> function_call .)
    WHILE           reduce using rule 13 (stmt -> function_call .)
    SWITCH          reduce using rule 13 (stmt -> function_call .)
    NOT             reduce using rule 13 (stmt -> function_call .)
    LPAREN          reduce using rule 13 (stmt -> function_call .)
    NUMBER          reduce using rule 13 (stmt -> function_call .)
    STRING_LITERAL  reduce using rule 13 (stmt -> function_call .)
    TRUE            reduce using rule 13 (stmt -> function_call .)
    FALSE           reduce using rule 13 (stmt -> function_call .)
    $end            reduce using rule 13 (stmt -> function_call .)
    RBRACE          reduce using rule 13 (stmt -> function_call .)
    CASE            reduce using rule 13 (stmt -> function_call .)
    DEFAULT         reduce using rule 13 (stmt -> function_call .)


state 14

    (15) class_declaration -> CLASS . identifier LBRACE stmt_list RBRACE
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 56

state 15

    (29) assignment -> identifier . ASSIGN expression SEMICOLON
    (35) function_call -> identifier . LPAREN arg_list RPAREN SEMICOLON
    (82) general_type -> identifier .
    (68) expression -> identifier .
    (72) expression -> identifier . LBRACKET expression RBRACKET
    (73) expression -> identifier . LBRACE expression RBRACE

    ASSIGN          shift and go to state 57
    LPAREN          shift and go to state 58
    IDENTIFIER      reduce using rule 82 (general_type -> identifier .)
    QUESTION        reduce using rule 68 (expression -> identifier .)
    PLUS            reduce using rule 68 (expression -> identifier .)
    MINUS           reduce using rule 68 (expression -> identifier .)
    MULTIPLY        reduce using rule 68 (expression -> identifier .)
    DIVIDE          reduce using rule 68 (expression -> identifier .)
    MODULUS         reduce using rule 68 (expression -> identifier .)
    AND             reduce using rule 68 (expression -> identifier .)
    OR              reduce using rule 68 (expression -> identifier .)
    EQUAL           reduce using rule 68 (expression -> identifier .)
    NOTEQUAL        reduce using rule 68 (expression -> identifier .)
    LESSTHAN        reduce using rule 68 (expression -> identifier .)
    GREATERTHAN     reduce using rule 68 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 68 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 68 (expression -> identifier .)
    INCREMENT       reduce using rule 68 (expression -> identifier .)
    DECREMENT       reduce using rule 68 (expression -> identifier .)
    COMMA           reduce using rule 68 (expression -> identifier .)
    POW             reduce using rule 68 (expression -> identifier .)
    LBRACKET        shift and go to state 59
    LBRACE          shift and go to state 60


state 16

    (16) fun_declaration -> FUN . identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 61

state 17

    (67) expression -> LPAREN . expression RPAREN
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 62
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 18

    (20) import_declaration -> IMPORT . STRING_LITERAL

    STRING_LITERAL  shift and go to state 64


state 19

    (92) string -> STRING_LITERAL .

    QUESTION        reduce using rule 92 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 92 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 92 (string -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 92 (string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 92 (string -> STRING_LITERAL .)
    MODULUS         reduce using rule 92 (string -> STRING_LITERAL .)
    AND             reduce using rule 92 (string -> STRING_LITERAL .)
    OR              reduce using rule 92 (string -> STRING_LITERAL .)
    EQUAL           reduce using rule 92 (string -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 92 (string -> STRING_LITERAL .)
    LESSTHAN        reduce using rule 92 (string -> STRING_LITERAL .)
    GREATERTHAN     reduce using rule 92 (string -> STRING_LITERAL .)
    LESSTHANEQUAL   reduce using rule 92 (string -> STRING_LITERAL .)
    GREATERTHANEQUAL reduce using rule 92 (string -> STRING_LITERAL .)
    INCREMENT       reduce using rule 92 (string -> STRING_LITERAL .)
    DECREMENT       reduce using rule 92 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 92 (string -> STRING_LITERAL .)
    POW             reduce using rule 92 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 92 (string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 92 (string -> STRING_LITERAL .)
    RBRACKET        reduce using rule 92 (string -> STRING_LITERAL .)
    RBRACE          reduce using rule 92 (string -> STRING_LITERAL .)
    COLON           reduce using rule 92 (string -> STRING_LITERAL .)


state 20

    (24) assignment -> general_type . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> general_type . identifier SEMICOLON
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 65

state 21

    (41) if_stmt -> expression . QUESTION expression COLON expression SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    QUESTION        shift and go to state 66
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 22

    (25) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> list_type . identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (22) variable_declaration -> list_type . identifier LBRACKET RBRACKET SEMICOLON
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 84

state 23

    (69) expression -> digit .

    QUESTION        reduce using rule 69 (expression -> digit .)
    PLUS            reduce using rule 69 (expression -> digit .)
    MINUS           reduce using rule 69 (expression -> digit .)
    MULTIPLY        reduce using rule 69 (expression -> digit .)
    DIVIDE          reduce using rule 69 (expression -> digit .)
    MODULUS         reduce using rule 69 (expression -> digit .)
    AND             reduce using rule 69 (expression -> digit .)
    OR              reduce using rule 69 (expression -> digit .)
    EQUAL           reduce using rule 69 (expression -> digit .)
    NOTEQUAL        reduce using rule 69 (expression -> digit .)
    LESSTHAN        reduce using rule 69 (expression -> digit .)
    GREATERTHAN     reduce using rule 69 (expression -> digit .)
    LESSTHANEQUAL   reduce using rule 69 (expression -> digit .)
    GREATERTHANEQUAL reduce using rule 69 (expression -> digit .)
    INCREMENT       reduce using rule 69 (expression -> digit .)
    DECREMENT       reduce using rule 69 (expression -> digit .)
    COMMA           reduce using rule 69 (expression -> digit .)
    POW             reduce using rule 69 (expression -> digit .)
    RPAREN          reduce using rule 69 (expression -> digit .)
    SEMICOLON       reduce using rule 69 (expression -> digit .)
    RBRACKET        reduce using rule 69 (expression -> digit .)
    RBRACE          reduce using rule 69 (expression -> digit .)
    COLON           reduce using rule 69 (expression -> digit .)


state 24

    (27) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> array_type . identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (23) variable_declaration -> array_type . identifier LBRACE RBRACE SEMICOLON
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 85

state 25

    (30) print_stmt -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 86


state 26

    (31) control_structure -> if_stmt .

    CLASS           reduce using rule 31 (control_structure -> if_stmt .)
    FUN             reduce using rule 31 (control_structure -> if_stmt .)
    IMPORT          reduce using rule 31 (control_structure -> if_stmt .)
    PRINT           reduce using rule 31 (control_structure -> if_stmt .)
    RETURN          reduce using rule 31 (control_structure -> if_stmt .)
    INT             reduce using rule 31 (control_structure -> if_stmt .)
    FLOAT           reduce using rule 31 (control_structure -> if_stmt .)
    DOUBLE          reduce using rule 31 (control_structure -> if_stmt .)
    STRING          reduce using rule 31 (control_structure -> if_stmt .)
    BOOLEAN         reduce using rule 31 (control_structure -> if_stmt .)
    INTLIST         reduce using rule 31 (control_structure -> if_stmt .)
    FLOATLIST       reduce using rule 31 (control_structure -> if_stmt .)
    STRINGLIST      reduce using rule 31 (control_structure -> if_stmt .)
    DOUBLELIST      reduce using rule 31 (control_structure -> if_stmt .)
    INTARRAY        reduce using rule 31 (control_structure -> if_stmt .)
    FLOATARRAY      reduce using rule 31 (control_structure -> if_stmt .)
    STRINGARRAY     reduce using rule 31 (control_structure -> if_stmt .)
    DOUBLEARRAY     reduce using rule 31 (control_structure -> if_stmt .)
    IDENTIFIER      reduce using rule 31 (control_structure -> if_stmt .)
    IF              reduce using rule 31 (control_structure -> if_stmt .)
    FOR             reduce using rule 31 (control_structure -> if_stmt .)
    WHILE           reduce using rule 31 (control_structure -> if_stmt .)
    SWITCH          reduce using rule 31 (control_structure -> if_stmt .)
    NOT             reduce using rule 31 (control_structure -> if_stmt .)
    LPAREN          reduce using rule 31 (control_structure -> if_stmt .)
    NUMBER          reduce using rule 31 (control_structure -> if_stmt .)
    STRING_LITERAL  reduce using rule 31 (control_structure -> if_stmt .)
    TRUE            reduce using rule 31 (control_structure -> if_stmt .)
    FALSE           reduce using rule 31 (control_structure -> if_stmt .)
    $end            reduce using rule 31 (control_structure -> if_stmt .)
    RBRACE          reduce using rule 31 (control_structure -> if_stmt .)
    CASE            reduce using rule 31 (control_structure -> if_stmt .)
    DEFAULT         reduce using rule 31 (control_structure -> if_stmt .)


state 27

    (32) control_structure -> for_stmt .

    CLASS           reduce using rule 32 (control_structure -> for_stmt .)
    FUN             reduce using rule 32 (control_structure -> for_stmt .)
    IMPORT          reduce using rule 32 (control_structure -> for_stmt .)
    PRINT           reduce using rule 32 (control_structure -> for_stmt .)
    RETURN          reduce using rule 32 (control_structure -> for_stmt .)
    INT             reduce using rule 32 (control_structure -> for_stmt .)
    FLOAT           reduce using rule 32 (control_structure -> for_stmt .)
    DOUBLE          reduce using rule 32 (control_structure -> for_stmt .)
    STRING          reduce using rule 32 (control_structure -> for_stmt .)
    BOOLEAN         reduce using rule 32 (control_structure -> for_stmt .)
    INTLIST         reduce using rule 32 (control_structure -> for_stmt .)
    FLOATLIST       reduce using rule 32 (control_structure -> for_stmt .)
    STRINGLIST      reduce using rule 32 (control_structure -> for_stmt .)
    DOUBLELIST      reduce using rule 32 (control_structure -> for_stmt .)
    INTARRAY        reduce using rule 32 (control_structure -> for_stmt .)
    FLOATARRAY      reduce using rule 32 (control_structure -> for_stmt .)
    STRINGARRAY     reduce using rule 32 (control_structure -> for_stmt .)
    DOUBLEARRAY     reduce using rule 32 (control_structure -> for_stmt .)
    IDENTIFIER      reduce using rule 32 (control_structure -> for_stmt .)
    IF              reduce using rule 32 (control_structure -> for_stmt .)
    FOR             reduce using rule 32 (control_structure -> for_stmt .)
    WHILE           reduce using rule 32 (control_structure -> for_stmt .)
    SWITCH          reduce using rule 32 (control_structure -> for_stmt .)
    NOT             reduce using rule 32 (control_structure -> for_stmt .)
    LPAREN          reduce using rule 32 (control_structure -> for_stmt .)
    NUMBER          reduce using rule 32 (control_structure -> for_stmt .)
    STRING_LITERAL  reduce using rule 32 (control_structure -> for_stmt .)
    TRUE            reduce using rule 32 (control_structure -> for_stmt .)
    FALSE           reduce using rule 32 (control_structure -> for_stmt .)
    $end            reduce using rule 32 (control_structure -> for_stmt .)
    RBRACE          reduce using rule 32 (control_structure -> for_stmt .)
    CASE            reduce using rule 32 (control_structure -> for_stmt .)
    DEFAULT         reduce using rule 32 (control_structure -> for_stmt .)


state 28

    (33) control_structure -> while_stmt .

    CLASS           reduce using rule 33 (control_structure -> while_stmt .)
    FUN             reduce using rule 33 (control_structure -> while_stmt .)
    IMPORT          reduce using rule 33 (control_structure -> while_stmt .)
    PRINT           reduce using rule 33 (control_structure -> while_stmt .)
    RETURN          reduce using rule 33 (control_structure -> while_stmt .)
    INT             reduce using rule 33 (control_structure -> while_stmt .)
    FLOAT           reduce using rule 33 (control_structure -> while_stmt .)
    DOUBLE          reduce using rule 33 (control_structure -> while_stmt .)
    STRING          reduce using rule 33 (control_structure -> while_stmt .)
    BOOLEAN         reduce using rule 33 (control_structure -> while_stmt .)
    INTLIST         reduce using rule 33 (control_structure -> while_stmt .)
    FLOATLIST       reduce using rule 33 (control_structure -> while_stmt .)
    STRINGLIST      reduce using rule 33 (control_structure -> while_stmt .)
    DOUBLELIST      reduce using rule 33 (control_structure -> while_stmt .)
    INTARRAY        reduce using rule 33 (control_structure -> while_stmt .)
    FLOATARRAY      reduce using rule 33 (control_structure -> while_stmt .)
    STRINGARRAY     reduce using rule 33 (control_structure -> while_stmt .)
    DOUBLEARRAY     reduce using rule 33 (control_structure -> while_stmt .)
    IDENTIFIER      reduce using rule 33 (control_structure -> while_stmt .)
    IF              reduce using rule 33 (control_structure -> while_stmt .)
    FOR             reduce using rule 33 (control_structure -> while_stmt .)
    WHILE           reduce using rule 33 (control_structure -> while_stmt .)
    SWITCH          reduce using rule 33 (control_structure -> while_stmt .)
    NOT             reduce using rule 33 (control_structure -> while_stmt .)
    LPAREN          reduce using rule 33 (control_structure -> while_stmt .)
    NUMBER          reduce using rule 33 (control_structure -> while_stmt .)
    STRING_LITERAL  reduce using rule 33 (control_structure -> while_stmt .)
    TRUE            reduce using rule 33 (control_structure -> while_stmt .)
    FALSE           reduce using rule 33 (control_structure -> while_stmt .)
    $end            reduce using rule 33 (control_structure -> while_stmt .)
    RBRACE          reduce using rule 33 (control_structure -> while_stmt .)
    CASE            reduce using rule 33 (control_structure -> while_stmt .)
    DEFAULT         reduce using rule 33 (control_structure -> while_stmt .)


state 29

    (34) control_structure -> switch_stmt .

    CLASS           reduce using rule 34 (control_structure -> switch_stmt .)
    FUN             reduce using rule 34 (control_structure -> switch_stmt .)
    IMPORT          reduce using rule 34 (control_structure -> switch_stmt .)
    PRINT           reduce using rule 34 (control_structure -> switch_stmt .)
    RETURN          reduce using rule 34 (control_structure -> switch_stmt .)
    INT             reduce using rule 34 (control_structure -> switch_stmt .)
    FLOAT           reduce using rule 34 (control_structure -> switch_stmt .)
    DOUBLE          reduce using rule 34 (control_structure -> switch_stmt .)
    STRING          reduce using rule 34 (control_structure -> switch_stmt .)
    BOOLEAN         reduce using rule 34 (control_structure -> switch_stmt .)
    INTLIST         reduce using rule 34 (control_structure -> switch_stmt .)
    FLOATLIST       reduce using rule 34 (control_structure -> switch_stmt .)
    STRINGLIST      reduce using rule 34 (control_structure -> switch_stmt .)
    DOUBLELIST      reduce using rule 34 (control_structure -> switch_stmt .)
    INTARRAY        reduce using rule 34 (control_structure -> switch_stmt .)
    FLOATARRAY      reduce using rule 34 (control_structure -> switch_stmt .)
    STRINGARRAY     reduce using rule 34 (control_structure -> switch_stmt .)
    DOUBLEARRAY     reduce using rule 34 (control_structure -> switch_stmt .)
    IDENTIFIER      reduce using rule 34 (control_structure -> switch_stmt .)
    IF              reduce using rule 34 (control_structure -> switch_stmt .)
    FOR             reduce using rule 34 (control_structure -> switch_stmt .)
    WHILE           reduce using rule 34 (control_structure -> switch_stmt .)
    SWITCH          reduce using rule 34 (control_structure -> switch_stmt .)
    NOT             reduce using rule 34 (control_structure -> switch_stmt .)
    LPAREN          reduce using rule 34 (control_structure -> switch_stmt .)
    NUMBER          reduce using rule 34 (control_structure -> switch_stmt .)
    STRING_LITERAL  reduce using rule 34 (control_structure -> switch_stmt .)
    TRUE            reduce using rule 34 (control_structure -> switch_stmt .)
    FALSE           reduce using rule 34 (control_structure -> switch_stmt .)
    $end            reduce using rule 34 (control_structure -> switch_stmt .)
    RBRACE          reduce using rule 34 (control_structure -> switch_stmt .)
    CASE            reduce using rule 34 (control_structure -> switch_stmt .)
    DEFAULT         reduce using rule 34 (control_structure -> switch_stmt .)


state 30

    (38) return_stmt -> RETURN . expression SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 87
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 31

    (77) general_type -> INT .

    IDENTIFIER      reduce using rule 77 (general_type -> INT .)


state 32

    (78) general_type -> FLOAT .

    IDENTIFIER      reduce using rule 78 (general_type -> FLOAT .)


state 33

    (79) general_type -> DOUBLE .

    IDENTIFIER      reduce using rule 79 (general_type -> DOUBLE .)


state 34

    (80) general_type -> STRING .

    IDENTIFIER      reduce using rule 80 (general_type -> STRING .)


state 35

    (81) general_type -> BOOLEAN .

    IDENTIFIER      reduce using rule 81 (general_type -> BOOLEAN .)


state 36

    (87) list_type -> INTLIST .

    IDENTIFIER      reduce using rule 87 (list_type -> INTLIST .)


state 37

    (88) list_type -> FLOATLIST .

    IDENTIFIER      reduce using rule 88 (list_type -> FLOATLIST .)


state 38

    (89) list_type -> STRINGLIST .

    IDENTIFIER      reduce using rule 89 (list_type -> STRINGLIST .)


state 39

    (90) list_type -> DOUBLELIST .

    IDENTIFIER      reduce using rule 90 (list_type -> DOUBLELIST .)


state 40

    (83) array_type -> INTARRAY .

    IDENTIFIER      reduce using rule 83 (array_type -> INTARRAY .)


state 41

    (84) array_type -> FLOATARRAY .

    IDENTIFIER      reduce using rule 84 (array_type -> FLOATARRAY .)


state 42

    (85) array_type -> STRINGARRAY .

    IDENTIFIER      reduce using rule 85 (array_type -> STRINGARRAY .)


state 43

    (86) array_type -> DOUBLEARRAY .

    IDENTIFIER      reduce using rule 86 (array_type -> DOUBLEARRAY .)


state 44

    (91) identifier -> IDENTIFIER .

    ASSIGN          reduce using rule 91 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 91 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 91 (identifier -> IDENTIFIER .)
    LBRACE          reduce using rule 91 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 91 (identifier -> IDENTIFIER .)
    QUESTION        reduce using rule 91 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 91 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 91 (identifier -> IDENTIFIER .)
    MULTIPLY        reduce using rule 91 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 91 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 91 (identifier -> IDENTIFIER .)
    AND             reduce using rule 91 (identifier -> IDENTIFIER .)
    OR              reduce using rule 91 (identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 91 (identifier -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 91 (identifier -> IDENTIFIER .)
    LESSTHAN        reduce using rule 91 (identifier -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 91 (identifier -> IDENTIFIER .)
    LESSTHANEQUAL   reduce using rule 91 (identifier -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 91 (identifier -> IDENTIFIER .)
    INCREMENT       reduce using rule 91 (identifier -> IDENTIFIER .)
    DECREMENT       reduce using rule 91 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 91 (identifier -> IDENTIFIER .)
    POW             reduce using rule 91 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 91 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 91 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 91 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 91 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 91 (identifier -> IDENTIFIER .)


state 45

    (39) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 88


state 46

    (42) for_stmt -> FOR . LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 89


state 47

    (43) while_stmt -> WHILE . LPAREN expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 90


state 48

    (44) switch_stmt -> SWITCH . LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE

    LPAREN          shift and go to state 91


state 49

    (66) expression -> NOT . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 92
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 50

    (70) expression -> string .

    QUESTION        reduce using rule 70 (expression -> string .)
    PLUS            reduce using rule 70 (expression -> string .)
    MINUS           reduce using rule 70 (expression -> string .)
    MULTIPLY        reduce using rule 70 (expression -> string .)
    DIVIDE          reduce using rule 70 (expression -> string .)
    MODULUS         reduce using rule 70 (expression -> string .)
    AND             reduce using rule 70 (expression -> string .)
    OR              reduce using rule 70 (expression -> string .)
    EQUAL           reduce using rule 70 (expression -> string .)
    NOTEQUAL        reduce using rule 70 (expression -> string .)
    LESSTHAN        reduce using rule 70 (expression -> string .)
    GREATERTHAN     reduce using rule 70 (expression -> string .)
    LESSTHANEQUAL   reduce using rule 70 (expression -> string .)
    GREATERTHANEQUAL reduce using rule 70 (expression -> string .)
    INCREMENT       reduce using rule 70 (expression -> string .)
    DECREMENT       reduce using rule 70 (expression -> string .)
    COMMA           reduce using rule 70 (expression -> string .)
    POW             reduce using rule 70 (expression -> string .)
    RPAREN          reduce using rule 70 (expression -> string .)
    SEMICOLON       reduce using rule 70 (expression -> string .)
    RBRACKET        reduce using rule 70 (expression -> string .)
    RBRACE          reduce using rule 70 (expression -> string .)
    COLON           reduce using rule 70 (expression -> string .)


state 51

    (71) expression -> boolean .

    QUESTION        reduce using rule 71 (expression -> boolean .)
    PLUS            reduce using rule 71 (expression -> boolean .)
    MINUS           reduce using rule 71 (expression -> boolean .)
    MULTIPLY        reduce using rule 71 (expression -> boolean .)
    DIVIDE          reduce using rule 71 (expression -> boolean .)
    MODULUS         reduce using rule 71 (expression -> boolean .)
    AND             reduce using rule 71 (expression -> boolean .)
    OR              reduce using rule 71 (expression -> boolean .)
    EQUAL           reduce using rule 71 (expression -> boolean .)
    NOTEQUAL        reduce using rule 71 (expression -> boolean .)
    LESSTHAN        reduce using rule 71 (expression -> boolean .)
    GREATERTHAN     reduce using rule 71 (expression -> boolean .)
    LESSTHANEQUAL   reduce using rule 71 (expression -> boolean .)
    GREATERTHANEQUAL reduce using rule 71 (expression -> boolean .)
    INCREMENT       reduce using rule 71 (expression -> boolean .)
    DECREMENT       reduce using rule 71 (expression -> boolean .)
    COMMA           reduce using rule 71 (expression -> boolean .)
    POW             reduce using rule 71 (expression -> boolean .)
    RPAREN          reduce using rule 71 (expression -> boolean .)
    SEMICOLON       reduce using rule 71 (expression -> boolean .)
    RBRACKET        reduce using rule 71 (expression -> boolean .)
    RBRACE          reduce using rule 71 (expression -> boolean .)
    COLON           reduce using rule 71 (expression -> boolean .)


state 52

    (74) digit -> NUMBER .

    QUESTION        reduce using rule 74 (digit -> NUMBER .)
    PLUS            reduce using rule 74 (digit -> NUMBER .)
    MINUS           reduce using rule 74 (digit -> NUMBER .)
    MULTIPLY        reduce using rule 74 (digit -> NUMBER .)
    DIVIDE          reduce using rule 74 (digit -> NUMBER .)
    MODULUS         reduce using rule 74 (digit -> NUMBER .)
    AND             reduce using rule 74 (digit -> NUMBER .)
    OR              reduce using rule 74 (digit -> NUMBER .)
    EQUAL           reduce using rule 74 (digit -> NUMBER .)
    NOTEQUAL        reduce using rule 74 (digit -> NUMBER .)
    LESSTHAN        reduce using rule 74 (digit -> NUMBER .)
    GREATERTHAN     reduce using rule 74 (digit -> NUMBER .)
    LESSTHANEQUAL   reduce using rule 74 (digit -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 74 (digit -> NUMBER .)
    INCREMENT       reduce using rule 74 (digit -> NUMBER .)
    DECREMENT       reduce using rule 74 (digit -> NUMBER .)
    COMMA           reduce using rule 74 (digit -> NUMBER .)
    POW             reduce using rule 74 (digit -> NUMBER .)
    RPAREN          reduce using rule 74 (digit -> NUMBER .)
    SEMICOLON       reduce using rule 74 (digit -> NUMBER .)
    RBRACKET        reduce using rule 74 (digit -> NUMBER .)
    RBRACE          reduce using rule 74 (digit -> NUMBER .)
    COLON           reduce using rule 74 (digit -> NUMBER .)


state 53

    (75) boolean -> TRUE .

    QUESTION        reduce using rule 75 (boolean -> TRUE .)
    PLUS            reduce using rule 75 (boolean -> TRUE .)
    MINUS           reduce using rule 75 (boolean -> TRUE .)
    MULTIPLY        reduce using rule 75 (boolean -> TRUE .)
    DIVIDE          reduce using rule 75 (boolean -> TRUE .)
    MODULUS         reduce using rule 75 (boolean -> TRUE .)
    AND             reduce using rule 75 (boolean -> TRUE .)
    OR              reduce using rule 75 (boolean -> TRUE .)
    EQUAL           reduce using rule 75 (boolean -> TRUE .)
    NOTEQUAL        reduce using rule 75 (boolean -> TRUE .)
    LESSTHAN        reduce using rule 75 (boolean -> TRUE .)
    GREATERTHAN     reduce using rule 75 (boolean -> TRUE .)
    LESSTHANEQUAL   reduce using rule 75 (boolean -> TRUE .)
    GREATERTHANEQUAL reduce using rule 75 (boolean -> TRUE .)
    INCREMENT       reduce using rule 75 (boolean -> TRUE .)
    DECREMENT       reduce using rule 75 (boolean -> TRUE .)
    COMMA           reduce using rule 75 (boolean -> TRUE .)
    POW             reduce using rule 75 (boolean -> TRUE .)
    RPAREN          reduce using rule 75 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 75 (boolean -> TRUE .)
    RBRACKET        reduce using rule 75 (boolean -> TRUE .)
    RBRACE          reduce using rule 75 (boolean -> TRUE .)
    COLON           reduce using rule 75 (boolean -> TRUE .)


state 54

    (76) boolean -> FALSE .

    QUESTION        reduce using rule 76 (boolean -> FALSE .)
    PLUS            reduce using rule 76 (boolean -> FALSE .)
    MINUS           reduce using rule 76 (boolean -> FALSE .)
    MULTIPLY        reduce using rule 76 (boolean -> FALSE .)
    DIVIDE          reduce using rule 76 (boolean -> FALSE .)
    MODULUS         reduce using rule 76 (boolean -> FALSE .)
    AND             reduce using rule 76 (boolean -> FALSE .)
    OR              reduce using rule 76 (boolean -> FALSE .)
    EQUAL           reduce using rule 76 (boolean -> FALSE .)
    NOTEQUAL        reduce using rule 76 (boolean -> FALSE .)
    LESSTHAN        reduce using rule 76 (boolean -> FALSE .)
    GREATERTHAN     reduce using rule 76 (boolean -> FALSE .)
    LESSTHANEQUAL   reduce using rule 76 (boolean -> FALSE .)
    GREATERTHANEQUAL reduce using rule 76 (boolean -> FALSE .)
    INCREMENT       reduce using rule 76 (boolean -> FALSE .)
    DECREMENT       reduce using rule 76 (boolean -> FALSE .)
    COMMA           reduce using rule 76 (boolean -> FALSE .)
    POW             reduce using rule 76 (boolean -> FALSE .)
    RPAREN          reduce using rule 76 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 76 (boolean -> FALSE .)
    RBRACKET        reduce using rule 76 (boolean -> FALSE .)
    RBRACE          reduce using rule 76 (boolean -> FALSE .)
    COLON           reduce using rule 76 (boolean -> FALSE .)


state 55

    (2) stmt_list -> stmt stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    RBRACE          reduce using rule 2 (stmt_list -> stmt stmt_list .)
    CASE            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    DEFAULT         reduce using rule 2 (stmt_list -> stmt stmt_list .)


state 56

    (15) class_declaration -> CLASS identifier . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 93


state 57

    (29) assignment -> identifier ASSIGN . expression SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    expression                     shift and go to state 94
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 58

    (35) function_call -> identifier LPAREN . arg_list RPAREN SEMICOLON
    (36) arg_list -> . expression COMMA arg_list
    (37) arg_list -> . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    arg_list                       shift and go to state 95
    expression                     shift and go to state 96
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 59

    (72) expression -> identifier LBRACKET . expression RBRACKET
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    expression                     shift and go to state 97
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 60

    (73) expression -> identifier LBRACE . expression RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    expression                     shift and go to state 98
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 61

    (16) fun_declaration -> FUN identifier . LPAREN params RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 99


state 62

    (67) expression -> LPAREN expression . RPAREN
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RPAREN          shift and go to state 100
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 63

    (68) expression -> identifier .
    (72) expression -> identifier . LBRACKET expression RBRACKET
    (73) expression -> identifier . LBRACE expression RBRACE

    RPAREN          reduce using rule 68 (expression -> identifier .)
    PLUS            reduce using rule 68 (expression -> identifier .)
    MINUS           reduce using rule 68 (expression -> identifier .)
    MULTIPLY        reduce using rule 68 (expression -> identifier .)
    DIVIDE          reduce using rule 68 (expression -> identifier .)
    MODULUS         reduce using rule 68 (expression -> identifier .)
    AND             reduce using rule 68 (expression -> identifier .)
    OR              reduce using rule 68 (expression -> identifier .)
    EQUAL           reduce using rule 68 (expression -> identifier .)
    NOTEQUAL        reduce using rule 68 (expression -> identifier .)
    LESSTHAN        reduce using rule 68 (expression -> identifier .)
    GREATERTHAN     reduce using rule 68 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 68 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 68 (expression -> identifier .)
    INCREMENT       reduce using rule 68 (expression -> identifier .)
    DECREMENT       reduce using rule 68 (expression -> identifier .)
    COMMA           reduce using rule 68 (expression -> identifier .)
    POW             reduce using rule 68 (expression -> identifier .)
    SEMICOLON       reduce using rule 68 (expression -> identifier .)
    QUESTION        reduce using rule 68 (expression -> identifier .)
    RBRACKET        reduce using rule 68 (expression -> identifier .)
    RBRACE          reduce using rule 68 (expression -> identifier .)
    COLON           reduce using rule 68 (expression -> identifier .)
    LBRACKET        shift and go to state 59
    LBRACE          shift and go to state 60


state 64

    (20) import_declaration -> IMPORT STRING_LITERAL .

    CLASS           reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    FUN             reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    IMPORT          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    PRINT           reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    RETURN          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    INT             reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOAT           reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLE          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    BOOLEAN         reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    INTLIST         reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATLIST       reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGLIST      reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLELIST      reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    INTARRAY        reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATARRAY      reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGARRAY     reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLEARRAY     reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    IDENTIFIER      reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    IF              reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    FOR             reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    WHILE           reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    SWITCH          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    NOT             reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    LPAREN          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    NUMBER          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    TRUE            reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    FALSE           reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    $end            reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    RBRACE          reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    CASE            reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)
    DEFAULT         reduce using rule 20 (import_declaration -> IMPORT STRING_LITERAL .)


state 65

    (24) assignment -> general_type identifier . ASSIGN expression SEMICOLON
    (21) variable_declaration -> general_type identifier . SEMICOLON

    ASSIGN          shift and go to state 101
    SEMICOLON       shift and go to state 102


state 66

    (41) if_stmt -> expression QUESTION . expression COLON expression SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 103
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 67

    (49) expression -> expression PLUS . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 104
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 68

    (50) expression -> expression MINUS . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 105
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 69

    (51) expression -> expression MULTIPLY . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 106
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 70

    (52) expression -> expression DIVIDE . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 107
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 71

    (53) expression -> expression MODULUS . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 108
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 72

    (54) expression -> expression AND . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 109
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 73

    (55) expression -> expression OR . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 110
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 74

    (56) expression -> expression EQUAL . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 111
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 75

    (57) expression -> expression NOTEQUAL . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 112
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 76

    (58) expression -> expression LESSTHAN . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 113
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 77

    (59) expression -> expression GREATERTHAN . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 114
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 78

    (60) expression -> expression LESSTHANEQUAL . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 115
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 79

    (61) expression -> expression GREATERTHANEQUAL . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 116
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 80

    (62) expression -> expression INCREMENT .

    QUESTION        reduce using rule 62 (expression -> expression INCREMENT .)
    PLUS            reduce using rule 62 (expression -> expression INCREMENT .)
    MINUS           reduce using rule 62 (expression -> expression INCREMENT .)
    MULTIPLY        reduce using rule 62 (expression -> expression INCREMENT .)
    DIVIDE          reduce using rule 62 (expression -> expression INCREMENT .)
    MODULUS         reduce using rule 62 (expression -> expression INCREMENT .)
    AND             reduce using rule 62 (expression -> expression INCREMENT .)
    OR              reduce using rule 62 (expression -> expression INCREMENT .)
    EQUAL           reduce using rule 62 (expression -> expression INCREMENT .)
    NOTEQUAL        reduce using rule 62 (expression -> expression INCREMENT .)
    LESSTHAN        reduce using rule 62 (expression -> expression INCREMENT .)
    GREATERTHAN     reduce using rule 62 (expression -> expression INCREMENT .)
    LESSTHANEQUAL   reduce using rule 62 (expression -> expression INCREMENT .)
    GREATERTHANEQUAL reduce using rule 62 (expression -> expression INCREMENT .)
    INCREMENT       reduce using rule 62 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 62 (expression -> expression INCREMENT .)
    COMMA           reduce using rule 62 (expression -> expression INCREMENT .)
    POW             reduce using rule 62 (expression -> expression INCREMENT .)
    RPAREN          reduce using rule 62 (expression -> expression INCREMENT .)
    SEMICOLON       reduce using rule 62 (expression -> expression INCREMENT .)
    RBRACKET        reduce using rule 62 (expression -> expression INCREMENT .)
    RBRACE          reduce using rule 62 (expression -> expression INCREMENT .)
    COLON           reduce using rule 62 (expression -> expression INCREMENT .)


state 81

    (63) expression -> expression DECREMENT .

    QUESTION        reduce using rule 63 (expression -> expression DECREMENT .)
    PLUS            reduce using rule 63 (expression -> expression DECREMENT .)
    MINUS           reduce using rule 63 (expression -> expression DECREMENT .)
    MULTIPLY        reduce using rule 63 (expression -> expression DECREMENT .)
    DIVIDE          reduce using rule 63 (expression -> expression DECREMENT .)
    MODULUS         reduce using rule 63 (expression -> expression DECREMENT .)
    AND             reduce using rule 63 (expression -> expression DECREMENT .)
    OR              reduce using rule 63 (expression -> expression DECREMENT .)
    EQUAL           reduce using rule 63 (expression -> expression DECREMENT .)
    NOTEQUAL        reduce using rule 63 (expression -> expression DECREMENT .)
    LESSTHAN        reduce using rule 63 (expression -> expression DECREMENT .)
    GREATERTHAN     reduce using rule 63 (expression -> expression DECREMENT .)
    LESSTHANEQUAL   reduce using rule 63 (expression -> expression DECREMENT .)
    GREATERTHANEQUAL reduce using rule 63 (expression -> expression DECREMENT .)
    INCREMENT       reduce using rule 63 (expression -> expression DECREMENT .)
    DECREMENT       reduce using rule 63 (expression -> expression DECREMENT .)
    COMMA           reduce using rule 63 (expression -> expression DECREMENT .)
    POW             reduce using rule 63 (expression -> expression DECREMENT .)
    RPAREN          reduce using rule 63 (expression -> expression DECREMENT .)
    SEMICOLON       reduce using rule 63 (expression -> expression DECREMENT .)
    RBRACKET        reduce using rule 63 (expression -> expression DECREMENT .)
    RBRACE          reduce using rule 63 (expression -> expression DECREMENT .)
    COLON           reduce using rule 63 (expression -> expression DECREMENT .)


state 82

    (64) expression -> expression COMMA . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 117
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 83

    (65) expression -> expression POW . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 118
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 84

    (25) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> list_type identifier . ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (22) variable_declaration -> list_type identifier . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 119
    ASSIGN          shift and go to state 120


state 85

    (27) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> array_type identifier . ASSIGN LBRACE expression RBRACE SEMICOLON
    (23) variable_declaration -> array_type identifier . LBRACE RBRACE SEMICOLON

    LBRACE          shift and go to state 121
    ASSIGN          shift and go to state 122


state 86

    (30) print_stmt -> PRINT LPAREN . expression RPAREN SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 123
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 87

    (38) return_stmt -> RETURN expression . SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    SEMICOLON       shift and go to state 124
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 88

    (39) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 125
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 89

    (42) for_stmt -> FOR LPAREN . assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER

    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44

    assignment                     shift and go to state 126
    general_type                   shift and go to state 127
    identifier                     shift and go to state 128
    list_type                      shift and go to state 129
    array_type                     shift and go to state 130

state 90

    (43) while_stmt -> WHILE LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 131
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 91

    (44) switch_stmt -> SWITCH LPAREN . expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 132
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 92

    (66) expression -> NOT expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 66 (expression -> NOT expression .)
    RPAREN          reduce using rule 66 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 66 (expression -> NOT expression .)
    RBRACKET        reduce using rule 66 (expression -> NOT expression .)
    RBRACE          reduce using rule 66 (expression -> NOT expression .)
    COLON           reduce using rule 66 (expression -> NOT expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 66 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 66 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> NOT expression .) ]
  ! MODULUS         [ reduce using rule 66 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 66 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 66 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 66 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 66 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 66 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 66 (expression -> NOT expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 66 (expression -> NOT expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 66 (expression -> NOT expression .) ]
  ! INCREMENT       [ reduce using rule 66 (expression -> NOT expression .) ]
  ! DECREMENT       [ reduce using rule 66 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 66 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 66 (expression -> NOT expression .) ]


state 93

    (15) class_declaration -> CLASS identifier LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    identifier                     shift and go to state 15
    stmt_list                      shift and go to state 133
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 94

    (29) assignment -> identifier ASSIGN expression . SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    SEMICOLON       shift and go to state 134
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 95

    (35) function_call -> identifier LPAREN arg_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 135


state 96

    (36) arg_list -> expression . COMMA arg_list
    (37) arg_list -> expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    COMMA           shift and go to state 136
    RPAREN          reduce using rule 37 (arg_list -> expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    POW             shift and go to state 83


state 97

    (72) expression -> identifier LBRACKET expression . RBRACKET
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RBRACKET        shift and go to state 137
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 98

    (73) expression -> identifier LBRACE expression . RBRACE
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RBRACE          shift and go to state 138
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 99

    (16) fun_declaration -> FUN identifier LPAREN . params RPAREN LBRACE stmt_list RBRACE
    (17) params -> . general_type identifier COMMA params
    (18) params -> . general_type identifier
    (19) params -> . empty
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (93) empty -> .
    (91) identifier -> . IDENTIFIER

    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    RPAREN          reduce using rule 93 (empty -> .)
    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 139
    params                         shift and go to state 140
    general_type                   shift and go to state 141
    empty                          shift and go to state 142

state 100

    (67) expression -> LPAREN expression RPAREN .

    QUESTION        reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    LESSTHANEQUAL   reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    GREATERTHANEQUAL reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 67 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 67 (expression -> LPAREN expression RPAREN .)


state 101

    (24) assignment -> general_type identifier ASSIGN . expression SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    expression                     shift and go to state 143
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 102

    (21) variable_declaration -> general_type identifier SEMICOLON .

    CLASS           reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    FUN             reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    IMPORT          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    PRINT           reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    RETURN          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    INT             reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOAT           reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLE          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    STRING          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    BOOLEAN         reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    INTLIST         reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOATLIST       reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    STRINGLIST      reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLELIST      reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    INTARRAY        reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOATARRAY      reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    STRINGARRAY     reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLEARRAY     reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    IF              reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    FOR             reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    WHILE           reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    SWITCH          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    NOT             reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    LPAREN          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    NUMBER          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    STRING_LITERAL  reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    TRUE            reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    FALSE           reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    $end            reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    RBRACE          reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    CASE            reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)
    DEFAULT         reduce using rule 21 (variable_declaration -> general_type identifier SEMICOLON .)


state 103

    (41) if_stmt -> expression QUESTION expression . COLON expression SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    COLON           shift and go to state 144
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 104

    (49) expression -> expression PLUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 49 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 49 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 49 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 49 (expression -> expression PLUS expression .)
    COLON           reduce using rule 49 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! INCREMENT       [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! DECREMENT       [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 49 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 49 (expression -> expression PLUS expression .) ]


state 105

    (50) expression -> expression MINUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 50 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 50 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 50 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 50 (expression -> expression MINUS expression .)
    COLON           reduce using rule 50 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! INCREMENT       [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! DECREMENT       [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 50 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 50 (expression -> expression MINUS expression .) ]


state 106

    (51) expression -> expression MULTIPLY expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 51 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 51 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression MULTIPLY expression .)
    RBRACKET        reduce using rule 51 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 51 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 51 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! MODULUS         [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! EQUAL           [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUAL        [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! INCREMENT       [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! DECREMENT       [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]
  ! POW             [ reduce using rule 51 (expression -> expression MULTIPLY expression .) ]


state 107

    (52) expression -> expression DIVIDE expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 52 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 52 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 52 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 52 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 52 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! MODULUS         [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! EQUAL           [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUAL        [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! INCREMENT       [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! DECREMENT       [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]
  ! POW             [ reduce using rule 52 (expression -> expression DIVIDE expression .) ]


state 108

    (53) expression -> expression MODULUS expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 53 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 53 (expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression MODULUS expression .)
    RBRACKET        reduce using rule 53 (expression -> expression MODULUS expression .)
    RBRACE          reduce using rule 53 (expression -> expression MODULUS expression .)
    COLON           reduce using rule 53 (expression -> expression MODULUS expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! AND             [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! OR              [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! LESSTHAN        [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! INCREMENT       [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! DECREMENT       [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! COMMA           [ reduce using rule 53 (expression -> expression MODULUS expression .) ]
  ! POW             [ reduce using rule 53 (expression -> expression MODULUS expression .) ]


state 109

    (54) expression -> expression AND expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 54 (expression -> expression AND expression .)
    RPAREN          reduce using rule 54 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 54 (expression -> expression AND expression .)
    RBRACE          reduce using rule 54 (expression -> expression AND expression .)
    COLON           reduce using rule 54 (expression -> expression AND expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! INCREMENT       [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! DECREMENT       [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 54 (expression -> expression AND expression .) ]


state 110

    (55) expression -> expression OR expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 55 (expression -> expression OR expression .)
    RPAREN          reduce using rule 55 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 55 (expression -> expression OR expression .)
    RBRACE          reduce using rule 55 (expression -> expression OR expression .)
    COLON           reduce using rule 55 (expression -> expression OR expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! INCREMENT       [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! DECREMENT       [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! POW             [ reduce using rule 55 (expression -> expression OR expression .) ]


state 111

    (56) expression -> expression EQUAL expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 56 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 56 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 56 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 56 (expression -> expression EQUAL expression .)
    RBRACE          reduce using rule 56 (expression -> expression EQUAL expression .)
    COLON           reduce using rule 56 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! COMMA           [ reduce using rule 56 (expression -> expression EQUAL expression .) ]
  ! POW             [ reduce using rule 56 (expression -> expression EQUAL expression .) ]


state 112

    (57) expression -> expression NOTEQUAL expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 57 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 57 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 57 (expression -> expression NOTEQUAL expression .)
    RBRACKET        reduce using rule 57 (expression -> expression NOTEQUAL expression .)
    RBRACE          reduce using rule 57 (expression -> expression NOTEQUAL expression .)
    COLON           reduce using rule 57 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! COMMA           [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]
  ! POW             [ reduce using rule 57 (expression -> expression NOTEQUAL expression .) ]


state 113

    (58) expression -> expression LESSTHAN expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 58 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 58 (expression -> expression LESSTHAN expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression LESSTHAN expression .)
    RBRACKET        reduce using rule 58 (expression -> expression LESSTHAN expression .)
    RBRACE          reduce using rule 58 (expression -> expression LESSTHAN expression .)
    COLON           reduce using rule 58 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! MODULUS         [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! EQUAL           [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]
  ! POW             [ reduce using rule 58 (expression -> expression LESSTHAN expression .) ]


state 114

    (59) expression -> expression GREATERTHAN expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 59 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 59 (expression -> expression GREATERTHAN expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression GREATERTHAN expression .)
    RBRACKET        reduce using rule 59 (expression -> expression GREATERTHAN expression .)
    RBRACE          reduce using rule 59 (expression -> expression GREATERTHAN expression .)
    COLON           reduce using rule 59 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! MODULUS         [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! EQUAL           [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]
  ! POW             [ reduce using rule 59 (expression -> expression GREATERTHAN expression .) ]


state 115

    (60) expression -> expression LESSTHANEQUAL expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .)
    RPAREN          reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .)
    SEMICOLON       reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .)
    RBRACKET        reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .)
    RBRACE          reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .)
    COLON           reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! COMMA           [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 60 (expression -> expression LESSTHANEQUAL expression .) ]


state 116

    (61) expression -> expression GREATERTHANEQUAL expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .)
    RPAREN          reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .)
    SEMICOLON       reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACKET        reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACE          reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .)
    COLON           reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! COMMA           [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 61 (expression -> expression GREATERTHANEQUAL expression .) ]


state 117

    (64) expression -> expression COMMA expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 64 (expression -> expression COMMA expression .)
    RPAREN          reduce using rule 64 (expression -> expression COMMA expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression COMMA expression .)
    RBRACKET        reduce using rule 64 (expression -> expression COMMA expression .)
    RBRACE          reduce using rule 64 (expression -> expression COMMA expression .)
    COLON           reduce using rule 64 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! MODULUS         [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! EQUAL           [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! NOTEQUAL        [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! INCREMENT       [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! DECREMENT       [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! POW             [ reduce using rule 64 (expression -> expression COMMA expression .) ]


state 118

    (65) expression -> expression POW expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 65 (expression -> expression POW expression .)
    RPAREN          reduce using rule 65 (expression -> expression POW expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression POW expression .)
    RBRACKET        reduce using rule 65 (expression -> expression POW expression .)
    RBRACE          reduce using rule 65 (expression -> expression POW expression .)
    COLON           reduce using rule 65 (expression -> expression POW expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83

  ! PLUS            [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! MULTIPLY        [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! MODULUS         [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! EQUAL           [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! NOTEQUAL        [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! LESSTHAN        [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! GREATERTHAN     [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! INCREMENT       [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! DECREMENT       [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! COMMA           [ reduce using rule 65 (expression -> expression POW expression .) ]
  ! POW             [ reduce using rule 65 (expression -> expression POW expression .) ]


state 119

    (25) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN expression SEMICOLON
    (22) variable_declaration -> list_type identifier LBRACKET . RBRACKET SEMICOLON
    (74) digit -> . NUMBER

    RBRACKET        shift and go to state 146
    NUMBER          shift and go to state 52

    digit                          shift and go to state 145

state 120

    (26) assignment -> list_type identifier ASSIGN . LBRACKET expression RBRACKET SEMICOLON

    LBRACKET        shift and go to state 147


state 121

    (27) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN expression SEMICOLON
    (23) variable_declaration -> array_type identifier LBRACE . RBRACE SEMICOLON
    (74) digit -> . NUMBER

    RBRACE          shift and go to state 149
    NUMBER          shift and go to state 52

    digit                          shift and go to state 148

state 122

    (28) assignment -> array_type identifier ASSIGN . LBRACE expression RBRACE SEMICOLON

    LBRACE          shift and go to state 150


state 123

    (30) print_stmt -> PRINT LPAREN expression . RPAREN SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RPAREN          shift and go to state 151
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 124

    (38) return_stmt -> RETURN expression SEMICOLON .

    CLASS           reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    FUN             reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    IMPORT          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    INT             reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    BOOLEAN         reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    INTLIST         reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    FLOATLIST       reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    STRINGLIST      reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    INTARRAY        reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    $end            reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 38 (return_stmt -> RETURN expression SEMICOLON .)


state 125

    (39) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RPAREN          shift and go to state 152
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 126

    (42) for_stmt -> FOR LPAREN assignment . SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE

    SEMICOLON       shift and go to state 153


state 127

    (24) assignment -> general_type . identifier ASSIGN expression SEMICOLON
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 154

state 128

    (29) assignment -> identifier . ASSIGN expression SEMICOLON
    (82) general_type -> identifier .

    ASSIGN          shift and go to state 57
    IDENTIFIER      reduce using rule 82 (general_type -> identifier .)


state 129

    (25) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> list_type . identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 155

state 130

    (27) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> array_type . identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 156

state 131

    (43) while_stmt -> WHILE LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RPAREN          shift and go to state 157
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 132

    (44) switch_stmt -> SWITCH LPAREN expression . RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RPAREN          shift and go to state 158
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 133

    (15) class_declaration -> CLASS identifier LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 159


state 134

    (29) assignment -> identifier ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INT             reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IF              reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    $end            reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 29 (assignment -> identifier ASSIGN expression SEMICOLON .)


state 135

    (35) function_call -> identifier LPAREN arg_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 160


state 136

    (36) arg_list -> expression COMMA . arg_list
    (64) expression -> expression COMMA . expression
    (36) arg_list -> . expression COMMA arg_list
    (37) arg_list -> . expression
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 161
    arg_list                       shift and go to state 162
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 137

    (72) expression -> identifier LBRACKET expression RBRACKET .

    QUESTION        reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    MULTIPLY        reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    AND             reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    OR              reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    NOTEQUAL        reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    LESSTHANEQUAL   reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    GREATERTHANEQUAL reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    POW             reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)
    COLON           reduce using rule 72 (expression -> identifier LBRACKET expression RBRACKET .)


state 138

    (73) expression -> identifier LBRACE expression RBRACE .

    QUESTION        reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    PLUS            reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    MINUS           reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    MULTIPLY        reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    DIVIDE          reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    MODULUS         reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    AND             reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    OR              reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    EQUAL           reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    NOTEQUAL        reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    LESSTHAN        reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    GREATERTHAN     reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    LESSTHANEQUAL   reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    GREATERTHANEQUAL reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    INCREMENT       reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    DECREMENT       reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    COMMA           reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    POW             reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    RPAREN          reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    SEMICOLON       reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    RBRACKET        reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    RBRACE          reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)
    COLON           reduce using rule 73 (expression -> identifier LBRACE expression RBRACE .)


state 139

    (82) general_type -> identifier .

    IDENTIFIER      reduce using rule 82 (general_type -> identifier .)


state 140

    (16) fun_declaration -> FUN identifier LPAREN params . RPAREN LBRACE stmt_list RBRACE

    RPAREN          shift and go to state 163


state 141

    (17) params -> general_type . identifier COMMA params
    (18) params -> general_type . identifier
    (91) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 44

    identifier                     shift and go to state 164

state 142

    (19) params -> empty .

    RPAREN          reduce using rule 19 (params -> empty .)


state 143

    (24) assignment -> general_type identifier ASSIGN expression . SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    SEMICOLON       shift and go to state 165
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 144

    (41) if_stmt -> expression QUESTION expression COLON . expression SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 166
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 145

    (25) assignment -> list_type identifier LBRACKET digit . RBRACKET ASSIGN expression SEMICOLON

    RBRACKET        shift and go to state 167


state 146

    (22) variable_declaration -> list_type identifier LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 168


state 147

    (26) assignment -> list_type identifier ASSIGN LBRACKET . expression RBRACKET SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    expression                     shift and go to state 169
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 148

    (27) assignment -> array_type identifier LBRACE digit . RBRACE ASSIGN expression SEMICOLON

    RBRACE          shift and go to state 170


state 149

    (23) variable_declaration -> array_type identifier LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 171


state 150

    (28) assignment -> array_type identifier ASSIGN LBRACE . expression RBRACE SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    expression                     shift and go to state 172
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 151

    (30) print_stmt -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 173


state 152

    (39) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE
    (40) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 174


state 153

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON . expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 175
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 154

    (24) assignment -> general_type identifier . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 101


state 155

    (25) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> list_type identifier . ASSIGN LBRACKET expression RBRACKET SEMICOLON

    LBRACKET        shift and go to state 176
    ASSIGN          shift and go to state 120


state 156

    (27) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> array_type identifier . ASSIGN LBRACE expression RBRACE SEMICOLON

    LBRACE          shift and go to state 177
    ASSIGN          shift and go to state 122


state 157

    (43) while_stmt -> WHILE LPAREN expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 178


state 158

    (44) switch_stmt -> SWITCH LPAREN expression RPAREN . LBRACE case_stmts default_stmt RBRACE

    LBRACE          shift and go to state 179


state 159

    (15) class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    INT             reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    IF              reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    $end            reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 15 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)


state 160

    (35) function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .

    CLASS           reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FUN             reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    IMPORT          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    INT             reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FLOAT           reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRING          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    INTLIST         reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    IF              reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FOR             reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    SWITCH          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    NOT             reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    LPAREN          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    NUMBER          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    TRUE            reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FALSE           reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    $end            reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    CASE            reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 35 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)


state 161

    (64) expression -> expression COMMA expression .
    (36) arg_list -> expression . COMMA arg_list
    (37) arg_list -> expression .
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 37 (arg_list -> expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    COMMA           shift and go to state 136
    RPAREN          reduce using rule 37 (arg_list -> expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    POW             shift and go to state 83

  ! COMMA           [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! PLUS            [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! MODULUS         [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! EQUAL           [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! NOTEQUAL        [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! INCREMENT       [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! DECREMENT       [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! POW             [ reduce using rule 64 (expression -> expression COMMA expression .) ]
  ! RPAREN          [ reduce using rule 64 (expression -> expression COMMA expression .) ]


state 162

    (36) arg_list -> expression COMMA arg_list .

    RPAREN          reduce using rule 36 (arg_list -> expression COMMA arg_list .)


state 163

    (16) fun_declaration -> FUN identifier LPAREN params RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 180


state 164

    (17) params -> general_type identifier . COMMA params
    (18) params -> general_type identifier .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 18 (params -> general_type identifier .)


state 165

    (24) assignment -> general_type identifier ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INT             reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IF              reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    $end            reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 24 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)


state 166

    (41) if_stmt -> expression QUESTION expression COLON expression . SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    SEMICOLON       shift and go to state 182
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 167

    (25) assignment -> list_type identifier LBRACKET digit RBRACKET . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 183


state 168

    (22) variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .

    CLASS           reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FUN             reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IMPORT          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    PRINT           reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    RETURN          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INT             reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRING          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INTLIST         reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOATLIST       reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRINGLIST      reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLELIST      reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INTARRAY        reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOATARRAY      reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRINGARRAY     reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLEARRAY     reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IF              reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FOR             reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    WHILE           reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    NOT             reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    TRUE            reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FALSE           reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    CASE            reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 22 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)


state 169

    (26) assignment -> list_type identifier ASSIGN LBRACKET expression . RBRACKET SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RBRACKET        shift and go to state 184
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 170

    (27) assignment -> array_type identifier LBRACE digit RBRACE . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 185


state 171

    (23) variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .

    CLASS           reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FUN             reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IMPORT          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    PRINT           reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    RETURN          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INT             reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOAT           reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLE          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    BOOLEAN         reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INTLIST         reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOATLIST       reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRINGLIST      reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLELIST      reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INTARRAY        reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOATARRAY      reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRINGARRAY     reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLEARRAY     reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IF              reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FOR             reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    WHILE           reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    SWITCH          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRING_LITERAL  reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    TRUE            reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FALSE           reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    CASE            reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 23 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)


state 172

    (28) assignment -> array_type identifier ASSIGN LBRACE expression . RBRACE SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RBRACE          shift and go to state 186
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 173

    (30) print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .

    CLASS           reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FUN             reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTLIST         reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 30 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 174

    (39) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (40) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 21
    stmt_list                      shift and go to state 187
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 175

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON expression . SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    SEMICOLON       shift and go to state 188
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 176

    (25) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN expression SEMICOLON
    (74) digit -> . NUMBER

    NUMBER          shift and go to state 52

    digit                          shift and go to state 145

state 177

    (27) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN expression SEMICOLON
    (74) digit -> . NUMBER

    NUMBER          shift and go to state 52

    digit                          shift and go to state 148

state 178

    (43) while_stmt -> WHILE LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 21
    stmt_list                      shift and go to state 189
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 179

    (44) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE . case_stmts default_stmt RBRACE
    (45) case_stmts -> . CASE expression COLON stmt_list case_stmts
    (46) case_stmts -> . empty
    (93) empty -> .

    CASE            shift and go to state 191
    DEFAULT         reduce using rule 93 (empty -> .)
    RBRACE          reduce using rule 93 (empty -> .)

    case_stmts                     shift and go to state 190
    empty                          shift and go to state 192

state 180

    (16) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    identifier                     shift and go to state 15
    stmt_list                      shift and go to state 193
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 181

    (17) params -> general_type identifier COMMA . params
    (17) params -> . general_type identifier COMMA params
    (18) params -> . general_type identifier
    (19) params -> . empty
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (93) empty -> .
    (91) identifier -> . IDENTIFIER

    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    RPAREN          reduce using rule 93 (empty -> .)
    IDENTIFIER      shift and go to state 44

    general_type                   shift and go to state 141
    identifier                     shift and go to state 139
    params                         shift and go to state 194
    empty                          shift and go to state 142

state 182

    (41) if_stmt -> expression QUESTION expression COLON expression SEMICOLON .

    CLASS           reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FUN             reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IMPORT          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    PRINT           reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    RETURN          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INT             reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOAT           reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLE          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    BOOLEAN         reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTLIST         reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATLIST       reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGLIST      reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLELIST      reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTARRAY        reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATARRAY      reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGARRAY     reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IDENTIFIER      reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IF              reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FOR             reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    WHILE           reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    SWITCH          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NOT             reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    LPAREN          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NUMBER          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    TRUE            reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FALSE           reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    $end            reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    RBRACE          reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    CASE            reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DEFAULT         reduce using rule 41 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)


state 183

    (25) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN . expression SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    expression                     shift and go to state 195
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 184

    (26) assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 196


state 185

    (27) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN . expression SEMICOLON
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    expression                     shift and go to state 197
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 186

    (28) assignment -> array_type identifier ASSIGN LBRACE expression RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 198


state 187

    (39) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE
    (40) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE

    RBRACE          shift and go to state 199


state 188

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON . expression RPAREN LBRACE stmt_list RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 200
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 189

    (43) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 201


state 190

    (44) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts . default_stmt RBRACE
    (47) default_stmt -> . DEFAULT COLON stmt_list
    (48) default_stmt -> . empty
    (93) empty -> .

    DEFAULT         shift and go to state 203
    RBRACE          reduce using rule 93 (empty -> .)

    default_stmt                   shift and go to state 202
    empty                          shift and go to state 204

state 191

    (45) case_stmts -> CASE . expression COLON stmt_list case_stmts
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (91) identifier -> . IDENTIFIER
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    IDENTIFIER      shift and go to state 44
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 205
    identifier                     shift and go to state 63
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 192

    (46) case_stmts -> empty .

    DEFAULT         reduce using rule 46 (case_stmts -> empty .)
    RBRACE          reduce using rule 46 (case_stmts -> empty .)


state 193

    (16) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 206


state 194

    (17) params -> general_type identifier COMMA params .

    RPAREN          reduce using rule 17 (params -> general_type identifier COMMA params .)


state 195

    (25) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression . SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    SEMICOLON       shift and go to state 207
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 196

    (26) assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .

    CLASS           reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FUN             reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IMPORT          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    PRINT           reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    RETURN          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INT             reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRING          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INTLIST         reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOATLIST       reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRINGLIST      reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLELIST      reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INTARRAY        reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOATARRAY      reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRINGARRAY     reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLEARRAY     reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IF              reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FOR             reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    WHILE           reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    NOT             reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    TRUE            reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FALSE           reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    $end            reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    CASE            reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 26 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)


state 197

    (27) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression . SEMICOLON
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    SEMICOLON       shift and go to state 208
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 198

    (28) assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .

    CLASS           reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FUN             reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IMPORT          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    PRINT           reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    RETURN          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INT             reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOAT           reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLE          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRING          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    BOOLEAN         reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INTLIST         reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOATLIST       reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRINGLIST      reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLELIST      reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INTARRAY        reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOATARRAY      reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRINGARRAY     reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLEARRAY     reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IF              reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FOR             reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    WHILE           reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    SWITCH          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    NOT             reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    LPAREN          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    NUMBER          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRING_LITERAL  reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    TRUE            reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FALSE           reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    $end            reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    RBRACE          reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    CASE            reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 28 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)


state 199

    (39) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .
    (40) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    CLASS           reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 39 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 209


state 200

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression . RPAREN LBRACE stmt_list RBRACE
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    RPAREN          shift and go to state 210
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 201

    (43) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 43 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)


state 202

    (44) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt . RBRACE

    RBRACE          shift and go to state 211


state 203

    (47) default_stmt -> DEFAULT . COLON stmt_list

    COLON           shift and go to state 212


state 204

    (48) default_stmt -> empty .

    RBRACE          reduce using rule 48 (default_stmt -> empty .)


state 205

    (45) case_stmts -> CASE expression . COLON stmt_list case_stmts
    (49) expression -> expression . PLUS expression
    (50) expression -> expression . MINUS expression
    (51) expression -> expression . MULTIPLY expression
    (52) expression -> expression . DIVIDE expression
    (53) expression -> expression . MODULUS expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . EQUAL expression
    (57) expression -> expression . NOTEQUAL expression
    (58) expression -> expression . LESSTHAN expression
    (59) expression -> expression . GREATERTHAN expression
    (60) expression -> expression . LESSTHANEQUAL expression
    (61) expression -> expression . GREATERTHANEQUAL expression
    (62) expression -> expression . INCREMENT
    (63) expression -> expression . DECREMENT
    (64) expression -> expression . COMMA expression
    (65) expression -> expression . POW expression

    COLON           shift and go to state 213
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    MULTIPLY        shift and go to state 69
    DIVIDE          shift and go to state 70
    MODULUS         shift and go to state 71
    AND             shift and go to state 72
    OR              shift and go to state 73
    EQUAL           shift and go to state 74
    NOTEQUAL        shift and go to state 75
    LESSTHAN        shift and go to state 76
    GREATERTHAN     shift and go to state 77
    LESSTHANEQUAL   shift and go to state 78
    GREATERTHANEQUAL shift and go to state 79
    INCREMENT       shift and go to state 80
    DECREMENT       shift and go to state 81
    COMMA           shift and go to state 82
    POW             shift and go to state 83


state 206

    (16) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 16 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)


state 207

    (25) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INT             reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    $end            reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 25 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)


state 208

    (27) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INT             reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IF              reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    $end            reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 27 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)


state 209

    (40) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 214


state 210

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 215


state 211

    (44) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .

    CLASS           reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FUN             reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IMPORT          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    PRINT           reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    RETURN          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INT             reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOAT           reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLE          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRING          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    BOOLEAN         reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INTLIST         reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOATLIST       reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRINGLIST      reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLELIST      reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INTARRAY        reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOATARRAY      reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRINGARRAY     reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLEARRAY     reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IDENTIFIER      reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IF              reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FOR             reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    WHILE           reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    SWITCH          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    NOT             reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    LPAREN          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    NUMBER          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRING_LITERAL  reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    TRUE            reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FALSE           reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    $end            reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    RBRACE          reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    CASE            reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DEFAULT         reduce using rule 44 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)


state 212

    (47) default_stmt -> DEFAULT COLON . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    stmt_list                      shift and go to state 216
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 213

    (45) case_stmts -> CASE expression COLON . stmt_list case_stmts
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    CASE            reduce using rule 93 (empty -> .)
    DEFAULT         reduce using rule 93 (empty -> .)
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 21
    stmt_list                      shift and go to state 217
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 214

    (40) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    expression                     shift and go to state 21
    stmt_list                      shift and go to state 218
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 215

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . return_stmt
    (13) stmt -> . function_call
    (14) stmt -> . empty
    (93) empty -> .
    (15) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (16) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (20) import_declaration -> . IMPORT STRING_LITERAL
    (24) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (25) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (26) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (27) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (28) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (29) assignment -> . identifier ASSIGN expression SEMICOLON
    (21) variable_declaration -> . general_type identifier SEMICOLON
    (22) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (23) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (30) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (31) control_structure -> . if_stmt
    (32) control_structure -> . for_stmt
    (33) control_structure -> . while_stmt
    (34) control_structure -> . switch_stmt
    (38) return_stmt -> . RETURN expression SEMICOLON
    (35) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (77) general_type -> . INT
    (78) general_type -> . FLOAT
    (79) general_type -> . DOUBLE
    (80) general_type -> . STRING
    (81) general_type -> . BOOLEAN
    (82) general_type -> . identifier
    (87) list_type -> . INTLIST
    (88) list_type -> . FLOATLIST
    (89) list_type -> . STRINGLIST
    (90) list_type -> . DOUBLELIST
    (83) array_type -> . INTARRAY
    (84) array_type -> . FLOATARRAY
    (85) array_type -> . STRINGARRAY
    (86) array_type -> . DOUBLEARRAY
    (91) identifier -> . IDENTIFIER
    (39) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (40) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (41) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (42) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (44) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (49) expression -> . expression PLUS expression
    (50) expression -> . expression MINUS expression
    (51) expression -> . expression MULTIPLY expression
    (52) expression -> . expression DIVIDE expression
    (53) expression -> . expression MODULUS expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression EQUAL expression
    (57) expression -> . expression NOTEQUAL expression
    (58) expression -> . expression LESSTHAN expression
    (59) expression -> . expression GREATERTHAN expression
    (60) expression -> . expression LESSTHANEQUAL expression
    (61) expression -> . expression GREATERTHANEQUAL expression
    (62) expression -> . expression INCREMENT
    (63) expression -> . expression DECREMENT
    (64) expression -> . expression COMMA expression
    (65) expression -> . expression POW expression
    (66) expression -> . NOT expression
    (67) expression -> . LPAREN expression RPAREN
    (68) expression -> . identifier
    (69) expression -> . digit
    (70) expression -> . string
    (71) expression -> . boolean
    (72) expression -> . identifier LBRACKET expression RBRACKET
    (73) expression -> . identifier LBRACE expression RBRACE
    (74) digit -> . NUMBER
    (92) string -> . STRING_LITERAL
    (75) boolean -> . TRUE
    (76) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 93 (empty -> .)
    CLASS           shift and go to state 14
    FUN             shift and go to state 16
    IMPORT          shift and go to state 18
    PRINT           shift and go to state 25
    RETURN          shift and go to state 30
    INT             shift and go to state 31
    FLOAT           shift and go to state 32
    DOUBLE          shift and go to state 33
    STRING          shift and go to state 34
    BOOLEAN         shift and go to state 35
    INTLIST         shift and go to state 36
    FLOATLIST       shift and go to state 37
    STRINGLIST      shift and go to state 38
    DOUBLELIST      shift and go to state 39
    INTARRAY        shift and go to state 40
    FLOATARRAY      shift and go to state 41
    STRINGARRAY     shift and go to state 42
    DOUBLEARRAY     shift and go to state 43
    IDENTIFIER      shift and go to state 44
    IF              shift and go to state 45
    FOR             shift and go to state 46
    WHILE           shift and go to state 47
    SWITCH          shift and go to state 48
    NOT             shift and go to state 49
    LPAREN          shift and go to state 17
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 19
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! CLASS           [ reduce using rule 93 (empty -> .) ]
  ! FUN             [ reduce using rule 93 (empty -> .) ]
  ! IMPORT          [ reduce using rule 93 (empty -> .) ]
  ! PRINT           [ reduce using rule 93 (empty -> .) ]
  ! RETURN          [ reduce using rule 93 (empty -> .) ]
  ! INT             [ reduce using rule 93 (empty -> .) ]
  ! FLOAT           [ reduce using rule 93 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 93 (empty -> .) ]
  ! STRING          [ reduce using rule 93 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 93 (empty -> .) ]
  ! INTLIST         [ reduce using rule 93 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 93 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 93 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 93 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 93 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 93 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 93 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 93 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 93 (empty -> .) ]
  ! IF              [ reduce using rule 93 (empty -> .) ]
  ! FOR             [ reduce using rule 93 (empty -> .) ]
  ! WHILE           [ reduce using rule 93 (empty -> .) ]
  ! SWITCH          [ reduce using rule 93 (empty -> .) ]
  ! NOT             [ reduce using rule 93 (empty -> .) ]
  ! LPAREN          [ reduce using rule 93 (empty -> .) ]
  ! NUMBER          [ reduce using rule 93 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 93 (empty -> .) ]
  ! TRUE            [ reduce using rule 93 (empty -> .) ]
  ! FALSE           [ reduce using rule 93 (empty -> .) ]

    assignment                     shift and go to state 8
    expression                     shift and go to state 21
    stmt_list                      shift and go to state 219
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    return_stmt                    shift and go to state 12
    function_call                  shift and go to state 13
    identifier                     shift and go to state 15
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    switch_stmt                    shift and go to state 29
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 216

    (47) default_stmt -> DEFAULT COLON stmt_list .

    RBRACE          reduce using rule 47 (default_stmt -> DEFAULT COLON stmt_list .)


state 217

    (45) case_stmts -> CASE expression COLON stmt_list . case_stmts
    (45) case_stmts -> . CASE expression COLON stmt_list case_stmts
    (46) case_stmts -> . empty
    (93) empty -> .

    CASE            shift and go to state 191
    DEFAULT         reduce using rule 93 (empty -> .)
    RBRACE          reduce using rule 93 (empty -> .)

    case_stmts                     shift and go to state 220
    empty                          shift and go to state 192

state 218

    (40) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 221


state 219

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 222


state 220

    (45) case_stmts -> CASE expression COLON stmt_list case_stmts .

    DEFAULT         reduce using rule 45 (case_stmts -> CASE expression COLON stmt_list case_stmts .)
    RBRACE          reduce using rule 45 (case_stmts -> CASE expression COLON stmt_list case_stmts .)


state 221

    (40) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INT             reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    $end            reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 40 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)


state 222

    (42) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 42 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for FUN in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 0 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for FUN in state 3 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 3 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 3 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 3 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 3 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 3 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 92 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 92 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 92 resolved as shift
WARNING: shift/reduce conflict for POW in state 92 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 93 resolved as shift
WARNING: shift/reduce conflict for FUN in state 93 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 93 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 93 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 93 resolved as shift
WARNING: shift/reduce conflict for INT in state 93 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 93 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 93 resolved as shift
WARNING: shift/reduce conflict for STRING in state 93 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 93 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 93 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 93 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 93 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 93 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 93 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 93 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 93 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 93 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 93 resolved as shift
WARNING: shift/reduce conflict for IF in state 93 resolved as shift
WARNING: shift/reduce conflict for FOR in state 93 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 93 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 93 resolved as shift
WARNING: shift/reduce conflict for NOT in state 93 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 93 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 93 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 93 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 93 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 104 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 104 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 104 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 104 resolved as shift
WARNING: shift/reduce conflict for POW in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 105 resolved as shift
WARNING: shift/reduce conflict for POW in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 106 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 106 resolved as shift
WARNING: shift/reduce conflict for POW in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 107 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 107 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 107 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 107 resolved as shift
WARNING: shift/reduce conflict for POW in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 108 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 108 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 108 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 108 resolved as shift
WARNING: shift/reduce conflict for POW in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 109 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 109 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 109 resolved as shift
WARNING: shift/reduce conflict for POW in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 110 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 110 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 110 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 110 resolved as shift
WARNING: shift/reduce conflict for POW in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 111 resolved as shift
WARNING: shift/reduce conflict for AND in state 111 resolved as shift
WARNING: shift/reduce conflict for OR in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 111 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 111 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 111 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 111 resolved as shift
WARNING: shift/reduce conflict for POW in state 111 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 112 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 112 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 112 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 112 resolved as shift
WARNING: shift/reduce conflict for AND in state 112 resolved as shift
WARNING: shift/reduce conflict for OR in state 112 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 112 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 112 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 112 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 112 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 112 resolved as shift
WARNING: shift/reduce conflict for POW in state 112 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for OR in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 113 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 113 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 113 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 113 resolved as shift
WARNING: shift/reduce conflict for POW in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for OR in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 114 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 114 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 114 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 114 resolved as shift
WARNING: shift/reduce conflict for POW in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 115 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 115 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 115 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 115 resolved as shift
WARNING: shift/reduce conflict for POW in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 116 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 116 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 116 resolved as shift
WARNING: shift/reduce conflict for POW in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 117 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 117 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 117 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for POW in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 118 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 118 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 118 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 118 resolved as shift
WARNING: shift/reduce conflict for POW in state 118 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 161 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 161 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 161 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 161 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 161 resolved as shift
WARNING: shift/reduce conflict for AND in state 161 resolved as shift
WARNING: shift/reduce conflict for OR in state 161 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 161 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 161 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 161 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 161 resolved as shift
WARNING: shift/reduce conflict for POW in state 161 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 174 resolved as shift
WARNING: shift/reduce conflict for FUN in state 174 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 174 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 174 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 174 resolved as shift
WARNING: shift/reduce conflict for INT in state 174 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 174 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 174 resolved as shift
WARNING: shift/reduce conflict for STRING in state 174 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 174 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 174 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 174 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 174 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 174 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 174 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 174 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 174 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 174 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 174 resolved as shift
WARNING: shift/reduce conflict for IF in state 174 resolved as shift
WARNING: shift/reduce conflict for FOR in state 174 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 174 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 174 resolved as shift
WARNING: shift/reduce conflict for NOT in state 174 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 174 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 174 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 174 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 174 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 174 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 178 resolved as shift
WARNING: shift/reduce conflict for FUN in state 178 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 178 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 178 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 178 resolved as shift
WARNING: shift/reduce conflict for INT in state 178 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 178 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 178 resolved as shift
WARNING: shift/reduce conflict for STRING in state 178 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 178 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 178 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 178 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 178 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 178 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 178 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 178 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 178 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 178 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 178 resolved as shift
WARNING: shift/reduce conflict for IF in state 178 resolved as shift
WARNING: shift/reduce conflict for FOR in state 178 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 178 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 178 resolved as shift
WARNING: shift/reduce conflict for NOT in state 178 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 178 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 178 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 178 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 178 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 178 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 180 resolved as shift
WARNING: shift/reduce conflict for FUN in state 180 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 180 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 180 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 180 resolved as shift
WARNING: shift/reduce conflict for INT in state 180 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 180 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 180 resolved as shift
WARNING: shift/reduce conflict for STRING in state 180 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 180 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 180 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 180 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 180 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 180 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 180 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 180 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 180 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 180 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 180 resolved as shift
WARNING: shift/reduce conflict for IF in state 180 resolved as shift
WARNING: shift/reduce conflict for FOR in state 180 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 180 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 180 resolved as shift
WARNING: shift/reduce conflict for NOT in state 180 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 180 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 180 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 180 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 180 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 180 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 212 resolved as shift
WARNING: shift/reduce conflict for FUN in state 212 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 212 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 212 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 212 resolved as shift
WARNING: shift/reduce conflict for INT in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 212 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 212 resolved as shift
WARNING: shift/reduce conflict for STRING in state 212 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 212 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 212 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 212 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 212 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 212 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 212 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 212 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 212 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 212 resolved as shift
WARNING: shift/reduce conflict for IF in state 212 resolved as shift
WARNING: shift/reduce conflict for FOR in state 212 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 212 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 212 resolved as shift
WARNING: shift/reduce conflict for NOT in state 212 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 212 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 212 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 212 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 212 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 212 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 213 resolved as shift
WARNING: shift/reduce conflict for FUN in state 213 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 213 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 213 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 213 resolved as shift
WARNING: shift/reduce conflict for INT in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 213 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 213 resolved as shift
WARNING: shift/reduce conflict for STRING in state 213 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 213 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 213 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 213 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 213 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 213 resolved as shift
WARNING: shift/reduce conflict for IF in state 213 resolved as shift
WARNING: shift/reduce conflict for FOR in state 213 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 213 resolved as shift
WARNING: shift/reduce conflict for NOT in state 213 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 213 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 213 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 213 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 213 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 213 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 214 resolved as shift
WARNING: shift/reduce conflict for FUN in state 214 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 214 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 214 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 214 resolved as shift
WARNING: shift/reduce conflict for INT in state 214 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 214 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 214 resolved as shift
WARNING: shift/reduce conflict for STRING in state 214 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 214 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 214 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 214 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 214 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 214 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 214 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 214 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 214 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 214 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 214 resolved as shift
WARNING: shift/reduce conflict for IF in state 214 resolved as shift
WARNING: shift/reduce conflict for FOR in state 214 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 214 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 214 resolved as shift
WARNING: shift/reduce conflict for NOT in state 214 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 214 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 214 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 214 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 214 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 214 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 215 resolved as shift
WARNING: shift/reduce conflict for FUN in state 215 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 215 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 215 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 215 resolved as shift
WARNING: shift/reduce conflict for INT in state 215 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 215 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 215 resolved as shift
WARNING: shift/reduce conflict for STRING in state 215 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 215 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 215 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 215 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 215 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 215 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 215 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 215 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 215 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 215 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 215 resolved as shift
WARNING: shift/reduce conflict for IF in state 215 resolved as shift
WARNING: shift/reduce conflict for FOR in state 215 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 215 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 215 resolved as shift
WARNING: shift/reduce conflict for NOT in state 215 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 215 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 215 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 215 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 215 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 215 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (stmt_list -> stmt)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (stmt_list -> empty)
WARNING: rejected rule (stmt -> empty) in state 4
WARNING: reduce/reduce conflict in state 161 resolved using rule (arg_list -> expression)
WARNING: rejected rule (expression -> expression COMMA expression) in state 161
