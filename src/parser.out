Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    ARGS
    ARROW
    AT
    BACKSLASH
    CLASS
    CONTINUE
    DIVIDEASSIGN
    DOT
    DOUBLEQUOTE
    HASH
    INPUT
    MINUSASSIGN
    MODASSIGN
    NEW
    NULL
    PARAMS
    PIPE
    PLUSASSIGN
    SLASH
    SWITCH
    TIMESASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt_list -> empty
Rule 5     stmt -> import_declaration
Rule 6     stmt -> fun_declaration
Rule 7     stmt -> assignment
Rule 8     stmt -> variable_declaration
Rule 9     stmt -> print_stmt
Rule 10    stmt -> control_structure
Rule 11    stmt -> return_stmt
Rule 12    stmt -> function_call
Rule 13    stmt -> break_stmt
Rule 14    stmt -> empty
Rule 15    stmt -> comment stmt
Rule 16    print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 17    print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
Rule 18    print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
Rule 19    print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON
Rule 20    fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
Rule 21    fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
Rule 22    function_call -> identifier LPAREN arg_list RPAREN SEMICOLON
Rule 23    return_stmt -> RETURN expression SEMICOLON
Rule 24    return_type -> general_type
Rule 25    return_type -> array_type
Rule 26    return_type -> list_type
Rule 27    return_type -> VOID
Rule 28    break_stmt -> BREAK SEMICOLON
Rule 29    params -> general_type identifier COMMA params
Rule 30    params -> general_type identifier
Rule 31    params -> empty
Rule 32    import_declaration -> IMPORT STRING_LITERAL
Rule 33    variable_declaration -> general_type identifier SEMICOLON
Rule 34    variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON
Rule 35    variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON
Rule 36    assignment -> general_type identifier ASSIGN expression SEMICOLON
Rule 37    assignment -> general_type identifier ASSIGN function_call
Rule 38    assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
Rule 39    assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
Rule 40    assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
Rule 41    assignment -> list_type identifier ASSIGN function_call
Rule 42    assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
Rule 43    assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call
Rule 44    assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
Rule 45    assignment -> array_type identifier ASSIGN function_call
Rule 46    assignment -> identifier ASSIGN expression SEMICOLON
Rule 47    assignment -> identifier ASSIGN function_call
Rule 48    control_structure -> if_stmt
Rule 49    control_structure -> for_stmt
Rule 50    control_structure -> while_stmt
Rule 51    arg_list -> expression COMMA arg_list
Rule 52    arg_list -> expression
Rule 53    arg_list -> empty
Rule 54    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 55    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 56    if_stmt -> expression QUESTION expression COLON expression SEMICOLON
Rule 57    for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
Rule 58    for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
Rule 59    while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 60    case_stmts -> CASE expression COLON stmt_list case_stmts
Rule 61    case_stmts -> empty
Rule 62    default_stmt -> DEFAULT COLON stmt_list
Rule 63    default_stmt -> empty
Rule 64    expression -> expression PLUS expression
Rule 65    expression -> expression MINUS expression
Rule 66    expression -> expression MULTIPLY expression
Rule 67    expression -> expression DIVIDE expression
Rule 68    expression -> expression MODULUS expression
Rule 69    expression -> expression AND expression
Rule 70    expression -> expression OR expression
Rule 71    expression -> expression EQUAL expression
Rule 72    expression -> expression NOTEQUAL expression
Rule 73    expression -> expression LESSTHAN expression
Rule 74    expression -> expression GREATERTHAN expression
Rule 75    expression -> expression LESSTHANEQUAL expression
Rule 76    expression -> expression GREATERTHANEQUAL expression
Rule 77    expression -> expression COMMA expression
Rule 78    expression -> expression POW expression
Rule 79    expression -> LPAREN expression RPAREN
Rule 80    expression -> expression INCREMENT
Rule 81    expression -> expression DECREMENT
Rule 82    expression -> NOT expression
Rule 83    expression -> identifier
Rule 84    expression -> digit
Rule 85    expression -> string
Rule 86    expression -> boolean
Rule 87    expression -> identifier LBRACKET expression RBRACKET
Rule 88    expression -> identifier LBRACE expression RBRACE
Rule 89    digit -> NUMBER
Rule 90    boolean -> TRUE
Rule 91    boolean -> FALSE
Rule 92    general_type -> INT
Rule 93    general_type -> FLOAT
Rule 94    general_type -> DOUBLE
Rule 95    general_type -> STRING
Rule 96    general_type -> BOOLEAN
Rule 97    general_type -> identifier
Rule 98    array_type -> INTARRAY
Rule 99    array_type -> FLOATARRAY
Rule 100   array_type -> STRINGARRAY
Rule 101   array_type -> DOUBLEARRAY
Rule 102   list_type -> INTLIST
Rule 103   list_type -> FLOATLIST
Rule 104   list_type -> STRINGLIST
Rule 105   list_type -> DOUBLELIST
Rule 106   identifier -> IDENTIFIER
Rule 107   comment -> COMMENT
Rule 108   string -> STRING_LITERAL
Rule 109   empty -> <empty>

Terminals, with rules where they appear

AND                  : 69
APOSTROPHE           : 
ARGS                 : 
ARROW                : 
ASSIGN               : 36 37 38 39 40 41 42 43 44 45 46 47
AT                   : 
BACKSLASH            : 
BOOLEAN              : 96
BREAK                : 28
CASE                 : 60
CLASS                : 
COLON                : 56 60 62
COMMA                : 29 51 77
COMMENT              : 107
CONTINUE             : 
DECREMENT            : 81
DEFAULT              : 62
DIVIDE               : 67
DIVIDEASSIGN         : 
DOT                  : 
DOUBLE               : 94
DOUBLEARRAY          : 101
DOUBLELIST           : 105
DOUBLEQUOTE          : 
ELSE                 : 55
EQUAL                : 71
FALSE                : 91
FLOAT                : 93
FLOATARRAY           : 99
FLOATLIST            : 103
FOR                  : 57 58
FUN                  : 20 21
GREATERTHAN          : 74
GREATERTHANEQUAL     : 76
HASH                 : 
IDENTIFIER           : 106
IF                   : 54 55
IMPORT               : 32
INCREMENT            : 80
INPUT                : 
INT                  : 92
INTARRAY             : 98
INTLIST              : 102
LBRACE               : 20 21 35 42 43 44 54 55 55 57 58 59 88
LBRACKET             : 34 38 39 40 87
LESSTHAN             : 73
LESSTHANEQUAL        : 75
LPAREN               : 16 17 18 19 20 21 22 54 55 57 58 59 79
MINUS                : 65
MINUSASSIGN          : 
MODASSIGN            : 
MODULUS              : 68
MULTIPLY             : 66
NEW                  : 
NOT                  : 82
NOTEQUAL             : 72
NULL                 : 
NUMBER               : 89
OR                   : 70
PARAMS               : 
PIPE                 : 
PLUS                 : 17 17 18 64
PLUSASSIGN           : 
POW                  : 78
PRINT                : 16 17 18 19
QUESTION             : 56
RBRACE               : 20 21 35 42 43 44 54 55 55 57 58 59 88
RBRACKET             : 34 38 39 40 87
RETURN               : 23
RPAREN               : 16 17 18 19 20 21 22 54 55 57 58 59 79
SEMICOLON            : 16 17 18 19 22 23 28 33 34 35 36 38 40 42 44 46 56 57 58
SLASH                : 
STRING               : 95
STRINGARRAY          : 100
STRINGLIST           : 104
STRING_LITERAL       : 32 108
SWITCH               : 
TIMESASSIGN          : 
TRUE                 : 90
VOID                 : 27
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

arg_list             : 22 51
array_type           : 25 35 42 43 44 45
assignment           : 7 58
boolean              : 86
break_stmt           : 13
case_stmts           : 60
comment              : 15
control_structure    : 10
default_stmt         : 
digit                : 38 39 42 43 84
empty                : 4 14 31 53 61 63
expression           : 16 17 17 18 23 36 38 40 42 44 46 51 52 54 55 56 56 56 57 57 58 58 59 60 64 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 80 81 82 87 88
for_stmt             : 49
fun_declaration      : 6
function_call        : 12 17 18 19 37 39 41 43 45 47
general_type         : 24 29 30 33 36 37
identifier           : 20 21 22 29 30 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 83 87 88 97
if_stmt              : 48
import_declaration   : 5
list_type            : 26 34 38 39 40 41
params               : 20 21 29
print_stmt           : 9
program              : 0
return_stmt          : 11
return_type          : 20
stmt                 : 2 3 15
stmt_list            : 1 2 20 21 54 55 55 57 58 59 60 62
string               : 85
variable_declaration : 8 57
while_stmt           : 50

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 3

    (2) stmt_list -> stmt . stmt_list
    (3) stmt_list -> stmt .
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! reduce/reduce conflict for $end resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for RBRACE resolved using rule 3 (stmt_list -> stmt .)
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 3 (stmt_list -> stmt .)
    RBRACE          reduce using rule 3 (stmt_list -> stmt .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! $end            [ reduce using rule 109 (empty -> .) ]
  ! RBRACE          [ reduce using rule 109 (empty -> .) ]
  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    stmt                           shift and go to state 3
    stmt_list                      shift and go to state 55
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 4

    (4) stmt_list -> empty .
    (14) stmt -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (stmt_list -> empty .)
    $end            reduce using rule 4 (stmt_list -> empty .)
    RBRACE          reduce using rule 4 (stmt_list -> empty .)
    IMPORT          reduce using rule 14 (stmt -> empty .)
    FUN             reduce using rule 14 (stmt -> empty .)
    PRINT           reduce using rule 14 (stmt -> empty .)
    RETURN          reduce using rule 14 (stmt -> empty .)
    BREAK           reduce using rule 14 (stmt -> empty .)
    COMMENT         reduce using rule 14 (stmt -> empty .)
    INT             reduce using rule 14 (stmt -> empty .)
    FLOAT           reduce using rule 14 (stmt -> empty .)
    DOUBLE          reduce using rule 14 (stmt -> empty .)
    STRING          reduce using rule 14 (stmt -> empty .)
    BOOLEAN         reduce using rule 14 (stmt -> empty .)
    INTLIST         reduce using rule 14 (stmt -> empty .)
    FLOATLIST       reduce using rule 14 (stmt -> empty .)
    STRINGLIST      reduce using rule 14 (stmt -> empty .)
    DOUBLELIST      reduce using rule 14 (stmt -> empty .)
    INTARRAY        reduce using rule 14 (stmt -> empty .)
    FLOATARRAY      reduce using rule 14 (stmt -> empty .)
    STRINGARRAY     reduce using rule 14 (stmt -> empty .)
    DOUBLEARRAY     reduce using rule 14 (stmt -> empty .)
    IDENTIFIER      reduce using rule 14 (stmt -> empty .)
    IF              reduce using rule 14 (stmt -> empty .)
    FOR             reduce using rule 14 (stmt -> empty .)
    WHILE           reduce using rule 14 (stmt -> empty .)
    LPAREN          reduce using rule 14 (stmt -> empty .)
    NOT             reduce using rule 14 (stmt -> empty .)
    NUMBER          reduce using rule 14 (stmt -> empty .)
    STRING_LITERAL  reduce using rule 14 (stmt -> empty .)
    TRUE            reduce using rule 14 (stmt -> empty .)
    FALSE           reduce using rule 14 (stmt -> empty .)

  ! $end            [ reduce using rule 14 (stmt -> empty .) ]
  ! RBRACE          [ reduce using rule 14 (stmt -> empty .) ]


state 5

    (5) stmt -> import_declaration .

    IMPORT          reduce using rule 5 (stmt -> import_declaration .)
    FUN             reduce using rule 5 (stmt -> import_declaration .)
    PRINT           reduce using rule 5 (stmt -> import_declaration .)
    RETURN          reduce using rule 5 (stmt -> import_declaration .)
    BREAK           reduce using rule 5 (stmt -> import_declaration .)
    COMMENT         reduce using rule 5 (stmt -> import_declaration .)
    INT             reduce using rule 5 (stmt -> import_declaration .)
    FLOAT           reduce using rule 5 (stmt -> import_declaration .)
    DOUBLE          reduce using rule 5 (stmt -> import_declaration .)
    STRING          reduce using rule 5 (stmt -> import_declaration .)
    BOOLEAN         reduce using rule 5 (stmt -> import_declaration .)
    INTLIST         reduce using rule 5 (stmt -> import_declaration .)
    FLOATLIST       reduce using rule 5 (stmt -> import_declaration .)
    STRINGLIST      reduce using rule 5 (stmt -> import_declaration .)
    DOUBLELIST      reduce using rule 5 (stmt -> import_declaration .)
    INTARRAY        reduce using rule 5 (stmt -> import_declaration .)
    FLOATARRAY      reduce using rule 5 (stmt -> import_declaration .)
    STRINGARRAY     reduce using rule 5 (stmt -> import_declaration .)
    DOUBLEARRAY     reduce using rule 5 (stmt -> import_declaration .)
    IDENTIFIER      reduce using rule 5 (stmt -> import_declaration .)
    IF              reduce using rule 5 (stmt -> import_declaration .)
    FOR             reduce using rule 5 (stmt -> import_declaration .)
    WHILE           reduce using rule 5 (stmt -> import_declaration .)
    LPAREN          reduce using rule 5 (stmt -> import_declaration .)
    NOT             reduce using rule 5 (stmt -> import_declaration .)
    NUMBER          reduce using rule 5 (stmt -> import_declaration .)
    STRING_LITERAL  reduce using rule 5 (stmt -> import_declaration .)
    TRUE            reduce using rule 5 (stmt -> import_declaration .)
    FALSE           reduce using rule 5 (stmt -> import_declaration .)
    $end            reduce using rule 5 (stmt -> import_declaration .)
    RBRACE          reduce using rule 5 (stmt -> import_declaration .)


state 6

    (6) stmt -> fun_declaration .

    IMPORT          reduce using rule 6 (stmt -> fun_declaration .)
    FUN             reduce using rule 6 (stmt -> fun_declaration .)
    PRINT           reduce using rule 6 (stmt -> fun_declaration .)
    RETURN          reduce using rule 6 (stmt -> fun_declaration .)
    BREAK           reduce using rule 6 (stmt -> fun_declaration .)
    COMMENT         reduce using rule 6 (stmt -> fun_declaration .)
    INT             reduce using rule 6 (stmt -> fun_declaration .)
    FLOAT           reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLE          reduce using rule 6 (stmt -> fun_declaration .)
    STRING          reduce using rule 6 (stmt -> fun_declaration .)
    BOOLEAN         reduce using rule 6 (stmt -> fun_declaration .)
    INTLIST         reduce using rule 6 (stmt -> fun_declaration .)
    FLOATLIST       reduce using rule 6 (stmt -> fun_declaration .)
    STRINGLIST      reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLELIST      reduce using rule 6 (stmt -> fun_declaration .)
    INTARRAY        reduce using rule 6 (stmt -> fun_declaration .)
    FLOATARRAY      reduce using rule 6 (stmt -> fun_declaration .)
    STRINGARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLEARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    IDENTIFIER      reduce using rule 6 (stmt -> fun_declaration .)
    IF              reduce using rule 6 (stmt -> fun_declaration .)
    FOR             reduce using rule 6 (stmt -> fun_declaration .)
    WHILE           reduce using rule 6 (stmt -> fun_declaration .)
    LPAREN          reduce using rule 6 (stmt -> fun_declaration .)
    NOT             reduce using rule 6 (stmt -> fun_declaration .)
    NUMBER          reduce using rule 6 (stmt -> fun_declaration .)
    STRING_LITERAL  reduce using rule 6 (stmt -> fun_declaration .)
    TRUE            reduce using rule 6 (stmt -> fun_declaration .)
    FALSE           reduce using rule 6 (stmt -> fun_declaration .)
    $end            reduce using rule 6 (stmt -> fun_declaration .)
    RBRACE          reduce using rule 6 (stmt -> fun_declaration .)


state 7

    (7) stmt -> assignment .

    IMPORT          reduce using rule 7 (stmt -> assignment .)
    FUN             reduce using rule 7 (stmt -> assignment .)
    PRINT           reduce using rule 7 (stmt -> assignment .)
    RETURN          reduce using rule 7 (stmt -> assignment .)
    BREAK           reduce using rule 7 (stmt -> assignment .)
    COMMENT         reduce using rule 7 (stmt -> assignment .)
    INT             reduce using rule 7 (stmt -> assignment .)
    FLOAT           reduce using rule 7 (stmt -> assignment .)
    DOUBLE          reduce using rule 7 (stmt -> assignment .)
    STRING          reduce using rule 7 (stmt -> assignment .)
    BOOLEAN         reduce using rule 7 (stmt -> assignment .)
    INTLIST         reduce using rule 7 (stmt -> assignment .)
    FLOATLIST       reduce using rule 7 (stmt -> assignment .)
    STRINGLIST      reduce using rule 7 (stmt -> assignment .)
    DOUBLELIST      reduce using rule 7 (stmt -> assignment .)
    INTARRAY        reduce using rule 7 (stmt -> assignment .)
    FLOATARRAY      reduce using rule 7 (stmt -> assignment .)
    STRINGARRAY     reduce using rule 7 (stmt -> assignment .)
    DOUBLEARRAY     reduce using rule 7 (stmt -> assignment .)
    IDENTIFIER      reduce using rule 7 (stmt -> assignment .)
    IF              reduce using rule 7 (stmt -> assignment .)
    FOR             reduce using rule 7 (stmt -> assignment .)
    WHILE           reduce using rule 7 (stmt -> assignment .)
    LPAREN          reduce using rule 7 (stmt -> assignment .)
    NOT             reduce using rule 7 (stmt -> assignment .)
    NUMBER          reduce using rule 7 (stmt -> assignment .)
    STRING_LITERAL  reduce using rule 7 (stmt -> assignment .)
    TRUE            reduce using rule 7 (stmt -> assignment .)
    FALSE           reduce using rule 7 (stmt -> assignment .)
    $end            reduce using rule 7 (stmt -> assignment .)
    RBRACE          reduce using rule 7 (stmt -> assignment .)


state 8

    (8) stmt -> variable_declaration .

    IMPORT          reduce using rule 8 (stmt -> variable_declaration .)
    FUN             reduce using rule 8 (stmt -> variable_declaration .)
    PRINT           reduce using rule 8 (stmt -> variable_declaration .)
    RETURN          reduce using rule 8 (stmt -> variable_declaration .)
    BREAK           reduce using rule 8 (stmt -> variable_declaration .)
    COMMENT         reduce using rule 8 (stmt -> variable_declaration .)
    INT             reduce using rule 8 (stmt -> variable_declaration .)
    FLOAT           reduce using rule 8 (stmt -> variable_declaration .)
    DOUBLE          reduce using rule 8 (stmt -> variable_declaration .)
    STRING          reduce using rule 8 (stmt -> variable_declaration .)
    BOOLEAN         reduce using rule 8 (stmt -> variable_declaration .)
    INTLIST         reduce using rule 8 (stmt -> variable_declaration .)
    FLOATLIST       reduce using rule 8 (stmt -> variable_declaration .)
    STRINGLIST      reduce using rule 8 (stmt -> variable_declaration .)
    DOUBLELIST      reduce using rule 8 (stmt -> variable_declaration .)
    INTARRAY        reduce using rule 8 (stmt -> variable_declaration .)
    FLOATARRAY      reduce using rule 8 (stmt -> variable_declaration .)
    STRINGARRAY     reduce using rule 8 (stmt -> variable_declaration .)
    DOUBLEARRAY     reduce using rule 8 (stmt -> variable_declaration .)
    IDENTIFIER      reduce using rule 8 (stmt -> variable_declaration .)
    IF              reduce using rule 8 (stmt -> variable_declaration .)
    FOR             reduce using rule 8 (stmt -> variable_declaration .)
    WHILE           reduce using rule 8 (stmt -> variable_declaration .)
    LPAREN          reduce using rule 8 (stmt -> variable_declaration .)
    NOT             reduce using rule 8 (stmt -> variable_declaration .)
    NUMBER          reduce using rule 8 (stmt -> variable_declaration .)
    STRING_LITERAL  reduce using rule 8 (stmt -> variable_declaration .)
    TRUE            reduce using rule 8 (stmt -> variable_declaration .)
    FALSE           reduce using rule 8 (stmt -> variable_declaration .)
    $end            reduce using rule 8 (stmt -> variable_declaration .)
    RBRACE          reduce using rule 8 (stmt -> variable_declaration .)


state 9

    (9) stmt -> print_stmt .

    IMPORT          reduce using rule 9 (stmt -> print_stmt .)
    FUN             reduce using rule 9 (stmt -> print_stmt .)
    PRINT           reduce using rule 9 (stmt -> print_stmt .)
    RETURN          reduce using rule 9 (stmt -> print_stmt .)
    BREAK           reduce using rule 9 (stmt -> print_stmt .)
    COMMENT         reduce using rule 9 (stmt -> print_stmt .)
    INT             reduce using rule 9 (stmt -> print_stmt .)
    FLOAT           reduce using rule 9 (stmt -> print_stmt .)
    DOUBLE          reduce using rule 9 (stmt -> print_stmt .)
    STRING          reduce using rule 9 (stmt -> print_stmt .)
    BOOLEAN         reduce using rule 9 (stmt -> print_stmt .)
    INTLIST         reduce using rule 9 (stmt -> print_stmt .)
    FLOATLIST       reduce using rule 9 (stmt -> print_stmt .)
    STRINGLIST      reduce using rule 9 (stmt -> print_stmt .)
    DOUBLELIST      reduce using rule 9 (stmt -> print_stmt .)
    INTARRAY        reduce using rule 9 (stmt -> print_stmt .)
    FLOATARRAY      reduce using rule 9 (stmt -> print_stmt .)
    STRINGARRAY     reduce using rule 9 (stmt -> print_stmt .)
    DOUBLEARRAY     reduce using rule 9 (stmt -> print_stmt .)
    IDENTIFIER      reduce using rule 9 (stmt -> print_stmt .)
    IF              reduce using rule 9 (stmt -> print_stmt .)
    FOR             reduce using rule 9 (stmt -> print_stmt .)
    WHILE           reduce using rule 9 (stmt -> print_stmt .)
    LPAREN          reduce using rule 9 (stmt -> print_stmt .)
    NOT             reduce using rule 9 (stmt -> print_stmt .)
    NUMBER          reduce using rule 9 (stmt -> print_stmt .)
    STRING_LITERAL  reduce using rule 9 (stmt -> print_stmt .)
    TRUE            reduce using rule 9 (stmt -> print_stmt .)
    FALSE           reduce using rule 9 (stmt -> print_stmt .)
    $end            reduce using rule 9 (stmt -> print_stmt .)
    RBRACE          reduce using rule 9 (stmt -> print_stmt .)


state 10

    (10) stmt -> control_structure .

    IMPORT          reduce using rule 10 (stmt -> control_structure .)
    FUN             reduce using rule 10 (stmt -> control_structure .)
    PRINT           reduce using rule 10 (stmt -> control_structure .)
    RETURN          reduce using rule 10 (stmt -> control_structure .)
    BREAK           reduce using rule 10 (stmt -> control_structure .)
    COMMENT         reduce using rule 10 (stmt -> control_structure .)
    INT             reduce using rule 10 (stmt -> control_structure .)
    FLOAT           reduce using rule 10 (stmt -> control_structure .)
    DOUBLE          reduce using rule 10 (stmt -> control_structure .)
    STRING          reduce using rule 10 (stmt -> control_structure .)
    BOOLEAN         reduce using rule 10 (stmt -> control_structure .)
    INTLIST         reduce using rule 10 (stmt -> control_structure .)
    FLOATLIST       reduce using rule 10 (stmt -> control_structure .)
    STRINGLIST      reduce using rule 10 (stmt -> control_structure .)
    DOUBLELIST      reduce using rule 10 (stmt -> control_structure .)
    INTARRAY        reduce using rule 10 (stmt -> control_structure .)
    FLOATARRAY      reduce using rule 10 (stmt -> control_structure .)
    STRINGARRAY     reduce using rule 10 (stmt -> control_structure .)
    DOUBLEARRAY     reduce using rule 10 (stmt -> control_structure .)
    IDENTIFIER      reduce using rule 10 (stmt -> control_structure .)
    IF              reduce using rule 10 (stmt -> control_structure .)
    FOR             reduce using rule 10 (stmt -> control_structure .)
    WHILE           reduce using rule 10 (stmt -> control_structure .)
    LPAREN          reduce using rule 10 (stmt -> control_structure .)
    NOT             reduce using rule 10 (stmt -> control_structure .)
    NUMBER          reduce using rule 10 (stmt -> control_structure .)
    STRING_LITERAL  reduce using rule 10 (stmt -> control_structure .)
    TRUE            reduce using rule 10 (stmt -> control_structure .)
    FALSE           reduce using rule 10 (stmt -> control_structure .)
    $end            reduce using rule 10 (stmt -> control_structure .)
    RBRACE          reduce using rule 10 (stmt -> control_structure .)


state 11

    (11) stmt -> return_stmt .

    IMPORT          reduce using rule 11 (stmt -> return_stmt .)
    FUN             reduce using rule 11 (stmt -> return_stmt .)
    PRINT           reduce using rule 11 (stmt -> return_stmt .)
    RETURN          reduce using rule 11 (stmt -> return_stmt .)
    BREAK           reduce using rule 11 (stmt -> return_stmt .)
    COMMENT         reduce using rule 11 (stmt -> return_stmt .)
    INT             reduce using rule 11 (stmt -> return_stmt .)
    FLOAT           reduce using rule 11 (stmt -> return_stmt .)
    DOUBLE          reduce using rule 11 (stmt -> return_stmt .)
    STRING          reduce using rule 11 (stmt -> return_stmt .)
    BOOLEAN         reduce using rule 11 (stmt -> return_stmt .)
    INTLIST         reduce using rule 11 (stmt -> return_stmt .)
    FLOATLIST       reduce using rule 11 (stmt -> return_stmt .)
    STRINGLIST      reduce using rule 11 (stmt -> return_stmt .)
    DOUBLELIST      reduce using rule 11 (stmt -> return_stmt .)
    INTARRAY        reduce using rule 11 (stmt -> return_stmt .)
    FLOATARRAY      reduce using rule 11 (stmt -> return_stmt .)
    STRINGARRAY     reduce using rule 11 (stmt -> return_stmt .)
    DOUBLEARRAY     reduce using rule 11 (stmt -> return_stmt .)
    IDENTIFIER      reduce using rule 11 (stmt -> return_stmt .)
    IF              reduce using rule 11 (stmt -> return_stmt .)
    FOR             reduce using rule 11 (stmt -> return_stmt .)
    WHILE           reduce using rule 11 (stmt -> return_stmt .)
    LPAREN          reduce using rule 11 (stmt -> return_stmt .)
    NOT             reduce using rule 11 (stmt -> return_stmt .)
    NUMBER          reduce using rule 11 (stmt -> return_stmt .)
    STRING_LITERAL  reduce using rule 11 (stmt -> return_stmt .)
    TRUE            reduce using rule 11 (stmt -> return_stmt .)
    FALSE           reduce using rule 11 (stmt -> return_stmt .)
    $end            reduce using rule 11 (stmt -> return_stmt .)
    RBRACE          reduce using rule 11 (stmt -> return_stmt .)


state 12

    (12) stmt -> function_call .

    IMPORT          reduce using rule 12 (stmt -> function_call .)
    FUN             reduce using rule 12 (stmt -> function_call .)
    PRINT           reduce using rule 12 (stmt -> function_call .)
    RETURN          reduce using rule 12 (stmt -> function_call .)
    BREAK           reduce using rule 12 (stmt -> function_call .)
    COMMENT         reduce using rule 12 (stmt -> function_call .)
    INT             reduce using rule 12 (stmt -> function_call .)
    FLOAT           reduce using rule 12 (stmt -> function_call .)
    DOUBLE          reduce using rule 12 (stmt -> function_call .)
    STRING          reduce using rule 12 (stmt -> function_call .)
    BOOLEAN         reduce using rule 12 (stmt -> function_call .)
    INTLIST         reduce using rule 12 (stmt -> function_call .)
    FLOATLIST       reduce using rule 12 (stmt -> function_call .)
    STRINGLIST      reduce using rule 12 (stmt -> function_call .)
    DOUBLELIST      reduce using rule 12 (stmt -> function_call .)
    INTARRAY        reduce using rule 12 (stmt -> function_call .)
    FLOATARRAY      reduce using rule 12 (stmt -> function_call .)
    STRINGARRAY     reduce using rule 12 (stmt -> function_call .)
    DOUBLEARRAY     reduce using rule 12 (stmt -> function_call .)
    IDENTIFIER      reduce using rule 12 (stmt -> function_call .)
    IF              reduce using rule 12 (stmt -> function_call .)
    FOR             reduce using rule 12 (stmt -> function_call .)
    WHILE           reduce using rule 12 (stmt -> function_call .)
    LPAREN          reduce using rule 12 (stmt -> function_call .)
    NOT             reduce using rule 12 (stmt -> function_call .)
    NUMBER          reduce using rule 12 (stmt -> function_call .)
    STRING_LITERAL  reduce using rule 12 (stmt -> function_call .)
    TRUE            reduce using rule 12 (stmt -> function_call .)
    FALSE           reduce using rule 12 (stmt -> function_call .)
    $end            reduce using rule 12 (stmt -> function_call .)
    RBRACE          reduce using rule 12 (stmt -> function_call .)


state 13

    (13) stmt -> break_stmt .

    IMPORT          reduce using rule 13 (stmt -> break_stmt .)
    FUN             reduce using rule 13 (stmt -> break_stmt .)
    PRINT           reduce using rule 13 (stmt -> break_stmt .)
    RETURN          reduce using rule 13 (stmt -> break_stmt .)
    BREAK           reduce using rule 13 (stmt -> break_stmt .)
    COMMENT         reduce using rule 13 (stmt -> break_stmt .)
    INT             reduce using rule 13 (stmt -> break_stmt .)
    FLOAT           reduce using rule 13 (stmt -> break_stmt .)
    DOUBLE          reduce using rule 13 (stmt -> break_stmt .)
    STRING          reduce using rule 13 (stmt -> break_stmt .)
    BOOLEAN         reduce using rule 13 (stmt -> break_stmt .)
    INTLIST         reduce using rule 13 (stmt -> break_stmt .)
    FLOATLIST       reduce using rule 13 (stmt -> break_stmt .)
    STRINGLIST      reduce using rule 13 (stmt -> break_stmt .)
    DOUBLELIST      reduce using rule 13 (stmt -> break_stmt .)
    INTARRAY        reduce using rule 13 (stmt -> break_stmt .)
    FLOATARRAY      reduce using rule 13 (stmt -> break_stmt .)
    STRINGARRAY     reduce using rule 13 (stmt -> break_stmt .)
    DOUBLEARRAY     reduce using rule 13 (stmt -> break_stmt .)
    IDENTIFIER      reduce using rule 13 (stmt -> break_stmt .)
    IF              reduce using rule 13 (stmt -> break_stmt .)
    FOR             reduce using rule 13 (stmt -> break_stmt .)
    WHILE           reduce using rule 13 (stmt -> break_stmt .)
    LPAREN          reduce using rule 13 (stmt -> break_stmt .)
    NOT             reduce using rule 13 (stmt -> break_stmt .)
    NUMBER          reduce using rule 13 (stmt -> break_stmt .)
    STRING_LITERAL  reduce using rule 13 (stmt -> break_stmt .)
    TRUE            reduce using rule 13 (stmt -> break_stmt .)
    FALSE           reduce using rule 13 (stmt -> break_stmt .)
    $end            reduce using rule 13 (stmt -> break_stmt .)
    RBRACE          reduce using rule 13 (stmt -> break_stmt .)


state 14

    (15) stmt -> comment . stmt
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (109) empty -> .
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    $end            reduce using rule 109 (empty -> .)
    RBRACE          reduce using rule 109 (empty -> .)
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    comment                        shift and go to state 14
    stmt                           shift and go to state 56
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    empty                          shift and go to state 57
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 15

    (32) import_declaration -> IMPORT . STRING_LITERAL

    STRING_LITERAL  shift and go to state 58


state 16

    (108) string -> STRING_LITERAL .

    QUESTION        reduce using rule 108 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 108 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 108 (string -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 108 (string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 108 (string -> STRING_LITERAL .)
    MODULUS         reduce using rule 108 (string -> STRING_LITERAL .)
    AND             reduce using rule 108 (string -> STRING_LITERAL .)
    OR              reduce using rule 108 (string -> STRING_LITERAL .)
    EQUAL           reduce using rule 108 (string -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 108 (string -> STRING_LITERAL .)
    LESSTHAN        reduce using rule 108 (string -> STRING_LITERAL .)
    GREATERTHAN     reduce using rule 108 (string -> STRING_LITERAL .)
    LESSTHANEQUAL   reduce using rule 108 (string -> STRING_LITERAL .)
    GREATERTHANEQUAL reduce using rule 108 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 108 (string -> STRING_LITERAL .)
    POW             reduce using rule 108 (string -> STRING_LITERAL .)
    INCREMENT       reduce using rule 108 (string -> STRING_LITERAL .)
    DECREMENT       reduce using rule 108 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 108 (string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 108 (string -> STRING_LITERAL .)
    RBRACKET        reduce using rule 108 (string -> STRING_LITERAL .)
    RBRACE          reduce using rule 108 (string -> STRING_LITERAL .)
    COLON           reduce using rule 108 (string -> STRING_LITERAL .)


state 17

    (20) fun_declaration -> FUN . return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> FUN . identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (24) return_type -> . general_type
    (25) return_type -> . array_type
    (26) return_type -> . list_type
    (27) return_type -> . VOID
    (106) identifier -> . IDENTIFIER
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST

    VOID            shift and go to state 64
    IDENTIFIER      shift and go to state 45
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40

    return_type                    shift and go to state 59
    identifier                     shift and go to state 60
    general_type                   shift and go to state 61
    array_type                     shift and go to state 62
    list_type                      shift and go to state 63

state 18

    (46) assignment -> identifier . ASSIGN expression SEMICOLON
    (47) assignment -> identifier . ASSIGN function_call
    (22) function_call -> identifier . LPAREN arg_list RPAREN SEMICOLON
    (97) general_type -> identifier .
    (83) expression -> identifier .
    (87) expression -> identifier . LBRACKET expression RBRACKET
    (88) expression -> identifier . LBRACE expression RBRACE

    ASSIGN          shift and go to state 65
    LPAREN          shift and go to state 66
    IDENTIFIER      reduce using rule 97 (general_type -> identifier .)
    QUESTION        reduce using rule 83 (expression -> identifier .)
    PLUS            reduce using rule 83 (expression -> identifier .)
    MINUS           reduce using rule 83 (expression -> identifier .)
    MULTIPLY        reduce using rule 83 (expression -> identifier .)
    DIVIDE          reduce using rule 83 (expression -> identifier .)
    MODULUS         reduce using rule 83 (expression -> identifier .)
    AND             reduce using rule 83 (expression -> identifier .)
    OR              reduce using rule 83 (expression -> identifier .)
    EQUAL           reduce using rule 83 (expression -> identifier .)
    NOTEQUAL        reduce using rule 83 (expression -> identifier .)
    LESSTHAN        reduce using rule 83 (expression -> identifier .)
    GREATERTHAN     reduce using rule 83 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 83 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 83 (expression -> identifier .)
    COMMA           reduce using rule 83 (expression -> identifier .)
    POW             reduce using rule 83 (expression -> identifier .)
    INCREMENT       reduce using rule 83 (expression -> identifier .)
    DECREMENT       reduce using rule 83 (expression -> identifier .)
    LBRACKET        shift and go to state 67
    LBRACE          shift and go to state 68


state 19

    (79) expression -> LPAREN . expression RPAREN
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 69
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 20

    (36) assignment -> general_type . identifier ASSIGN expression SEMICOLON
    (37) assignment -> general_type . identifier ASSIGN function_call
    (33) variable_declaration -> general_type . identifier SEMICOLON
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 71

state 21

    (56) if_stmt -> expression . QUESTION expression COLON expression SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    QUESTION        shift and go to state 72
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 22

    (38) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> list_type . identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> list_type . identifier ASSIGN function_call
    (34) variable_declaration -> list_type . identifier LBRACKET RBRACKET SEMICOLON
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 90

state 23

    (84) expression -> digit .

    QUESTION        reduce using rule 84 (expression -> digit .)
    PLUS            reduce using rule 84 (expression -> digit .)
    MINUS           reduce using rule 84 (expression -> digit .)
    MULTIPLY        reduce using rule 84 (expression -> digit .)
    DIVIDE          reduce using rule 84 (expression -> digit .)
    MODULUS         reduce using rule 84 (expression -> digit .)
    AND             reduce using rule 84 (expression -> digit .)
    OR              reduce using rule 84 (expression -> digit .)
    EQUAL           reduce using rule 84 (expression -> digit .)
    NOTEQUAL        reduce using rule 84 (expression -> digit .)
    LESSTHAN        reduce using rule 84 (expression -> digit .)
    GREATERTHAN     reduce using rule 84 (expression -> digit .)
    LESSTHANEQUAL   reduce using rule 84 (expression -> digit .)
    GREATERTHANEQUAL reduce using rule 84 (expression -> digit .)
    COMMA           reduce using rule 84 (expression -> digit .)
    POW             reduce using rule 84 (expression -> digit .)
    INCREMENT       reduce using rule 84 (expression -> digit .)
    DECREMENT       reduce using rule 84 (expression -> digit .)
    RPAREN          reduce using rule 84 (expression -> digit .)
    SEMICOLON       reduce using rule 84 (expression -> digit .)
    RBRACKET        reduce using rule 84 (expression -> digit .)
    RBRACE          reduce using rule 84 (expression -> digit .)
    COLON           reduce using rule 84 (expression -> digit .)


state 24

    (42) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> array_type . identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> array_type . identifier ASSIGN function_call
    (35) variable_declaration -> array_type . identifier LBRACE RBRACE SEMICOLON
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 91

state 25

    (16) print_stmt -> PRINT . LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> PRINT . LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> PRINT . LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> PRINT . LPAREN function_call RPAREN SEMICOLON

    LPAREN          shift and go to state 92


state 26

    (48) control_structure -> if_stmt .

    IMPORT          reduce using rule 48 (control_structure -> if_stmt .)
    FUN             reduce using rule 48 (control_structure -> if_stmt .)
    PRINT           reduce using rule 48 (control_structure -> if_stmt .)
    RETURN          reduce using rule 48 (control_structure -> if_stmt .)
    BREAK           reduce using rule 48 (control_structure -> if_stmt .)
    COMMENT         reduce using rule 48 (control_structure -> if_stmt .)
    INT             reduce using rule 48 (control_structure -> if_stmt .)
    FLOAT           reduce using rule 48 (control_structure -> if_stmt .)
    DOUBLE          reduce using rule 48 (control_structure -> if_stmt .)
    STRING          reduce using rule 48 (control_structure -> if_stmt .)
    BOOLEAN         reduce using rule 48 (control_structure -> if_stmt .)
    INTLIST         reduce using rule 48 (control_structure -> if_stmt .)
    FLOATLIST       reduce using rule 48 (control_structure -> if_stmt .)
    STRINGLIST      reduce using rule 48 (control_structure -> if_stmt .)
    DOUBLELIST      reduce using rule 48 (control_structure -> if_stmt .)
    INTARRAY        reduce using rule 48 (control_structure -> if_stmt .)
    FLOATARRAY      reduce using rule 48 (control_structure -> if_stmt .)
    STRINGARRAY     reduce using rule 48 (control_structure -> if_stmt .)
    DOUBLEARRAY     reduce using rule 48 (control_structure -> if_stmt .)
    IDENTIFIER      reduce using rule 48 (control_structure -> if_stmt .)
    IF              reduce using rule 48 (control_structure -> if_stmt .)
    FOR             reduce using rule 48 (control_structure -> if_stmt .)
    WHILE           reduce using rule 48 (control_structure -> if_stmt .)
    LPAREN          reduce using rule 48 (control_structure -> if_stmt .)
    NOT             reduce using rule 48 (control_structure -> if_stmt .)
    NUMBER          reduce using rule 48 (control_structure -> if_stmt .)
    STRING_LITERAL  reduce using rule 48 (control_structure -> if_stmt .)
    TRUE            reduce using rule 48 (control_structure -> if_stmt .)
    FALSE           reduce using rule 48 (control_structure -> if_stmt .)
    $end            reduce using rule 48 (control_structure -> if_stmt .)
    RBRACE          reduce using rule 48 (control_structure -> if_stmt .)


state 27

    (49) control_structure -> for_stmt .

    IMPORT          reduce using rule 49 (control_structure -> for_stmt .)
    FUN             reduce using rule 49 (control_structure -> for_stmt .)
    PRINT           reduce using rule 49 (control_structure -> for_stmt .)
    RETURN          reduce using rule 49 (control_structure -> for_stmt .)
    BREAK           reduce using rule 49 (control_structure -> for_stmt .)
    COMMENT         reduce using rule 49 (control_structure -> for_stmt .)
    INT             reduce using rule 49 (control_structure -> for_stmt .)
    FLOAT           reduce using rule 49 (control_structure -> for_stmt .)
    DOUBLE          reduce using rule 49 (control_structure -> for_stmt .)
    STRING          reduce using rule 49 (control_structure -> for_stmt .)
    BOOLEAN         reduce using rule 49 (control_structure -> for_stmt .)
    INTLIST         reduce using rule 49 (control_structure -> for_stmt .)
    FLOATLIST       reduce using rule 49 (control_structure -> for_stmt .)
    STRINGLIST      reduce using rule 49 (control_structure -> for_stmt .)
    DOUBLELIST      reduce using rule 49 (control_structure -> for_stmt .)
    INTARRAY        reduce using rule 49 (control_structure -> for_stmt .)
    FLOATARRAY      reduce using rule 49 (control_structure -> for_stmt .)
    STRINGARRAY     reduce using rule 49 (control_structure -> for_stmt .)
    DOUBLEARRAY     reduce using rule 49 (control_structure -> for_stmt .)
    IDENTIFIER      reduce using rule 49 (control_structure -> for_stmt .)
    IF              reduce using rule 49 (control_structure -> for_stmt .)
    FOR             reduce using rule 49 (control_structure -> for_stmt .)
    WHILE           reduce using rule 49 (control_structure -> for_stmt .)
    LPAREN          reduce using rule 49 (control_structure -> for_stmt .)
    NOT             reduce using rule 49 (control_structure -> for_stmt .)
    NUMBER          reduce using rule 49 (control_structure -> for_stmt .)
    STRING_LITERAL  reduce using rule 49 (control_structure -> for_stmt .)
    TRUE            reduce using rule 49 (control_structure -> for_stmt .)
    FALSE           reduce using rule 49 (control_structure -> for_stmt .)
    $end            reduce using rule 49 (control_structure -> for_stmt .)
    RBRACE          reduce using rule 49 (control_structure -> for_stmt .)


state 28

    (50) control_structure -> while_stmt .

    IMPORT          reduce using rule 50 (control_structure -> while_stmt .)
    FUN             reduce using rule 50 (control_structure -> while_stmt .)
    PRINT           reduce using rule 50 (control_structure -> while_stmt .)
    RETURN          reduce using rule 50 (control_structure -> while_stmt .)
    BREAK           reduce using rule 50 (control_structure -> while_stmt .)
    COMMENT         reduce using rule 50 (control_structure -> while_stmt .)
    INT             reduce using rule 50 (control_structure -> while_stmt .)
    FLOAT           reduce using rule 50 (control_structure -> while_stmt .)
    DOUBLE          reduce using rule 50 (control_structure -> while_stmt .)
    STRING          reduce using rule 50 (control_structure -> while_stmt .)
    BOOLEAN         reduce using rule 50 (control_structure -> while_stmt .)
    INTLIST         reduce using rule 50 (control_structure -> while_stmt .)
    FLOATLIST       reduce using rule 50 (control_structure -> while_stmt .)
    STRINGLIST      reduce using rule 50 (control_structure -> while_stmt .)
    DOUBLELIST      reduce using rule 50 (control_structure -> while_stmt .)
    INTARRAY        reduce using rule 50 (control_structure -> while_stmt .)
    FLOATARRAY      reduce using rule 50 (control_structure -> while_stmt .)
    STRINGARRAY     reduce using rule 50 (control_structure -> while_stmt .)
    DOUBLEARRAY     reduce using rule 50 (control_structure -> while_stmt .)
    IDENTIFIER      reduce using rule 50 (control_structure -> while_stmt .)
    IF              reduce using rule 50 (control_structure -> while_stmt .)
    FOR             reduce using rule 50 (control_structure -> while_stmt .)
    WHILE           reduce using rule 50 (control_structure -> while_stmt .)
    LPAREN          reduce using rule 50 (control_structure -> while_stmt .)
    NOT             reduce using rule 50 (control_structure -> while_stmt .)
    NUMBER          reduce using rule 50 (control_structure -> while_stmt .)
    STRING_LITERAL  reduce using rule 50 (control_structure -> while_stmt .)
    TRUE            reduce using rule 50 (control_structure -> while_stmt .)
    FALSE           reduce using rule 50 (control_structure -> while_stmt .)
    $end            reduce using rule 50 (control_structure -> while_stmt .)
    RBRACE          reduce using rule 50 (control_structure -> while_stmt .)


state 29

    (23) return_stmt -> RETURN . expression SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 93
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 30

    (28) break_stmt -> BREAK . SEMICOLON

    SEMICOLON       shift and go to state 94


state 31

    (107) comment -> COMMENT .

    IMPORT          reduce using rule 107 (comment -> COMMENT .)
    FUN             reduce using rule 107 (comment -> COMMENT .)
    PRINT           reduce using rule 107 (comment -> COMMENT .)
    RETURN          reduce using rule 107 (comment -> COMMENT .)
    BREAK           reduce using rule 107 (comment -> COMMENT .)
    COMMENT         reduce using rule 107 (comment -> COMMENT .)
    INT             reduce using rule 107 (comment -> COMMENT .)
    FLOAT           reduce using rule 107 (comment -> COMMENT .)
    DOUBLE          reduce using rule 107 (comment -> COMMENT .)
    STRING          reduce using rule 107 (comment -> COMMENT .)
    BOOLEAN         reduce using rule 107 (comment -> COMMENT .)
    INTLIST         reduce using rule 107 (comment -> COMMENT .)
    FLOATLIST       reduce using rule 107 (comment -> COMMENT .)
    STRINGLIST      reduce using rule 107 (comment -> COMMENT .)
    DOUBLELIST      reduce using rule 107 (comment -> COMMENT .)
    INTARRAY        reduce using rule 107 (comment -> COMMENT .)
    FLOATARRAY      reduce using rule 107 (comment -> COMMENT .)
    STRINGARRAY     reduce using rule 107 (comment -> COMMENT .)
    DOUBLEARRAY     reduce using rule 107 (comment -> COMMENT .)
    IDENTIFIER      reduce using rule 107 (comment -> COMMENT .)
    IF              reduce using rule 107 (comment -> COMMENT .)
    FOR             reduce using rule 107 (comment -> COMMENT .)
    WHILE           reduce using rule 107 (comment -> COMMENT .)
    LPAREN          reduce using rule 107 (comment -> COMMENT .)
    NOT             reduce using rule 107 (comment -> COMMENT .)
    NUMBER          reduce using rule 107 (comment -> COMMENT .)
    STRING_LITERAL  reduce using rule 107 (comment -> COMMENT .)
    TRUE            reduce using rule 107 (comment -> COMMENT .)
    FALSE           reduce using rule 107 (comment -> COMMENT .)
    $end            reduce using rule 107 (comment -> COMMENT .)
    RBRACE          reduce using rule 107 (comment -> COMMENT .)


state 32

    (92) general_type -> INT .

    IDENTIFIER      reduce using rule 92 (general_type -> INT .)


state 33

    (93) general_type -> FLOAT .

    IDENTIFIER      reduce using rule 93 (general_type -> FLOAT .)


state 34

    (94) general_type -> DOUBLE .

    IDENTIFIER      reduce using rule 94 (general_type -> DOUBLE .)


state 35

    (95) general_type -> STRING .

    IDENTIFIER      reduce using rule 95 (general_type -> STRING .)


state 36

    (96) general_type -> BOOLEAN .

    IDENTIFIER      reduce using rule 96 (general_type -> BOOLEAN .)


state 37

    (102) list_type -> INTLIST .

    IDENTIFIER      reduce using rule 102 (list_type -> INTLIST .)


state 38

    (103) list_type -> FLOATLIST .

    IDENTIFIER      reduce using rule 103 (list_type -> FLOATLIST .)


state 39

    (104) list_type -> STRINGLIST .

    IDENTIFIER      reduce using rule 104 (list_type -> STRINGLIST .)


state 40

    (105) list_type -> DOUBLELIST .

    IDENTIFIER      reduce using rule 105 (list_type -> DOUBLELIST .)


state 41

    (98) array_type -> INTARRAY .

    IDENTIFIER      reduce using rule 98 (array_type -> INTARRAY .)


state 42

    (99) array_type -> FLOATARRAY .

    IDENTIFIER      reduce using rule 99 (array_type -> FLOATARRAY .)


state 43

    (100) array_type -> STRINGARRAY .

    IDENTIFIER      reduce using rule 100 (array_type -> STRINGARRAY .)


state 44

    (101) array_type -> DOUBLEARRAY .

    IDENTIFIER      reduce using rule 101 (array_type -> DOUBLEARRAY .)


state 45

    (106) identifier -> IDENTIFIER .

    ASSIGN          reduce using rule 106 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 106 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 106 (identifier -> IDENTIFIER .)
    LBRACE          reduce using rule 106 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 106 (identifier -> IDENTIFIER .)
    QUESTION        reduce using rule 106 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 106 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 106 (identifier -> IDENTIFIER .)
    MULTIPLY        reduce using rule 106 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 106 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 106 (identifier -> IDENTIFIER .)
    AND             reduce using rule 106 (identifier -> IDENTIFIER .)
    OR              reduce using rule 106 (identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 106 (identifier -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 106 (identifier -> IDENTIFIER .)
    LESSTHAN        reduce using rule 106 (identifier -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 106 (identifier -> IDENTIFIER .)
    LESSTHANEQUAL   reduce using rule 106 (identifier -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 106 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 106 (identifier -> IDENTIFIER .)
    POW             reduce using rule 106 (identifier -> IDENTIFIER .)
    INCREMENT       reduce using rule 106 (identifier -> IDENTIFIER .)
    DECREMENT       reduce using rule 106 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 106 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 106 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 106 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 106 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 106 (identifier -> IDENTIFIER .)


state 46

    (54) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 95


state 47

    (57) for_stmt -> FOR . LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> FOR . LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 96


state 48

    (59) while_stmt -> WHILE . LPAREN expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 97


state 49

    (82) expression -> NOT . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 98
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 50

    (85) expression -> string .

    QUESTION        reduce using rule 85 (expression -> string .)
    PLUS            reduce using rule 85 (expression -> string .)
    MINUS           reduce using rule 85 (expression -> string .)
    MULTIPLY        reduce using rule 85 (expression -> string .)
    DIVIDE          reduce using rule 85 (expression -> string .)
    MODULUS         reduce using rule 85 (expression -> string .)
    AND             reduce using rule 85 (expression -> string .)
    OR              reduce using rule 85 (expression -> string .)
    EQUAL           reduce using rule 85 (expression -> string .)
    NOTEQUAL        reduce using rule 85 (expression -> string .)
    LESSTHAN        reduce using rule 85 (expression -> string .)
    GREATERTHAN     reduce using rule 85 (expression -> string .)
    LESSTHANEQUAL   reduce using rule 85 (expression -> string .)
    GREATERTHANEQUAL reduce using rule 85 (expression -> string .)
    COMMA           reduce using rule 85 (expression -> string .)
    POW             reduce using rule 85 (expression -> string .)
    INCREMENT       reduce using rule 85 (expression -> string .)
    DECREMENT       reduce using rule 85 (expression -> string .)
    RPAREN          reduce using rule 85 (expression -> string .)
    SEMICOLON       reduce using rule 85 (expression -> string .)
    RBRACKET        reduce using rule 85 (expression -> string .)
    RBRACE          reduce using rule 85 (expression -> string .)
    COLON           reduce using rule 85 (expression -> string .)


state 51

    (86) expression -> boolean .

    QUESTION        reduce using rule 86 (expression -> boolean .)
    PLUS            reduce using rule 86 (expression -> boolean .)
    MINUS           reduce using rule 86 (expression -> boolean .)
    MULTIPLY        reduce using rule 86 (expression -> boolean .)
    DIVIDE          reduce using rule 86 (expression -> boolean .)
    MODULUS         reduce using rule 86 (expression -> boolean .)
    AND             reduce using rule 86 (expression -> boolean .)
    OR              reduce using rule 86 (expression -> boolean .)
    EQUAL           reduce using rule 86 (expression -> boolean .)
    NOTEQUAL        reduce using rule 86 (expression -> boolean .)
    LESSTHAN        reduce using rule 86 (expression -> boolean .)
    GREATERTHAN     reduce using rule 86 (expression -> boolean .)
    LESSTHANEQUAL   reduce using rule 86 (expression -> boolean .)
    GREATERTHANEQUAL reduce using rule 86 (expression -> boolean .)
    COMMA           reduce using rule 86 (expression -> boolean .)
    POW             reduce using rule 86 (expression -> boolean .)
    INCREMENT       reduce using rule 86 (expression -> boolean .)
    DECREMENT       reduce using rule 86 (expression -> boolean .)
    RPAREN          reduce using rule 86 (expression -> boolean .)
    SEMICOLON       reduce using rule 86 (expression -> boolean .)
    RBRACKET        reduce using rule 86 (expression -> boolean .)
    RBRACE          reduce using rule 86 (expression -> boolean .)
    COLON           reduce using rule 86 (expression -> boolean .)


state 52

    (89) digit -> NUMBER .

    QUESTION        reduce using rule 89 (digit -> NUMBER .)
    PLUS            reduce using rule 89 (digit -> NUMBER .)
    MINUS           reduce using rule 89 (digit -> NUMBER .)
    MULTIPLY        reduce using rule 89 (digit -> NUMBER .)
    DIVIDE          reduce using rule 89 (digit -> NUMBER .)
    MODULUS         reduce using rule 89 (digit -> NUMBER .)
    AND             reduce using rule 89 (digit -> NUMBER .)
    OR              reduce using rule 89 (digit -> NUMBER .)
    EQUAL           reduce using rule 89 (digit -> NUMBER .)
    NOTEQUAL        reduce using rule 89 (digit -> NUMBER .)
    LESSTHAN        reduce using rule 89 (digit -> NUMBER .)
    GREATERTHAN     reduce using rule 89 (digit -> NUMBER .)
    LESSTHANEQUAL   reduce using rule 89 (digit -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 89 (digit -> NUMBER .)
    COMMA           reduce using rule 89 (digit -> NUMBER .)
    POW             reduce using rule 89 (digit -> NUMBER .)
    INCREMENT       reduce using rule 89 (digit -> NUMBER .)
    DECREMENT       reduce using rule 89 (digit -> NUMBER .)
    RPAREN          reduce using rule 89 (digit -> NUMBER .)
    SEMICOLON       reduce using rule 89 (digit -> NUMBER .)
    RBRACKET        reduce using rule 89 (digit -> NUMBER .)
    RBRACE          reduce using rule 89 (digit -> NUMBER .)
    COLON           reduce using rule 89 (digit -> NUMBER .)


state 53

    (90) boolean -> TRUE .

    QUESTION        reduce using rule 90 (boolean -> TRUE .)
    PLUS            reduce using rule 90 (boolean -> TRUE .)
    MINUS           reduce using rule 90 (boolean -> TRUE .)
    MULTIPLY        reduce using rule 90 (boolean -> TRUE .)
    DIVIDE          reduce using rule 90 (boolean -> TRUE .)
    MODULUS         reduce using rule 90 (boolean -> TRUE .)
    AND             reduce using rule 90 (boolean -> TRUE .)
    OR              reduce using rule 90 (boolean -> TRUE .)
    EQUAL           reduce using rule 90 (boolean -> TRUE .)
    NOTEQUAL        reduce using rule 90 (boolean -> TRUE .)
    LESSTHAN        reduce using rule 90 (boolean -> TRUE .)
    GREATERTHAN     reduce using rule 90 (boolean -> TRUE .)
    LESSTHANEQUAL   reduce using rule 90 (boolean -> TRUE .)
    GREATERTHANEQUAL reduce using rule 90 (boolean -> TRUE .)
    COMMA           reduce using rule 90 (boolean -> TRUE .)
    POW             reduce using rule 90 (boolean -> TRUE .)
    INCREMENT       reduce using rule 90 (boolean -> TRUE .)
    DECREMENT       reduce using rule 90 (boolean -> TRUE .)
    RPAREN          reduce using rule 90 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 90 (boolean -> TRUE .)
    RBRACKET        reduce using rule 90 (boolean -> TRUE .)
    RBRACE          reduce using rule 90 (boolean -> TRUE .)
    COLON           reduce using rule 90 (boolean -> TRUE .)


state 54

    (91) boolean -> FALSE .

    QUESTION        reduce using rule 91 (boolean -> FALSE .)
    PLUS            reduce using rule 91 (boolean -> FALSE .)
    MINUS           reduce using rule 91 (boolean -> FALSE .)
    MULTIPLY        reduce using rule 91 (boolean -> FALSE .)
    DIVIDE          reduce using rule 91 (boolean -> FALSE .)
    MODULUS         reduce using rule 91 (boolean -> FALSE .)
    AND             reduce using rule 91 (boolean -> FALSE .)
    OR              reduce using rule 91 (boolean -> FALSE .)
    EQUAL           reduce using rule 91 (boolean -> FALSE .)
    NOTEQUAL        reduce using rule 91 (boolean -> FALSE .)
    LESSTHAN        reduce using rule 91 (boolean -> FALSE .)
    GREATERTHAN     reduce using rule 91 (boolean -> FALSE .)
    LESSTHANEQUAL   reduce using rule 91 (boolean -> FALSE .)
    GREATERTHANEQUAL reduce using rule 91 (boolean -> FALSE .)
    COMMA           reduce using rule 91 (boolean -> FALSE .)
    POW             reduce using rule 91 (boolean -> FALSE .)
    INCREMENT       reduce using rule 91 (boolean -> FALSE .)
    DECREMENT       reduce using rule 91 (boolean -> FALSE .)
    RPAREN          reduce using rule 91 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 91 (boolean -> FALSE .)
    RBRACKET        reduce using rule 91 (boolean -> FALSE .)
    RBRACE          reduce using rule 91 (boolean -> FALSE .)
    COLON           reduce using rule 91 (boolean -> FALSE .)


state 55

    (2) stmt_list -> stmt stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    RBRACE          reduce using rule 2 (stmt_list -> stmt stmt_list .)


state 56

    (15) stmt -> comment stmt .

    IMPORT          reduce using rule 15 (stmt -> comment stmt .)
    FUN             reduce using rule 15 (stmt -> comment stmt .)
    PRINT           reduce using rule 15 (stmt -> comment stmt .)
    RETURN          reduce using rule 15 (stmt -> comment stmt .)
    BREAK           reduce using rule 15 (stmt -> comment stmt .)
    COMMENT         reduce using rule 15 (stmt -> comment stmt .)
    INT             reduce using rule 15 (stmt -> comment stmt .)
    FLOAT           reduce using rule 15 (stmt -> comment stmt .)
    DOUBLE          reduce using rule 15 (stmt -> comment stmt .)
    STRING          reduce using rule 15 (stmt -> comment stmt .)
    BOOLEAN         reduce using rule 15 (stmt -> comment stmt .)
    INTLIST         reduce using rule 15 (stmt -> comment stmt .)
    FLOATLIST       reduce using rule 15 (stmt -> comment stmt .)
    STRINGLIST      reduce using rule 15 (stmt -> comment stmt .)
    DOUBLELIST      reduce using rule 15 (stmt -> comment stmt .)
    INTARRAY        reduce using rule 15 (stmt -> comment stmt .)
    FLOATARRAY      reduce using rule 15 (stmt -> comment stmt .)
    STRINGARRAY     reduce using rule 15 (stmt -> comment stmt .)
    DOUBLEARRAY     reduce using rule 15 (stmt -> comment stmt .)
    IDENTIFIER      reduce using rule 15 (stmt -> comment stmt .)
    IF              reduce using rule 15 (stmt -> comment stmt .)
    FOR             reduce using rule 15 (stmt -> comment stmt .)
    WHILE           reduce using rule 15 (stmt -> comment stmt .)
    LPAREN          reduce using rule 15 (stmt -> comment stmt .)
    NOT             reduce using rule 15 (stmt -> comment stmt .)
    NUMBER          reduce using rule 15 (stmt -> comment stmt .)
    STRING_LITERAL  reduce using rule 15 (stmt -> comment stmt .)
    TRUE            reduce using rule 15 (stmt -> comment stmt .)
    FALSE           reduce using rule 15 (stmt -> comment stmt .)
    $end            reduce using rule 15 (stmt -> comment stmt .)
    RBRACE          reduce using rule 15 (stmt -> comment stmt .)


state 57

    (14) stmt -> empty .

    IMPORT          reduce using rule 14 (stmt -> empty .)
    FUN             reduce using rule 14 (stmt -> empty .)
    PRINT           reduce using rule 14 (stmt -> empty .)
    RETURN          reduce using rule 14 (stmt -> empty .)
    BREAK           reduce using rule 14 (stmt -> empty .)
    COMMENT         reduce using rule 14 (stmt -> empty .)
    INT             reduce using rule 14 (stmt -> empty .)
    FLOAT           reduce using rule 14 (stmt -> empty .)
    DOUBLE          reduce using rule 14 (stmt -> empty .)
    STRING          reduce using rule 14 (stmt -> empty .)
    BOOLEAN         reduce using rule 14 (stmt -> empty .)
    INTLIST         reduce using rule 14 (stmt -> empty .)
    FLOATLIST       reduce using rule 14 (stmt -> empty .)
    STRINGLIST      reduce using rule 14 (stmt -> empty .)
    DOUBLELIST      reduce using rule 14 (stmt -> empty .)
    INTARRAY        reduce using rule 14 (stmt -> empty .)
    FLOATARRAY      reduce using rule 14 (stmt -> empty .)
    STRINGARRAY     reduce using rule 14 (stmt -> empty .)
    DOUBLEARRAY     reduce using rule 14 (stmt -> empty .)
    IDENTIFIER      reduce using rule 14 (stmt -> empty .)
    IF              reduce using rule 14 (stmt -> empty .)
    FOR             reduce using rule 14 (stmt -> empty .)
    WHILE           reduce using rule 14 (stmt -> empty .)
    LPAREN          reduce using rule 14 (stmt -> empty .)
    NOT             reduce using rule 14 (stmt -> empty .)
    NUMBER          reduce using rule 14 (stmt -> empty .)
    STRING_LITERAL  reduce using rule 14 (stmt -> empty .)
    TRUE            reduce using rule 14 (stmt -> empty .)
    FALSE           reduce using rule 14 (stmt -> empty .)
    $end            reduce using rule 14 (stmt -> empty .)
    RBRACE          reduce using rule 14 (stmt -> empty .)


state 58

    (32) import_declaration -> IMPORT STRING_LITERAL .

    IMPORT          reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    FUN             reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    PRINT           reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    RETURN          reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    BREAK           reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    COMMENT         reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    INT             reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOAT           reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLE          reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING          reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    BOOLEAN         reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    INTLIST         reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATLIST       reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGLIST      reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLELIST      reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    INTARRAY        reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATARRAY      reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGARRAY     reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLEARRAY     reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    IDENTIFIER      reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    IF              reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    FOR             reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    WHILE           reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    LPAREN          reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    NOT             reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    NUMBER          reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    TRUE            reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    FALSE           reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    $end            reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)
    RBRACE          reduce using rule 32 (import_declaration -> IMPORT STRING_LITERAL .)


state 59

    (20) fun_declaration -> FUN return_type . identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 99

state 60

    (21) fun_declaration -> FUN identifier . LPAREN params RPAREN LBRACE stmt_list RBRACE
    (97) general_type -> identifier .

    LPAREN          shift and go to state 100
    IDENTIFIER      reduce using rule 97 (general_type -> identifier .)


state 61

    (24) return_type -> general_type .

    IDENTIFIER      reduce using rule 24 (return_type -> general_type .)


state 62

    (25) return_type -> array_type .

    IDENTIFIER      reduce using rule 25 (return_type -> array_type .)


state 63

    (26) return_type -> list_type .

    IDENTIFIER      reduce using rule 26 (return_type -> list_type .)


state 64

    (27) return_type -> VOID .

    IDENTIFIER      reduce using rule 27 (return_type -> VOID .)


state 65

    (46) assignment -> identifier ASSIGN . expression SEMICOLON
    (47) assignment -> identifier ASSIGN . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 101
    expression                     shift and go to state 102
    function_call                  shift and go to state 103
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 66

    (22) function_call -> identifier LPAREN . arg_list RPAREN SEMICOLON
    (51) arg_list -> . expression COMMA arg_list
    (52) arg_list -> . expression
    (53) arg_list -> . empty
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (109) empty -> .
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    RPAREN          reduce using rule 109 (empty -> .)
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 70
    arg_list                       shift and go to state 104
    expression                     shift and go to state 105
    empty                          shift and go to state 106
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 67

    (87) expression -> identifier LBRACKET . expression RBRACKET
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 70
    expression                     shift and go to state 107
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 68

    (88) expression -> identifier LBRACE . expression RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 70
    expression                     shift and go to state 108
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 69

    (79) expression -> LPAREN expression . RPAREN
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RPAREN          shift and go to state 109
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 70

    (83) expression -> identifier .
    (87) expression -> identifier . LBRACKET expression RBRACKET
    (88) expression -> identifier . LBRACE expression RBRACE

    RPAREN          reduce using rule 83 (expression -> identifier .)
    PLUS            reduce using rule 83 (expression -> identifier .)
    MINUS           reduce using rule 83 (expression -> identifier .)
    MULTIPLY        reduce using rule 83 (expression -> identifier .)
    DIVIDE          reduce using rule 83 (expression -> identifier .)
    MODULUS         reduce using rule 83 (expression -> identifier .)
    AND             reduce using rule 83 (expression -> identifier .)
    OR              reduce using rule 83 (expression -> identifier .)
    EQUAL           reduce using rule 83 (expression -> identifier .)
    NOTEQUAL        reduce using rule 83 (expression -> identifier .)
    LESSTHAN        reduce using rule 83 (expression -> identifier .)
    GREATERTHAN     reduce using rule 83 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 83 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 83 (expression -> identifier .)
    COMMA           reduce using rule 83 (expression -> identifier .)
    POW             reduce using rule 83 (expression -> identifier .)
    INCREMENT       reduce using rule 83 (expression -> identifier .)
    DECREMENT       reduce using rule 83 (expression -> identifier .)
    SEMICOLON       reduce using rule 83 (expression -> identifier .)
    QUESTION        reduce using rule 83 (expression -> identifier .)
    RBRACKET        reduce using rule 83 (expression -> identifier .)
    RBRACE          reduce using rule 83 (expression -> identifier .)
    COLON           reduce using rule 83 (expression -> identifier .)
    LBRACKET        shift and go to state 67
    LBRACE          shift and go to state 68


state 71

    (36) assignment -> general_type identifier . ASSIGN expression SEMICOLON
    (37) assignment -> general_type identifier . ASSIGN function_call
    (33) variable_declaration -> general_type identifier . SEMICOLON

    ASSIGN          shift and go to state 110
    SEMICOLON       shift and go to state 111


state 72

    (56) if_stmt -> expression QUESTION . expression COLON expression SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 112
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 73

    (64) expression -> expression PLUS . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 113
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 74

    (65) expression -> expression MINUS . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 114
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 75

    (66) expression -> expression MULTIPLY . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 115
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 76

    (67) expression -> expression DIVIDE . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 116
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 77

    (68) expression -> expression MODULUS . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 117
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 78

    (69) expression -> expression AND . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 118
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 79

    (70) expression -> expression OR . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 119
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 80

    (71) expression -> expression EQUAL . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 120
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 81

    (72) expression -> expression NOTEQUAL . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 121
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 82

    (73) expression -> expression LESSTHAN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 122
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 83

    (74) expression -> expression GREATERTHAN . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 123
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 84

    (75) expression -> expression LESSTHANEQUAL . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 124
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 85

    (76) expression -> expression GREATERTHANEQUAL . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 125
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 86

    (77) expression -> expression COMMA . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 126
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 87

    (78) expression -> expression POW . expression
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 127
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 88

    (80) expression -> expression INCREMENT .

    QUESTION        reduce using rule 80 (expression -> expression INCREMENT .)
    PLUS            reduce using rule 80 (expression -> expression INCREMENT .)
    MINUS           reduce using rule 80 (expression -> expression INCREMENT .)
    MULTIPLY        reduce using rule 80 (expression -> expression INCREMENT .)
    DIVIDE          reduce using rule 80 (expression -> expression INCREMENT .)
    MODULUS         reduce using rule 80 (expression -> expression INCREMENT .)
    AND             reduce using rule 80 (expression -> expression INCREMENT .)
    OR              reduce using rule 80 (expression -> expression INCREMENT .)
    EQUAL           reduce using rule 80 (expression -> expression INCREMENT .)
    NOTEQUAL        reduce using rule 80 (expression -> expression INCREMENT .)
    LESSTHAN        reduce using rule 80 (expression -> expression INCREMENT .)
    GREATERTHAN     reduce using rule 80 (expression -> expression INCREMENT .)
    LESSTHANEQUAL   reduce using rule 80 (expression -> expression INCREMENT .)
    GREATERTHANEQUAL reduce using rule 80 (expression -> expression INCREMENT .)
    COMMA           reduce using rule 80 (expression -> expression INCREMENT .)
    POW             reduce using rule 80 (expression -> expression INCREMENT .)
    INCREMENT       reduce using rule 80 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 80 (expression -> expression INCREMENT .)
    RPAREN          reduce using rule 80 (expression -> expression INCREMENT .)
    SEMICOLON       reduce using rule 80 (expression -> expression INCREMENT .)
    RBRACKET        reduce using rule 80 (expression -> expression INCREMENT .)
    RBRACE          reduce using rule 80 (expression -> expression INCREMENT .)
    COLON           reduce using rule 80 (expression -> expression INCREMENT .)


state 89

    (81) expression -> expression DECREMENT .

    QUESTION        reduce using rule 81 (expression -> expression DECREMENT .)
    PLUS            reduce using rule 81 (expression -> expression DECREMENT .)
    MINUS           reduce using rule 81 (expression -> expression DECREMENT .)
    MULTIPLY        reduce using rule 81 (expression -> expression DECREMENT .)
    DIVIDE          reduce using rule 81 (expression -> expression DECREMENT .)
    MODULUS         reduce using rule 81 (expression -> expression DECREMENT .)
    AND             reduce using rule 81 (expression -> expression DECREMENT .)
    OR              reduce using rule 81 (expression -> expression DECREMENT .)
    EQUAL           reduce using rule 81 (expression -> expression DECREMENT .)
    NOTEQUAL        reduce using rule 81 (expression -> expression DECREMENT .)
    LESSTHAN        reduce using rule 81 (expression -> expression DECREMENT .)
    GREATERTHAN     reduce using rule 81 (expression -> expression DECREMENT .)
    LESSTHANEQUAL   reduce using rule 81 (expression -> expression DECREMENT .)
    GREATERTHANEQUAL reduce using rule 81 (expression -> expression DECREMENT .)
    COMMA           reduce using rule 81 (expression -> expression DECREMENT .)
    POW             reduce using rule 81 (expression -> expression DECREMENT .)
    INCREMENT       reduce using rule 81 (expression -> expression DECREMENT .)
    DECREMENT       reduce using rule 81 (expression -> expression DECREMENT .)
    RPAREN          reduce using rule 81 (expression -> expression DECREMENT .)
    SEMICOLON       reduce using rule 81 (expression -> expression DECREMENT .)
    RBRACKET        reduce using rule 81 (expression -> expression DECREMENT .)
    RBRACE          reduce using rule 81 (expression -> expression DECREMENT .)
    COLON           reduce using rule 81 (expression -> expression DECREMENT .)


state 90

    (38) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> list_type identifier . ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> list_type identifier . ASSIGN function_call
    (34) variable_declaration -> list_type identifier . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 128
    ASSIGN          shift and go to state 129


state 91

    (42) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> array_type identifier . ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> array_type identifier . ASSIGN function_call
    (35) variable_declaration -> array_type identifier . LBRACE RBRACE SEMICOLON

    LBRACE          shift and go to state 130
    ASSIGN          shift and go to state 131


state 92

    (16) print_stmt -> PRINT LPAREN . expression RPAREN SEMICOLON
    (17) print_stmt -> PRINT LPAREN . expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> PRINT LPAREN . expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> PRINT LPAREN . function_call RPAREN SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 132
    function_call                  shift and go to state 133
    identifier                     shift and go to state 101
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 93

    (23) return_stmt -> RETURN expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 134
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 94

    (28) break_stmt -> BREAK SEMICOLON .

    IMPORT          reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    FUN             reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    PRINT           reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    RETURN          reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    COMMENT         reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    INT             reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    FLOAT           reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    DOUBLE          reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    STRING          reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    BOOLEAN         reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    INTLIST         reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    FLOATLIST       reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    STRINGLIST      reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    DOUBLELIST      reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    INTARRAY        reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    FLOATARRAY      reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    STRINGARRAY     reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    DOUBLEARRAY     reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    IF              reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    FOR             reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    WHILE           reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    LPAREN          reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    NOT             reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    NUMBER          reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    STRING_LITERAL  reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    TRUE            reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    FALSE           reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    $end            reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)
    RBRACE          reduce using rule 28 (break_stmt -> BREAK SEMICOLON .)


state 95

    (54) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 135
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 96

    (57) for_stmt -> FOR LPAREN . variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> FOR LPAREN . assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45

    variable_declaration           shift and go to state 136
    assignment                     shift and go to state 137
    general_type                   shift and go to state 138
    identifier                     shift and go to state 139
    list_type                      shift and go to state 140
    array_type                     shift and go to state 141

state 97

    (59) while_stmt -> WHILE LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 142
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 98

    (82) expression -> NOT expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 82 (expression -> NOT expression .)
    RPAREN          reduce using rule 82 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 82 (expression -> NOT expression .)
    RBRACKET        reduce using rule 82 (expression -> NOT expression .)
    RBRACE          reduce using rule 82 (expression -> NOT expression .)
    COLON           reduce using rule 82 (expression -> NOT expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 82 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 82 (expression -> NOT expression .) ]
  ! MODULUS         [ reduce using rule 82 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 82 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 82 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 82 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 82 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 82 (expression -> NOT expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 82 (expression -> NOT expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 82 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 82 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 82 (expression -> NOT expression .) ]
  ! INCREMENT       [ reduce using rule 82 (expression -> NOT expression .) ]
  ! DECREMENT       [ reduce using rule 82 (expression -> NOT expression .) ]


state 99

    (20) fun_declaration -> FUN return_type identifier . LPAREN params RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 143


state 100

    (21) fun_declaration -> FUN identifier LPAREN . params RPAREN LBRACE stmt_list RBRACE
    (29) params -> . general_type identifier COMMA params
    (30) params -> . general_type identifier
    (31) params -> . empty
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (109) empty -> .
    (106) identifier -> . IDENTIFIER

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    RPAREN          reduce using rule 109 (empty -> .)
    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 144
    params                         shift and go to state 145
    general_type                   shift and go to state 146
    empty                          shift and go to state 147

state 101

    (83) expression -> identifier .
    (87) expression -> identifier . LBRACKET expression RBRACKET
    (88) expression -> identifier . LBRACE expression RBRACE
    (22) function_call -> identifier . LPAREN arg_list RPAREN SEMICOLON

    SEMICOLON       reduce using rule 83 (expression -> identifier .)
    PLUS            reduce using rule 83 (expression -> identifier .)
    MINUS           reduce using rule 83 (expression -> identifier .)
    MULTIPLY        reduce using rule 83 (expression -> identifier .)
    DIVIDE          reduce using rule 83 (expression -> identifier .)
    MODULUS         reduce using rule 83 (expression -> identifier .)
    AND             reduce using rule 83 (expression -> identifier .)
    OR              reduce using rule 83 (expression -> identifier .)
    EQUAL           reduce using rule 83 (expression -> identifier .)
    NOTEQUAL        reduce using rule 83 (expression -> identifier .)
    LESSTHAN        reduce using rule 83 (expression -> identifier .)
    GREATERTHAN     reduce using rule 83 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 83 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 83 (expression -> identifier .)
    COMMA           reduce using rule 83 (expression -> identifier .)
    POW             reduce using rule 83 (expression -> identifier .)
    INCREMENT       reduce using rule 83 (expression -> identifier .)
    DECREMENT       reduce using rule 83 (expression -> identifier .)
    RPAREN          reduce using rule 83 (expression -> identifier .)
    LBRACKET        shift and go to state 67
    LBRACE          shift and go to state 68
    LPAREN          shift and go to state 66


state 102

    (46) assignment -> identifier ASSIGN expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 148
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 103

    (47) assignment -> identifier ASSIGN function_call .

    IMPORT          reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    FUN             reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    PRINT           reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    RETURN          reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    BREAK           reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    COMMENT         reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    INT             reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    FLOAT           reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    DOUBLE          reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    STRING          reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    BOOLEAN         reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    INTLIST         reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    FLOATLIST       reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    STRINGLIST      reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    DOUBLELIST      reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    INTARRAY        reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    FLOATARRAY      reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    STRINGARRAY     reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    DOUBLEARRAY     reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    IDENTIFIER      reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    IF              reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    FOR             reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    WHILE           reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    LPAREN          reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    NOT             reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    NUMBER          reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    STRING_LITERAL  reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    TRUE            reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    FALSE           reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    $end            reduce using rule 47 (assignment -> identifier ASSIGN function_call .)
    RBRACE          reduce using rule 47 (assignment -> identifier ASSIGN function_call .)


state 104

    (22) function_call -> identifier LPAREN arg_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 149


state 105

    (51) arg_list -> expression . COMMA arg_list
    (52) arg_list -> expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    COMMA           shift and go to state 150
    RPAREN          reduce using rule 52 (arg_list -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 106

    (53) arg_list -> empty .

    RPAREN          reduce using rule 53 (arg_list -> empty .)


state 107

    (87) expression -> identifier LBRACKET expression . RBRACKET
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RBRACKET        shift and go to state 151
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 108

    (88) expression -> identifier LBRACE expression . RBRACE
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RBRACE          shift and go to state 152
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 109

    (79) expression -> LPAREN expression RPAREN .

    QUESTION        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    LESSTHANEQUAL   reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    GREATERTHANEQUAL reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 79 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 79 (expression -> LPAREN expression RPAREN .)


state 110

    (36) assignment -> general_type identifier ASSIGN . expression SEMICOLON
    (37) assignment -> general_type identifier ASSIGN . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 101
    expression                     shift and go to state 153
    function_call                  shift and go to state 154
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 111

    (33) variable_declaration -> general_type identifier SEMICOLON .

    IMPORT          reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    FUN             reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    PRINT           reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    RETURN          reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    BREAK           reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    COMMENT         reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    INT             reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOAT           reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLE          reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    STRING          reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    BOOLEAN         reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    INTLIST         reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOATLIST       reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    STRINGLIST      reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLELIST      reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    INTARRAY        reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOATARRAY      reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    STRINGARRAY     reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLEARRAY     reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    IDENTIFIER      reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    IF              reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    FOR             reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    WHILE           reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    LPAREN          reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    NOT             reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    NUMBER          reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    STRING_LITERAL  reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    TRUE            reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    FALSE           reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    $end            reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)
    RBRACE          reduce using rule 33 (variable_declaration -> general_type identifier SEMICOLON .)


state 112

    (56) if_stmt -> expression QUESTION expression . COLON expression SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    COLON           shift and go to state 155
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 113

    (64) expression -> expression PLUS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 64 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 64 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 64 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 64 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 64 (expression -> expression PLUS expression .)
    COLON           reduce using rule 64 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! INCREMENT       [ reduce using rule 64 (expression -> expression PLUS expression .) ]
  ! DECREMENT       [ reduce using rule 64 (expression -> expression PLUS expression .) ]


state 114

    (65) expression -> expression MINUS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 65 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 65 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 65 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 65 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 65 (expression -> expression MINUS expression .)
    COLON           reduce using rule 65 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! INCREMENT       [ reduce using rule 65 (expression -> expression MINUS expression .) ]
  ! DECREMENT       [ reduce using rule 65 (expression -> expression MINUS expression .) ]


state 115

    (66) expression -> expression MULTIPLY expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 66 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 66 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 66 (expression -> expression MULTIPLY expression .)
    RBRACKET        reduce using rule 66 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 66 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 66 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! MODULUS         [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! EQUAL           [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUAL        [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! POW             [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! INCREMENT       [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]
  ! DECREMENT       [ reduce using rule 66 (expression -> expression MULTIPLY expression .) ]


state 116

    (67) expression -> expression DIVIDE expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 67 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 67 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 67 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 67 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 67 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 67 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! MODULUS         [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! EQUAL           [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUAL        [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! POW             [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! INCREMENT       [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]
  ! DECREMENT       [ reduce using rule 67 (expression -> expression DIVIDE expression .) ]


state 117

    (68) expression -> expression MODULUS expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 68 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 68 (expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 68 (expression -> expression MODULUS expression .)
    RBRACKET        reduce using rule 68 (expression -> expression MODULUS expression .)
    RBRACE          reduce using rule 68 (expression -> expression MODULUS expression .)
    COLON           reduce using rule 68 (expression -> expression MODULUS expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! MINUS           [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! MULTIPLY        [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! DIVIDE          [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! AND             [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! OR              [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! EQUAL           [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! LESSTHAN        [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! COMMA           [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! POW             [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! INCREMENT       [ reduce using rule 68 (expression -> expression MODULUS expression .) ]
  ! DECREMENT       [ reduce using rule 68 (expression -> expression MODULUS expression .) ]


state 118

    (69) expression -> expression AND expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 69 (expression -> expression AND expression .)
    RPAREN          reduce using rule 69 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 69 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 69 (expression -> expression AND expression .)
    RBRACE          reduce using rule 69 (expression -> expression AND expression .)
    COLON           reduce using rule 69 (expression -> expression AND expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! INCREMENT       [ reduce using rule 69 (expression -> expression AND expression .) ]
  ! DECREMENT       [ reduce using rule 69 (expression -> expression AND expression .) ]


state 119

    (70) expression -> expression OR expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 70 (expression -> expression OR expression .)
    RPAREN          reduce using rule 70 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 70 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 70 (expression -> expression OR expression .)
    RBRACE          reduce using rule 70 (expression -> expression OR expression .)
    COLON           reduce using rule 70 (expression -> expression OR expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! POW             [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! INCREMENT       [ reduce using rule 70 (expression -> expression OR expression .) ]
  ! DECREMENT       [ reduce using rule 70 (expression -> expression OR expression .) ]


state 120

    (71) expression -> expression EQUAL expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 71 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 71 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 71 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 71 (expression -> expression EQUAL expression .)
    RBRACE          reduce using rule 71 (expression -> expression EQUAL expression .)
    COLON           reduce using rule 71 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! COMMA           [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! POW             [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 71 (expression -> expression EQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 71 (expression -> expression EQUAL expression .) ]


state 121

    (72) expression -> expression NOTEQUAL expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 72 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 72 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 72 (expression -> expression NOTEQUAL expression .)
    RBRACKET        reduce using rule 72 (expression -> expression NOTEQUAL expression .)
    RBRACE          reduce using rule 72 (expression -> expression NOTEQUAL expression .)
    COLON           reduce using rule 72 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! COMMA           [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! POW             [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 72 (expression -> expression NOTEQUAL expression .) ]


state 122

    (73) expression -> expression LESSTHAN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 73 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 73 (expression -> expression LESSTHAN expression .)
    SEMICOLON       reduce using rule 73 (expression -> expression LESSTHAN expression .)
    RBRACKET        reduce using rule 73 (expression -> expression LESSTHAN expression .)
    RBRACE          reduce using rule 73 (expression -> expression LESSTHAN expression .)
    COLON           reduce using rule 73 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! MODULUS         [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! EQUAL           [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! POW             [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 73 (expression -> expression LESSTHAN expression .) ]


state 123

    (74) expression -> expression GREATERTHAN expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 74 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 74 (expression -> expression GREATERTHAN expression .)
    SEMICOLON       reduce using rule 74 (expression -> expression GREATERTHAN expression .)
    RBRACKET        reduce using rule 74 (expression -> expression GREATERTHAN expression .)
    RBRACE          reduce using rule 74 (expression -> expression GREATERTHAN expression .)
    COLON           reduce using rule 74 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! MODULUS         [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! EQUAL           [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! POW             [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 74 (expression -> expression GREATERTHAN expression .) ]


state 124

    (75) expression -> expression LESSTHANEQUAL expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .)
    RPAREN          reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .)
    SEMICOLON       reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .)
    RBRACKET        reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .)
    RBRACE          reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .)
    COLON           reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! COMMA           [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 75 (expression -> expression LESSTHANEQUAL expression .) ]


state 125

    (76) expression -> expression GREATERTHANEQUAL expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .)
    RPAREN          reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .)
    SEMICOLON       reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACKET        reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACE          reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .)
    COLON           reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! COMMA           [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 76 (expression -> expression GREATERTHANEQUAL expression .) ]


state 126

    (77) expression -> expression COMMA expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 77 (expression -> expression COMMA expression .)
    RPAREN          reduce using rule 77 (expression -> expression COMMA expression .)
    SEMICOLON       reduce using rule 77 (expression -> expression COMMA expression .)
    RBRACKET        reduce using rule 77 (expression -> expression COMMA expression .)
    RBRACE          reduce using rule 77 (expression -> expression COMMA expression .)
    COLON           reduce using rule 77 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! MODULUS         [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! EQUAL           [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! NOTEQUAL        [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! POW             [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! INCREMENT       [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! DECREMENT       [ reduce using rule 77 (expression -> expression COMMA expression .) ]


state 127

    (78) expression -> expression POW expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    QUESTION        reduce using rule 78 (expression -> expression POW expression .)
    RPAREN          reduce using rule 78 (expression -> expression POW expression .)
    SEMICOLON       reduce using rule 78 (expression -> expression POW expression .)
    RBRACKET        reduce using rule 78 (expression -> expression POW expression .)
    RBRACE          reduce using rule 78 (expression -> expression POW expression .)
    COLON           reduce using rule 78 (expression -> expression POW expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! PLUS            [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! MINUS           [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! MULTIPLY        [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! DIVIDE          [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! MODULUS         [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! AND             [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! OR              [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! EQUAL           [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! NOTEQUAL        [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! LESSTHAN        [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! GREATERTHAN     [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! COMMA           [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! POW             [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! INCREMENT       [ reduce using rule 78 (expression -> expression POW expression .) ]
  ! DECREMENT       [ reduce using rule 78 (expression -> expression POW expression .) ]


state 128

    (38) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN function_call
    (34) variable_declaration -> list_type identifier LBRACKET . RBRACKET SEMICOLON
    (89) digit -> . NUMBER

    RBRACKET        shift and go to state 157
    NUMBER          shift and go to state 52

    digit                          shift and go to state 156

state 129

    (40) assignment -> list_type identifier ASSIGN . LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> list_type identifier ASSIGN . function_call
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (106) identifier -> . IDENTIFIER

    LBRACKET        shift and go to state 159
    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 158
    function_call                  shift and go to state 160

state 130

    (42) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN function_call
    (35) variable_declaration -> array_type identifier LBRACE . RBRACE SEMICOLON
    (89) digit -> . NUMBER

    RBRACE          shift and go to state 162
    NUMBER          shift and go to state 52

    digit                          shift and go to state 161

state 131

    (44) assignment -> array_type identifier ASSIGN . LBRACE expression RBRACE SEMICOLON
    (45) assignment -> array_type identifier ASSIGN . function_call
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (106) identifier -> . IDENTIFIER

    LBRACE          shift and go to state 163
    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 158
    function_call                  shift and go to state 164

state 132

    (16) print_stmt -> PRINT LPAREN expression . RPAREN SEMICOLON
    (17) print_stmt -> PRINT LPAREN expression . PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> PRINT LPAREN expression . PLUS function_call RPAREN SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RPAREN          shift and go to state 165
    PLUS            shift and go to state 166
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 133

    (19) print_stmt -> PRINT LPAREN function_call . RPAREN SEMICOLON

    RPAREN          shift and go to state 167


state 134

    (23) return_stmt -> RETURN expression SEMICOLON .

    IMPORT          reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    FUN             reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    PRINT           reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    COMMENT         reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    INT             reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    FLOAT           reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    DOUBLE          reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    STRING          reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    BOOLEAN         reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    INTLIST         reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    FLOATLIST       reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    STRINGLIST      reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    INTARRAY        reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    NOT             reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    $end            reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)
    RBRACE          reduce using rule 23 (return_stmt -> RETURN expression SEMICOLON .)


state 135

    (54) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RPAREN          shift and go to state 168
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 136

    (57) for_stmt -> FOR LPAREN variable_declaration . expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 169
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 137

    (58) for_stmt -> FOR LPAREN assignment . expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 170
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 138

    (33) variable_declaration -> general_type . identifier SEMICOLON
    (36) assignment -> general_type . identifier ASSIGN expression SEMICOLON
    (37) assignment -> general_type . identifier ASSIGN function_call
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 171

state 139

    (46) assignment -> identifier . ASSIGN expression SEMICOLON
    (47) assignment -> identifier . ASSIGN function_call
    (97) general_type -> identifier .

    ASSIGN          shift and go to state 65
    IDENTIFIER      reduce using rule 97 (general_type -> identifier .)


state 140

    (34) variable_declaration -> list_type . identifier LBRACKET RBRACKET SEMICOLON
    (38) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> list_type . identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> list_type . identifier ASSIGN function_call
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 172

state 141

    (35) variable_declaration -> array_type . identifier LBRACE RBRACE SEMICOLON
    (42) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> array_type . identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> array_type . identifier ASSIGN function_call
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 173

state 142

    (59) while_stmt -> WHILE LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RPAREN          shift and go to state 174
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 143

    (20) fun_declaration -> FUN return_type identifier LPAREN . params RPAREN LBRACE stmt_list RBRACE
    (29) params -> . general_type identifier COMMA params
    (30) params -> . general_type identifier
    (31) params -> . empty
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (109) empty -> .
    (106) identifier -> . IDENTIFIER

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    RPAREN          reduce using rule 109 (empty -> .)
    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 144
    params                         shift and go to state 175
    general_type                   shift and go to state 146
    empty                          shift and go to state 147

state 144

    (97) general_type -> identifier .

    IDENTIFIER      reduce using rule 97 (general_type -> identifier .)


state 145

    (21) fun_declaration -> FUN identifier LPAREN params . RPAREN LBRACE stmt_list RBRACE

    RPAREN          shift and go to state 176


state 146

    (29) params -> general_type . identifier COMMA params
    (30) params -> general_type . identifier
    (106) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 45

    identifier                     shift and go to state 177

state 147

    (31) params -> empty .

    RPAREN          reduce using rule 31 (params -> empty .)


state 148

    (46) assignment -> identifier ASSIGN expression SEMICOLON .

    IMPORT          reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INT             reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IF              reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    $end            reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 46 (assignment -> identifier ASSIGN expression SEMICOLON .)


state 149

    (22) function_call -> identifier LPAREN arg_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 178


state 150

    (51) arg_list -> expression COMMA . arg_list
    (77) expression -> expression COMMA . expression
    (51) arg_list -> . expression COMMA arg_list
    (52) arg_list -> . expression
    (53) arg_list -> . empty
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (109) empty -> .
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    RPAREN          reduce using rule 109 (empty -> .)
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 179
    arg_list                       shift and go to state 180
    empty                          shift and go to state 106
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 151

    (87) expression -> identifier LBRACKET expression RBRACKET .

    QUESTION        reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    MULTIPLY        reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    AND             reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    OR              reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    NOTEQUAL        reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    LESSTHANEQUAL   reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    GREATERTHANEQUAL reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    POW             reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)
    COLON           reduce using rule 87 (expression -> identifier LBRACKET expression RBRACKET .)


state 152

    (88) expression -> identifier LBRACE expression RBRACE .

    QUESTION        reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    PLUS            reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    MINUS           reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    MULTIPLY        reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    DIVIDE          reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    MODULUS         reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    AND             reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    OR              reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    EQUAL           reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    NOTEQUAL        reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    LESSTHAN        reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    GREATERTHAN     reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    LESSTHANEQUAL   reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    GREATERTHANEQUAL reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    COMMA           reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    POW             reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    INCREMENT       reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    DECREMENT       reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    RPAREN          reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    SEMICOLON       reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    RBRACKET        reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    RBRACE          reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)
    COLON           reduce using rule 88 (expression -> identifier LBRACE expression RBRACE .)


state 153

    (36) assignment -> general_type identifier ASSIGN expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 181
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 154

    (37) assignment -> general_type identifier ASSIGN function_call .

    IMPORT          reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    FUN             reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    PRINT           reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    RETURN          reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    BREAK           reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    COMMENT         reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    INT             reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    FLOAT           reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    DOUBLE          reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    STRING          reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    BOOLEAN         reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    INTLIST         reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    FLOATLIST       reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    STRINGLIST      reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    DOUBLELIST      reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    INTARRAY        reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    FLOATARRAY      reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    STRINGARRAY     reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    DOUBLEARRAY     reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    IDENTIFIER      reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    IF              reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    FOR             reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    WHILE           reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    LPAREN          reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    NOT             reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    NUMBER          reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    STRING_LITERAL  reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    TRUE            reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    FALSE           reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    $end            reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)
    RBRACE          reduce using rule 37 (assignment -> general_type identifier ASSIGN function_call .)


state 155

    (56) if_stmt -> expression QUESTION expression COLON . expression SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 182
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 156

    (38) assignment -> list_type identifier LBRACKET digit . RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> list_type identifier LBRACKET digit . RBRACKET ASSIGN function_call

    RBRACKET        shift and go to state 183


state 157

    (34) variable_declaration -> list_type identifier LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 184


state 158

    (22) function_call -> identifier . LPAREN arg_list RPAREN SEMICOLON

    LPAREN          shift and go to state 66


state 159

    (40) assignment -> list_type identifier ASSIGN LBRACKET . expression RBRACKET SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 70
    expression                     shift and go to state 185
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 160

    (41) assignment -> list_type identifier ASSIGN function_call .

    IMPORT          reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    FUN             reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    PRINT           reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    RETURN          reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    BREAK           reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    COMMENT         reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    INT             reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    FLOAT           reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    DOUBLE          reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    STRING          reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    BOOLEAN         reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    INTLIST         reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    FLOATLIST       reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    STRINGLIST      reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    DOUBLELIST      reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    INTARRAY        reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    FLOATARRAY      reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    STRINGARRAY     reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    DOUBLEARRAY     reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    IDENTIFIER      reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    IF              reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    FOR             reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    WHILE           reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    LPAREN          reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    NOT             reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    NUMBER          reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    STRING_LITERAL  reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    TRUE            reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    FALSE           reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    $end            reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)
    RBRACE          reduce using rule 41 (assignment -> list_type identifier ASSIGN function_call .)


state 161

    (42) assignment -> array_type identifier LBRACE digit . RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> array_type identifier LBRACE digit . RBRACE ASSIGN function_call

    RBRACE          shift and go to state 186


state 162

    (35) variable_declaration -> array_type identifier LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 187


state 163

    (44) assignment -> array_type identifier ASSIGN LBRACE . expression RBRACE SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 70
    expression                     shift and go to state 188
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 164

    (45) assignment -> array_type identifier ASSIGN function_call .

    IMPORT          reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    FUN             reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    PRINT           reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    RETURN          reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    BREAK           reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    COMMENT         reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    INT             reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    FLOAT           reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    DOUBLE          reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    STRING          reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    BOOLEAN         reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    INTLIST         reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    FLOATLIST       reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    STRINGLIST      reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    DOUBLELIST      reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    INTARRAY        reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    FLOATARRAY      reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    STRINGARRAY     reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    DOUBLEARRAY     reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    IDENTIFIER      reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    IF              reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    FOR             reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    WHILE           reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    LPAREN          reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    NOT             reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    NUMBER          reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    STRING_LITERAL  reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    TRUE            reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    FALSE           reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    $end            reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)
    RBRACE          reduce using rule 45 (assignment -> array_type identifier ASSIGN function_call .)


state 165

    (16) print_stmt -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 189


state 166

    (17) print_stmt -> PRINT LPAREN expression PLUS . function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> PRINT LPAREN expression PLUS . function_call RPAREN SEMICOLON
    (64) expression -> expression PLUS . expression
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 113
    function_call                  shift and go to state 190
    identifier                     shift and go to state 191
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 167

    (19) print_stmt -> PRINT LPAREN function_call RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 192


state 168

    (54) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE
    (55) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 193


state 169

    (57) for_stmt -> FOR LPAREN variable_declaration expression . SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 194
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 170

    (58) for_stmt -> FOR LPAREN assignment expression . SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 195
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 171

    (33) variable_declaration -> general_type identifier . SEMICOLON
    (36) assignment -> general_type identifier . ASSIGN expression SEMICOLON
    (37) assignment -> general_type identifier . ASSIGN function_call

    SEMICOLON       shift and go to state 111
    ASSIGN          shift and go to state 110


state 172

    (34) variable_declaration -> list_type identifier . LBRACKET RBRACKET SEMICOLON
    (38) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> list_type identifier . ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> list_type identifier . ASSIGN function_call

    LBRACKET        shift and go to state 196
    ASSIGN          shift and go to state 129


state 173

    (35) variable_declaration -> array_type identifier . LBRACE RBRACE SEMICOLON
    (42) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> array_type identifier . ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> array_type identifier . ASSIGN function_call

    LBRACE          shift and go to state 197
    ASSIGN          shift and go to state 131


state 174

    (59) while_stmt -> WHILE LPAREN expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 198


state 175

    (20) fun_declaration -> FUN return_type identifier LPAREN params . RPAREN LBRACE stmt_list RBRACE

    RPAREN          shift and go to state 199


state 176

    (21) fun_declaration -> FUN identifier LPAREN params RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 200


state 177

    (29) params -> general_type identifier . COMMA params
    (30) params -> general_type identifier .

    COMMA           shift and go to state 201
    RPAREN          reduce using rule 30 (params -> general_type identifier .)


state 178

    (22) function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .

    IMPORT          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FUN             reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    RETURN          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    BREAK           reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    COMMENT         reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    INT             reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FLOAT           reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRING          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    INTLIST         reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    IF              reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FOR             reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    LPAREN          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    NOT             reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    NUMBER          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    TRUE            reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    FALSE           reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    $end            reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    RPAREN          reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)
    PLUS            reduce using rule 22 (function_call -> identifier LPAREN arg_list RPAREN SEMICOLON .)


state 179

    (77) expression -> expression COMMA expression .
    (51) arg_list -> expression . COMMA arg_list
    (52) arg_list -> expression .
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for RPAREN resolved using rule 52 (arg_list -> expression .)
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for POW resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
    COMMA           shift and go to state 150
    RPAREN          reduce using rule 52 (arg_list -> expression .)
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89

  ! COMMA           [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! PLUS            [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! MODULUS         [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! EQUAL           [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! NOTEQUAL        [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! POW             [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! INCREMENT       [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! DECREMENT       [ reduce using rule 77 (expression -> expression COMMA expression .) ]
  ! RPAREN          [ reduce using rule 77 (expression -> expression COMMA expression .) ]


state 180

    (51) arg_list -> expression COMMA arg_list .

    RPAREN          reduce using rule 51 (arg_list -> expression COMMA arg_list .)


state 181

    (36) assignment -> general_type identifier ASSIGN expression SEMICOLON .

    IMPORT          reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INT             reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IF              reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    $end            reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 36 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)


state 182

    (56) if_stmt -> expression QUESTION expression COLON expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 202
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 183

    (38) assignment -> list_type identifier LBRACKET digit RBRACKET . ASSIGN expression SEMICOLON
    (39) assignment -> list_type identifier LBRACKET digit RBRACKET . ASSIGN function_call

    ASSIGN          shift and go to state 203


state 184

    (34) variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .

    IMPORT          reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FUN             reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    PRINT           reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    RETURN          reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    BREAK           reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    COMMENT         reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INT             reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRING          reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INTLIST         reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOATLIST       reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRINGLIST      reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLELIST      reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INTARRAY        reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOATARRAY      reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRINGARRAY     reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLEARRAY     reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IF              reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FOR             reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    WHILE           reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    NOT             reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    TRUE            reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FALSE           reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 34 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)


state 185

    (40) assignment -> list_type identifier ASSIGN LBRACKET expression . RBRACKET SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RBRACKET        shift and go to state 204
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 186

    (42) assignment -> array_type identifier LBRACE digit RBRACE . ASSIGN expression SEMICOLON
    (43) assignment -> array_type identifier LBRACE digit RBRACE . ASSIGN function_call

    ASSIGN          shift and go to state 205


state 187

    (35) variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .

    IMPORT          reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FUN             reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    PRINT           reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    RETURN          reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    BREAK           reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    COMMENT         reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INT             reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOAT           reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLE          reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    BOOLEAN         reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INTLIST         reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOATLIST       reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRINGLIST      reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLELIST      reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INTARRAY        reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOATARRAY      reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRINGARRAY     reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLEARRAY     reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IF              reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FOR             reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    WHILE           reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRING_LITERAL  reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    TRUE            reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FALSE           reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 35 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)


state 188

    (44) assignment -> array_type identifier ASSIGN LBRACE expression . RBRACE SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RBRACE          shift and go to state 206
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 189

    (16) print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .

    IMPORT          reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FUN             reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    COMMENT         reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTLIST         reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 16 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 190

    (17) print_stmt -> PRINT LPAREN expression PLUS function_call . PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> PRINT LPAREN expression PLUS function_call . RPAREN SEMICOLON

    PLUS            shift and go to state 207
    RPAREN          shift and go to state 208


state 191

    (22) function_call -> identifier . LPAREN arg_list RPAREN SEMICOLON
    (83) expression -> identifier .
    (87) expression -> identifier . LBRACKET expression RBRACKET
    (88) expression -> identifier . LBRACE expression RBRACE

    LPAREN          shift and go to state 66
    PLUS            reduce using rule 83 (expression -> identifier .)
    MINUS           reduce using rule 83 (expression -> identifier .)
    MULTIPLY        reduce using rule 83 (expression -> identifier .)
    DIVIDE          reduce using rule 83 (expression -> identifier .)
    MODULUS         reduce using rule 83 (expression -> identifier .)
    AND             reduce using rule 83 (expression -> identifier .)
    OR              reduce using rule 83 (expression -> identifier .)
    EQUAL           reduce using rule 83 (expression -> identifier .)
    NOTEQUAL        reduce using rule 83 (expression -> identifier .)
    LESSTHAN        reduce using rule 83 (expression -> identifier .)
    GREATERTHAN     reduce using rule 83 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 83 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 83 (expression -> identifier .)
    COMMA           reduce using rule 83 (expression -> identifier .)
    POW             reduce using rule 83 (expression -> identifier .)
    INCREMENT       reduce using rule 83 (expression -> identifier .)
    DECREMENT       reduce using rule 83 (expression -> identifier .)
    RPAREN          reduce using rule 83 (expression -> identifier .)
    LBRACKET        shift and go to state 67
    LBRACE          shift and go to state 68


state 192

    (19) print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .

    IMPORT          reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    FUN             reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    PRINT           reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    RETURN          reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    BREAK           reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    COMMENT         reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    INT             reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    FLOAT           reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    STRING          reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    INTLIST         reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    IF              reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    FOR             reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    WHILE           reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    LPAREN          reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    NOT             reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    NUMBER          reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    TRUE            reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    FALSE           reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    $end            reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)
    RBRACE          reduce using rule 19 (print_stmt -> PRINT LPAREN function_call RPAREN SEMICOLON .)


state 193

    (54) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (55) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    expression                     shift and go to state 21
    stmt_list                      shift and go to state 209
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 194

    (57) for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON . expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 210
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 195

    (58) for_stmt -> FOR LPAREN assignment expression SEMICOLON . expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 211
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 196

    (34) variable_declaration -> list_type identifier LBRACKET . RBRACKET SEMICOLON
    (38) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN function_call
    (89) digit -> . NUMBER

    RBRACKET        shift and go to state 157
    NUMBER          shift and go to state 52

    digit                          shift and go to state 156

state 197

    (35) variable_declaration -> array_type identifier LBRACE . RBRACE SEMICOLON
    (42) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN function_call
    (89) digit -> . NUMBER

    RBRACE          shift and go to state 162
    NUMBER          shift and go to state 52

    digit                          shift and go to state 161

state 198

    (59) while_stmt -> WHILE LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    expression                     shift and go to state 21
    stmt_list                      shift and go to state 212
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 199

    (20) fun_declaration -> FUN return_type identifier LPAREN params RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 213


state 200

    (21) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    identifier                     shift and go to state 18
    stmt_list                      shift and go to state 214
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 201

    (29) params -> general_type identifier COMMA . params
    (29) params -> . general_type identifier COMMA params
    (30) params -> . general_type identifier
    (31) params -> . empty
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (109) empty -> .
    (106) identifier -> . IDENTIFIER

    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    RPAREN          reduce using rule 109 (empty -> .)
    IDENTIFIER      shift and go to state 45

    general_type                   shift and go to state 146
    identifier                     shift and go to state 144
    params                         shift and go to state 215
    empty                          shift and go to state 147

state 202

    (56) if_stmt -> expression QUESTION expression COLON expression SEMICOLON .

    IMPORT          reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FUN             reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    PRINT           reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    RETURN          reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    BREAK           reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    COMMENT         reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INT             reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOAT           reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLE          reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING          reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    BOOLEAN         reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTLIST         reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATLIST       reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGLIST      reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLELIST      reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTARRAY        reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATARRAY      reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGARRAY     reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IDENTIFIER      reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IF              reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FOR             reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    WHILE           reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    LPAREN          reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NOT             reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NUMBER          reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    TRUE            reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FALSE           reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    $end            reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    RBRACE          reduce using rule 56 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)


state 203

    (38) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN . expression SEMICOLON
    (39) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 101
    digit                          shift and go to state 23
    expression                     shift and go to state 216
    function_call                  shift and go to state 217
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 204

    (40) assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 218


state 205

    (42) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN . expression SEMICOLON
    (43) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN . function_call
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    identifier                     shift and go to state 101
    digit                          shift and go to state 23
    expression                     shift and go to state 219
    function_call                  shift and go to state 220
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 206

    (44) assignment -> array_type identifier ASSIGN LBRACE expression RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 221


state 207

    (17) print_stmt -> PRINT LPAREN expression PLUS function_call PLUS . expression RPAREN SEMICOLON
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (106) identifier -> . IDENTIFIER
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    IDENTIFIER      shift and go to state 45
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

    expression                     shift and go to state 222
    identifier                     shift and go to state 70
    digit                          shift and go to state 23
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 208

    (18) print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 223


state 209

    (54) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE
    (55) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE

    RBRACE          shift and go to state 224


state 210

    (57) for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression . RPAREN LBRACE stmt_list RBRACE
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RPAREN          shift and go to state 225
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 211

    (58) for_stmt -> FOR LPAREN assignment expression SEMICOLON expression . RPAREN LBRACE stmt_list RBRACE
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RPAREN          shift and go to state 226
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 212

    (59) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 227


state 213

    (20) fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    identifier                     shift and go to state 18
    stmt_list                      shift and go to state 228
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    general_type                   shift and go to state 20
    expression                     shift and go to state 21
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 214

    (21) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 229


state 215

    (29) params -> general_type identifier COMMA params .

    RPAREN          reduce using rule 29 (params -> general_type identifier COMMA params .)


state 216

    (38) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 230
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 217

    (39) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .

    IMPORT          reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    FUN             reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    PRINT           reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    RETURN          reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    BREAK           reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    COMMENT         reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    INT             reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    FLOAT           reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    DOUBLE          reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    STRING          reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    BOOLEAN         reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    INTLIST         reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    FLOATLIST       reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    STRINGLIST      reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    DOUBLELIST      reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    INTARRAY        reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    FLOATARRAY      reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    STRINGARRAY     reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    DOUBLEARRAY     reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    IDENTIFIER      reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    IF              reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    FOR             reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    WHILE           reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    LPAREN          reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    NOT             reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    NUMBER          reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    STRING_LITERAL  reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    TRUE            reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    FALSE           reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    $end            reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)
    RBRACE          reduce using rule 39 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN function_call .)


state 218

    (40) assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .

    IMPORT          reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FUN             reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    PRINT           reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    RETURN          reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    BREAK           reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    COMMENT         reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INT             reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRING          reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INTLIST         reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOATLIST       reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRINGLIST      reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLELIST      reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INTARRAY        reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOATARRAY      reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRINGARRAY     reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLEARRAY     reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IF              reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FOR             reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    WHILE           reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    NOT             reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    TRUE            reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FALSE           reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    $end            reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 40 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)


state 219

    (42) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression . SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    SEMICOLON       shift and go to state 231
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 220

    (43) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .

    IMPORT          reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    FUN             reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    PRINT           reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    RETURN          reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    BREAK           reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    COMMENT         reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    INT             reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    FLOAT           reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    DOUBLE          reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    STRING          reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    BOOLEAN         reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    INTLIST         reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    FLOATLIST       reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    STRINGLIST      reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    DOUBLELIST      reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    INTARRAY        reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    FLOATARRAY      reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    STRINGARRAY     reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    DOUBLEARRAY     reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    IDENTIFIER      reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    IF              reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    FOR             reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    WHILE           reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    LPAREN          reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    NOT             reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    NUMBER          reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    STRING_LITERAL  reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    TRUE            reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    FALSE           reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    $end            reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)
    RBRACE          reduce using rule 43 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN function_call .)


state 221

    (44) assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .

    IMPORT          reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FUN             reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    PRINT           reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    RETURN          reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    BREAK           reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    COMMENT         reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INT             reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOAT           reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLE          reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRING          reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    BOOLEAN         reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INTLIST         reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOATLIST       reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRINGLIST      reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLELIST      reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INTARRAY        reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOATARRAY      reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRINGARRAY     reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLEARRAY     reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IF              reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FOR             reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    WHILE           reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    LPAREN          reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    NOT             reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    NUMBER          reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRING_LITERAL  reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    TRUE            reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FALSE           reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    $end            reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    RBRACE          reduce using rule 44 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)


state 222

    (17) print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression . RPAREN SEMICOLON
    (64) expression -> expression . PLUS expression
    (65) expression -> expression . MINUS expression
    (66) expression -> expression . MULTIPLY expression
    (67) expression -> expression . DIVIDE expression
    (68) expression -> expression . MODULUS expression
    (69) expression -> expression . AND expression
    (70) expression -> expression . OR expression
    (71) expression -> expression . EQUAL expression
    (72) expression -> expression . NOTEQUAL expression
    (73) expression -> expression . LESSTHAN expression
    (74) expression -> expression . GREATERTHAN expression
    (75) expression -> expression . LESSTHANEQUAL expression
    (76) expression -> expression . GREATERTHANEQUAL expression
    (77) expression -> expression . COMMA expression
    (78) expression -> expression . POW expression
    (80) expression -> expression . INCREMENT
    (81) expression -> expression . DECREMENT

    RPAREN          shift and go to state 232
    PLUS            shift and go to state 73
    MINUS           shift and go to state 74
    MULTIPLY        shift and go to state 75
    DIVIDE          shift and go to state 76
    MODULUS         shift and go to state 77
    AND             shift and go to state 78
    OR              shift and go to state 79
    EQUAL           shift and go to state 80
    NOTEQUAL        shift and go to state 81
    LESSTHAN        shift and go to state 82
    GREATERTHAN     shift and go to state 83
    LESSTHANEQUAL   shift and go to state 84
    GREATERTHANEQUAL shift and go to state 85
    COMMA           shift and go to state 86
    POW             shift and go to state 87
    INCREMENT       shift and go to state 88
    DECREMENT       shift and go to state 89


state 223

    (18) print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .

    IMPORT          reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    FUN             reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    PRINT           reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    RETURN          reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    BREAK           reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    COMMENT         reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    INT             reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    FLOAT           reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    STRING          reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    INTLIST         reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    IF              reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    FOR             reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    WHILE           reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    LPAREN          reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    NOT             reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    NUMBER          reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    TRUE            reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    FALSE           reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    $end            reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)
    RBRACE          reduce using rule 18 (print_stmt -> PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON .)


state 224

    (54) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .
    (55) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    IMPORT          reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    COMMENT         reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 54 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 233


state 225

    (57) for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 234


state 226

    (58) for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 235


state 227

    (59) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .

    IMPORT          reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    COMMENT         reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 59 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)


state 228

    (20) fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 236


state 229

    (21) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .

    IMPORT          reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    COMMENT         reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 21 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)


state 230

    (38) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .

    IMPORT          reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INT             reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    $end            reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 38 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)


state 231

    (42) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .

    IMPORT          reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    RETURN          reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    BREAK           reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    COMMENT         reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INT             reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IF              reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    $end            reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 42 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)


state 232

    (17) print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 237


state 233

    (55) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 238


state 234

    (57) for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    variable_declaration           shift and go to state 8
    expression                     shift and go to state 21
    stmt_list                      shift and go to state 239
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 235

    (58) for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    assignment                     shift and go to state 7
    expression                     shift and go to state 21
    stmt_list                      shift and go to state 240
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 236

    (20) fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .

    IMPORT          reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    COMMENT         reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 20 (fun_declaration -> FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)


state 237

    (17) print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .

    IMPORT          reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    FUN             reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    RETURN          reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    BREAK           reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    COMMENT         reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    INT             reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    STRING          reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    INTLIST         reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    IF              reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    FOR             reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    NOT             reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    $end            reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 17 (print_stmt -> PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON .)


state 238

    (55) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . import_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . assignment
    (8) stmt -> . variable_declaration
    (9) stmt -> . print_stmt
    (10) stmt -> . control_structure
    (11) stmt -> . return_stmt
    (12) stmt -> . function_call
    (13) stmt -> . break_stmt
    (14) stmt -> . empty
    (15) stmt -> . comment stmt
    (109) empty -> .
    (32) import_declaration -> . IMPORT STRING_LITERAL
    (20) fun_declaration -> . FUN return_type identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (21) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (36) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (37) assignment -> . general_type identifier ASSIGN function_call
    (38) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (39) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN function_call
    (40) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (41) assignment -> . list_type identifier ASSIGN function_call
    (42) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (43) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN function_call
    (44) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (45) assignment -> . array_type identifier ASSIGN function_call
    (46) assignment -> . identifier ASSIGN expression SEMICOLON
    (47) assignment -> . identifier ASSIGN function_call
    (33) variable_declaration -> . general_type identifier SEMICOLON
    (34) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (35) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (16) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (17) print_stmt -> . PRINT LPAREN expression PLUS function_call PLUS expression RPAREN SEMICOLON
    (18) print_stmt -> . PRINT LPAREN expression PLUS function_call RPAREN SEMICOLON
    (19) print_stmt -> . PRINT LPAREN function_call RPAREN SEMICOLON
    (48) control_structure -> . if_stmt
    (49) control_structure -> . for_stmt
    (50) control_structure -> . while_stmt
    (23) return_stmt -> . RETURN expression SEMICOLON
    (22) function_call -> . identifier LPAREN arg_list RPAREN SEMICOLON
    (28) break_stmt -> . BREAK SEMICOLON
    (107) comment -> . COMMENT
    (92) general_type -> . INT
    (93) general_type -> . FLOAT
    (94) general_type -> . DOUBLE
    (95) general_type -> . STRING
    (96) general_type -> . BOOLEAN
    (97) general_type -> . identifier
    (102) list_type -> . INTLIST
    (103) list_type -> . FLOATLIST
    (104) list_type -> . STRINGLIST
    (105) list_type -> . DOUBLELIST
    (98) array_type -> . INTARRAY
    (99) array_type -> . FLOATARRAY
    (100) array_type -> . STRINGARRAY
    (101) array_type -> . DOUBLEARRAY
    (106) identifier -> . IDENTIFIER
    (54) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (55) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (56) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (57) for_stmt -> . FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (58) for_stmt -> . FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (59) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (64) expression -> . expression PLUS expression
    (65) expression -> . expression MINUS expression
    (66) expression -> . expression MULTIPLY expression
    (67) expression -> . expression DIVIDE expression
    (68) expression -> . expression MODULUS expression
    (69) expression -> . expression AND expression
    (70) expression -> . expression OR expression
    (71) expression -> . expression EQUAL expression
    (72) expression -> . expression NOTEQUAL expression
    (73) expression -> . expression LESSTHAN expression
    (74) expression -> . expression GREATERTHAN expression
    (75) expression -> . expression LESSTHANEQUAL expression
    (76) expression -> . expression GREATERTHANEQUAL expression
    (77) expression -> . expression COMMA expression
    (78) expression -> . expression POW expression
    (79) expression -> . LPAREN expression RPAREN
    (80) expression -> . expression INCREMENT
    (81) expression -> . expression DECREMENT
    (82) expression -> . NOT expression
    (83) expression -> . identifier
    (84) expression -> . digit
    (85) expression -> . string
    (86) expression -> . boolean
    (87) expression -> . identifier LBRACKET expression RBRACKET
    (88) expression -> . identifier LBRACE expression RBRACE
    (89) digit -> . NUMBER
    (108) string -> . STRING_LITERAL
    (90) boolean -> . TRUE
    (91) boolean -> . FALSE

  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for COMMENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 109 (empty -> .)
    IMPORT          shift and go to state 15
    FUN             shift and go to state 17
    PRINT           shift and go to state 25
    RETURN          shift and go to state 29
    BREAK           shift and go to state 30
    COMMENT         shift and go to state 31
    INT             shift and go to state 32
    FLOAT           shift and go to state 33
    DOUBLE          shift and go to state 34
    STRING          shift and go to state 35
    BOOLEAN         shift and go to state 36
    INTLIST         shift and go to state 37
    FLOATLIST       shift and go to state 38
    STRINGLIST      shift and go to state 39
    DOUBLELIST      shift and go to state 40
    INTARRAY        shift and go to state 41
    FLOATARRAY      shift and go to state 42
    STRINGARRAY     shift and go to state 43
    DOUBLEARRAY     shift and go to state 44
    IDENTIFIER      shift and go to state 45
    IF              shift and go to state 46
    FOR             shift and go to state 47
    WHILE           shift and go to state 48
    LPAREN          shift and go to state 19
    NOT             shift and go to state 49
    NUMBER          shift and go to state 52
    STRING_LITERAL  shift and go to state 16
    TRUE            shift and go to state 53
    FALSE           shift and go to state 54

  ! IMPORT          [ reduce using rule 109 (empty -> .) ]
  ! FUN             [ reduce using rule 109 (empty -> .) ]
  ! PRINT           [ reduce using rule 109 (empty -> .) ]
  ! RETURN          [ reduce using rule 109 (empty -> .) ]
  ! BREAK           [ reduce using rule 109 (empty -> .) ]
  ! COMMENT         [ reduce using rule 109 (empty -> .) ]
  ! INT             [ reduce using rule 109 (empty -> .) ]
  ! FLOAT           [ reduce using rule 109 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 109 (empty -> .) ]
  ! STRING          [ reduce using rule 109 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 109 (empty -> .) ]
  ! INTLIST         [ reduce using rule 109 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 109 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 109 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 109 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 109 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 109 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 109 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 109 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 109 (empty -> .) ]
  ! IF              [ reduce using rule 109 (empty -> .) ]
  ! FOR             [ reduce using rule 109 (empty -> .) ]
  ! WHILE           [ reduce using rule 109 (empty -> .) ]
  ! LPAREN          [ reduce using rule 109 (empty -> .) ]
  ! NOT             [ reduce using rule 109 (empty -> .) ]
  ! NUMBER          [ reduce using rule 109 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 109 (empty -> .) ]
  ! TRUE            [ reduce using rule 109 (empty -> .) ]
  ! FALSE           [ reduce using rule 109 (empty -> .) ]

    expression                     shift and go to state 21
    stmt_list                      shift and go to state 241
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    import_declaration             shift and go to state 5
    fun_declaration                shift and go to state 6
    assignment                     shift and go to state 7
    variable_declaration           shift and go to state 8
    print_stmt                     shift and go to state 9
    control_structure              shift and go to state 10
    return_stmt                    shift and go to state 11
    function_call                  shift and go to state 12
    break_stmt                     shift and go to state 13
    comment                        shift and go to state 14
    identifier                     shift and go to state 18
    general_type                   shift and go to state 20
    list_type                      shift and go to state 22
    digit                          shift and go to state 23
    array_type                     shift and go to state 24
    if_stmt                        shift and go to state 26
    for_stmt                       shift and go to state 27
    while_stmt                     shift and go to state 28
    string                         shift and go to state 50
    boolean                        shift and go to state 51

state 239

    (57) for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 242


state 240

    (58) for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 243


state 241

    (55) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 244


state 242

    (57) for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .

    IMPORT          reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    COMMENT         reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 57 (for_stmt -> FOR LPAREN variable_declaration expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)


state 243

    (58) for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .

    IMPORT          reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    COMMENT         reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 58 (for_stmt -> FOR LPAREN assignment expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)


state 244

    (55) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    IMPORT          reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RETURN          reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BREAK           reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    COMMENT         reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INT             reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    $end            reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 55 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for FUN in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 0 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 0 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 0 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 3 resolved as shift
WARNING: shift/reduce conflict for FUN in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 3 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 3 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 3 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 3 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 3 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 3 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 3 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 14 resolved as shift
WARNING: shift/reduce conflict for FUN in state 14 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 14 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 14 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 14 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 14 resolved as shift
WARNING: shift/reduce conflict for INT in state 14 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 14 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 14 resolved as shift
WARNING: shift/reduce conflict for STRING in state 14 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 14 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 14 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 14 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 14 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 14 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 14 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 14 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 14 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 14 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 14 resolved as shift
WARNING: shift/reduce conflict for IF in state 14 resolved as shift
WARNING: shift/reduce conflict for FOR in state 14 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 14 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 14 resolved as shift
WARNING: shift/reduce conflict for NOT in state 14 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 14 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 14 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 14 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 14 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 98 resolved as shift
WARNING: shift/reduce conflict for POW in state 98 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 113 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 113 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 113 resolved as shift
WARNING: shift/reduce conflict for AND in state 113 resolved as shift
WARNING: shift/reduce conflict for OR in state 113 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 113 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 113 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 113 resolved as shift
WARNING: shift/reduce conflict for POW in state 113 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 113 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 114 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 114 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 114 resolved as shift
WARNING: shift/reduce conflict for AND in state 114 resolved as shift
WARNING: shift/reduce conflict for OR in state 114 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 114 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 114 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 114 resolved as shift
WARNING: shift/reduce conflict for POW in state 114 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 114 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 115 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 115 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 115 resolved as shift
WARNING: shift/reduce conflict for AND in state 115 resolved as shift
WARNING: shift/reduce conflict for OR in state 115 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 115 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 115 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 115 resolved as shift
WARNING: shift/reduce conflict for POW in state 115 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 115 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 116 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 116 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 116 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 116 resolved as shift
WARNING: shift/reduce conflict for AND in state 116 resolved as shift
WARNING: shift/reduce conflict for OR in state 116 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 116 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 116 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 116 resolved as shift
WARNING: shift/reduce conflict for POW in state 116 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 116 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 116 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 117 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 117 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 117 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 117 resolved as shift
WARNING: shift/reduce conflict for OR in state 117 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 117 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 117 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 117 resolved as shift
WARNING: shift/reduce conflict for POW in state 117 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 117 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 117 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 118 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 118 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 118 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 118 resolved as shift
WARNING: shift/reduce conflict for AND in state 118 resolved as shift
WARNING: shift/reduce conflict for OR in state 118 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 118 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 118 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 118 resolved as shift
WARNING: shift/reduce conflict for POW in state 118 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 118 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 118 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 119 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 119 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 119 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 119 resolved as shift
WARNING: shift/reduce conflict for AND in state 119 resolved as shift
WARNING: shift/reduce conflict for OR in state 119 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 119 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 119 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 119 resolved as shift
WARNING: shift/reduce conflict for POW in state 119 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 119 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 119 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 120 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 120 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 120 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 120 resolved as shift
WARNING: shift/reduce conflict for AND in state 120 resolved as shift
WARNING: shift/reduce conflict for OR in state 120 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 120 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 120 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 120 resolved as shift
WARNING: shift/reduce conflict for POW in state 120 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 120 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 120 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 121 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 121 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 121 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 121 resolved as shift
WARNING: shift/reduce conflict for AND in state 121 resolved as shift
WARNING: shift/reduce conflict for OR in state 121 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 121 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 121 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 121 resolved as shift
WARNING: shift/reduce conflict for POW in state 121 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 121 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 121 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 122 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 122 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 122 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 122 resolved as shift
WARNING: shift/reduce conflict for AND in state 122 resolved as shift
WARNING: shift/reduce conflict for OR in state 122 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 122 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 122 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 122 resolved as shift
WARNING: shift/reduce conflict for POW in state 122 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 122 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 122 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 123 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 123 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 123 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 123 resolved as shift
WARNING: shift/reduce conflict for AND in state 123 resolved as shift
WARNING: shift/reduce conflict for OR in state 123 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 123 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 123 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 123 resolved as shift
WARNING: shift/reduce conflict for POW in state 123 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 123 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 123 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 124 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 124 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 124 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 124 resolved as shift
WARNING: shift/reduce conflict for AND in state 124 resolved as shift
WARNING: shift/reduce conflict for OR in state 124 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 124 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 124 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 124 resolved as shift
WARNING: shift/reduce conflict for POW in state 124 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 124 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 124 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 125 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 125 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 125 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 125 resolved as shift
WARNING: shift/reduce conflict for AND in state 125 resolved as shift
WARNING: shift/reduce conflict for OR in state 125 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 125 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 125 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 125 resolved as shift
WARNING: shift/reduce conflict for POW in state 125 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 125 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 125 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 126 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 126 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 126 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 126 resolved as shift
WARNING: shift/reduce conflict for AND in state 126 resolved as shift
WARNING: shift/reduce conflict for OR in state 126 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 126 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 126 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 126 resolved as shift
WARNING: shift/reduce conflict for POW in state 126 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 126 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 126 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 127 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 127 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 127 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 127 resolved as shift
WARNING: shift/reduce conflict for AND in state 127 resolved as shift
WARNING: shift/reduce conflict for OR in state 127 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 127 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 127 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 127 resolved as shift
WARNING: shift/reduce conflict for POW in state 127 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 127 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 127 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 179 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 179 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 179 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 179 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 179 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 179 resolved as shift
WARNING: shift/reduce conflict for AND in state 179 resolved as shift
WARNING: shift/reduce conflict for OR in state 179 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 179 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 179 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 179 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 179 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 179 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 179 resolved as shift
WARNING: shift/reduce conflict for POW in state 179 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 179 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 179 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 193 resolved as shift
WARNING: shift/reduce conflict for FUN in state 193 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 193 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 193 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 193 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 193 resolved as shift
WARNING: shift/reduce conflict for INT in state 193 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 193 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 193 resolved as shift
WARNING: shift/reduce conflict for STRING in state 193 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 193 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 193 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 193 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 193 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 193 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 193 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 193 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 193 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 193 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 193 resolved as shift
WARNING: shift/reduce conflict for IF in state 193 resolved as shift
WARNING: shift/reduce conflict for FOR in state 193 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 193 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 193 resolved as shift
WARNING: shift/reduce conflict for NOT in state 193 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 193 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 193 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 193 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 193 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 198 resolved as shift
WARNING: shift/reduce conflict for FUN in state 198 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 198 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 198 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 198 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 198 resolved as shift
WARNING: shift/reduce conflict for INT in state 198 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 198 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 198 resolved as shift
WARNING: shift/reduce conflict for STRING in state 198 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 198 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 198 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 198 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 198 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 198 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 198 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 198 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 198 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 198 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 198 resolved as shift
WARNING: shift/reduce conflict for IF in state 198 resolved as shift
WARNING: shift/reduce conflict for FOR in state 198 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 198 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 198 resolved as shift
WARNING: shift/reduce conflict for NOT in state 198 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 198 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 198 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 198 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 198 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 200 resolved as shift
WARNING: shift/reduce conflict for FUN in state 200 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 200 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 200 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 200 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 200 resolved as shift
WARNING: shift/reduce conflict for INT in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING in state 200 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 200 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 200 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 200 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 200 resolved as shift
WARNING: shift/reduce conflict for IF in state 200 resolved as shift
WARNING: shift/reduce conflict for FOR in state 200 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 200 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 200 resolved as shift
WARNING: shift/reduce conflict for NOT in state 200 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 200 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 200 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 200 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 213 resolved as shift
WARNING: shift/reduce conflict for FUN in state 213 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 213 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 213 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 213 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 213 resolved as shift
WARNING: shift/reduce conflict for INT in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 213 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 213 resolved as shift
WARNING: shift/reduce conflict for STRING in state 213 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 213 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 213 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 213 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 213 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 213 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 213 resolved as shift
WARNING: shift/reduce conflict for IF in state 213 resolved as shift
WARNING: shift/reduce conflict for FOR in state 213 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 213 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 213 resolved as shift
WARNING: shift/reduce conflict for NOT in state 213 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 213 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 213 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 213 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 213 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 234 resolved as shift
WARNING: shift/reduce conflict for FUN in state 234 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 234 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 234 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 234 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 234 resolved as shift
WARNING: shift/reduce conflict for INT in state 234 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 234 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 234 resolved as shift
WARNING: shift/reduce conflict for STRING in state 234 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 234 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 234 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 234 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 234 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 234 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 234 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 234 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 234 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 234 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 234 resolved as shift
WARNING: shift/reduce conflict for IF in state 234 resolved as shift
WARNING: shift/reduce conflict for FOR in state 234 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 234 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 234 resolved as shift
WARNING: shift/reduce conflict for NOT in state 234 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 234 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 234 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 234 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 234 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 235 resolved as shift
WARNING: shift/reduce conflict for FUN in state 235 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 235 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 235 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 235 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 235 resolved as shift
WARNING: shift/reduce conflict for INT in state 235 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 235 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 235 resolved as shift
WARNING: shift/reduce conflict for STRING in state 235 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 235 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 235 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 235 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 235 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 235 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 235 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 235 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 235 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 235 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 235 resolved as shift
WARNING: shift/reduce conflict for IF in state 235 resolved as shift
WARNING: shift/reduce conflict for FOR in state 235 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 235 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 235 resolved as shift
WARNING: shift/reduce conflict for NOT in state 235 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 235 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 235 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 235 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 235 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 238 resolved as shift
WARNING: shift/reduce conflict for FUN in state 238 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 238 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 238 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 238 resolved as shift
WARNING: shift/reduce conflict for COMMENT in state 238 resolved as shift
WARNING: shift/reduce conflict for INT in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 238 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 238 resolved as shift
WARNING: shift/reduce conflict for STRING in state 238 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 238 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 238 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 238 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 238 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 238 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 238 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 238 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 238 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 238 resolved as shift
WARNING: shift/reduce conflict for IF in state 238 resolved as shift
WARNING: shift/reduce conflict for FOR in state 238 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 238 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 238 resolved as shift
WARNING: shift/reduce conflict for NOT in state 238 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 238 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 238 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 238 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 238 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (stmt_list -> stmt)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (stmt_list -> empty)
WARNING: rejected rule (stmt -> empty) in state 4
WARNING: reduce/reduce conflict in state 179 resolved using rule (arg_list -> expression)
WARNING: rejected rule (expression -> expression COMMA expression) in state 179
