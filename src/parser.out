Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    ARROW
    AT
    BACKSLASH
    BREAK
    DIVIDEASSIGN
    DOT
    DOUBLEQUOTE
    HASH
    INPUT
    MINUSASSIGN
    MODASSIGN
    NEW
    NULL
    PARAMS
    PIPE
    PLUSASSIGN
    RETURN
    SLASH
    TIMESASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt_list -> empty
Rule 5     stmt -> class_declaration
Rule 6     stmt -> fun_declaration
Rule 7     stmt -> import_declaration
Rule 8     stmt -> assignment
Rule 9     stmt -> variable_declaration
Rule 10    stmt -> print_stmt
Rule 11    stmt -> control_structure
Rule 12    stmt -> empty
Rule 13    class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE
Rule 14    fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
Rule 15    params -> general_type IDENTIFIER COMMA params
Rule 16    params -> general_type IDENTIFIER
Rule 17    params -> empty
Rule 18    import_declaration -> IMPORT STRING_LITERAL
Rule 19    variable_declaration -> general_type IDENTIFIER SEMICOLON
Rule 20    variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
Rule 21    variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON
Rule 22    assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON
Rule 23    assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
Rule 24    assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
Rule 25    print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 26    control_structure -> if_stmt
Rule 27    control_structure -> for_stmt
Rule 28    control_structure -> while_stmt
Rule 29    control_structure -> switch_stmt
Rule 30    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 31    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 32    if_stmt -> expression QUESTION expression COLON expression SEMICOLON
Rule 33    for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
Rule 34    while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 35    switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
Rule 36    case_stmts -> CASE expression COLON stmt_list case_stmts
Rule 37    case_stmts -> empty
Rule 38    default_stmt -> DEFAULT COLON stmt_list
Rule 39    default_stmt -> empty
Rule 40    expression -> expression PLUS expression
Rule 41    expression -> expression MINUS expression
Rule 42    expression -> expression MULTIPLY expression
Rule 43    expression -> expression DIVIDE expression
Rule 44    expression -> expression MODULUS expression
Rule 45    expression -> expression AND expression
Rule 46    expression -> expression OR expression
Rule 47    expression -> expression EQUAL expression
Rule 48    expression -> expression NOTEQUAL expression
Rule 49    expression -> expression LESSTHAN expression
Rule 50    expression -> expression GREATERTHAN expression
Rule 51    expression -> expression LESSTHANEQUAL expression
Rule 52    expression -> expression GREATERTHANEQUAL expression
Rule 53    expression -> expression INCREMENT
Rule 54    expression -> expression DECREMENT
Rule 55    expression -> expression POW expression
Rule 56    expression -> NOT expression
Rule 57    expression -> LPAREN expression RPAREN
Rule 58    expression -> IDENTIFIER
Rule 59    expression -> digit
Rule 60    expression -> STRING_LITERAL
Rule 61    expression -> boolean
Rule 62    expression -> IDENTIFIER LBRACKET expression RBRACKET
Rule 63    expression -> IDENTIFIER LBRACE expression RBRACE
Rule 64    digit -> NUMBER
Rule 65    boolean -> TRUE
Rule 66    boolean -> FALSE
Rule 67    general_type -> INT
Rule 68    general_type -> FLOAT
Rule 69    general_type -> DOUBLE
Rule 70    general_type -> STRING
Rule 71    general_type -> BOOLEAN
Rule 72    general_type -> IDENTIFIER
Rule 73    array_type -> INTARRAY
Rule 74    array_type -> FLOATARRAY
Rule 75    array_type -> STRINGARRAY
Rule 76    array_type -> DOUBLEARRAY
Rule 77    list_type -> INTLIST
Rule 78    list_type -> FLOATLIST
Rule 79    list_type -> STRINGLIST
Rule 80    list_type -> DOUBLELIST
Rule 81    empty -> <empty>

Terminals, with rules where they appear

AND                  : 45
APOSTROPHE           : 
ARROW                : 
ASSIGN               : 22 23 24
AT                   : 
BACKSLASH            : 
BOOLEAN              : 71
BREAK                : 
CASE                 : 36
CLASS                : 13
COLON                : 32 36 38
COMMA                : 15
DECREMENT            : 54
DEFAULT              : 38
DIVIDE               : 43
DIVIDEASSIGN         : 
DOT                  : 
DOUBLE               : 69
DOUBLEARRAY          : 76
DOUBLELIST           : 80
DOUBLEQUOTE          : 
ELSE                 : 31
EQUAL                : 47
FALSE                : 66
FLOAT                : 68
FLOATARRAY           : 74
FLOATLIST            : 78
FOR                  : 33
FUN                  : 14
GREATERTHAN          : 50
GREATERTHANEQUAL     : 52
HASH                 : 
IDENTIFIER           : 13 14 15 16 19 20 21 22 23 24 58 62 63 72
IF                   : 30 31
IMPORT               : 18
INCREMENT            : 53
INPUT                : 
INT                  : 67
INTARRAY             : 73
INTLIST              : 77
LBRACE               : 13 14 21 24 30 31 31 33 34 35 63
LBRACKET             : 20 23 62
LESSTHAN             : 49
LESSTHANEQUAL        : 51
LPAREN               : 14 25 30 31 33 34 35 57
MINUS                : 41
MINUSASSIGN          : 
MODASSIGN            : 
MODULUS              : 44
MULTIPLY             : 42
NEW                  : 
NOT                  : 56
NOTEQUAL             : 48
NULL                 : 
NUMBER               : 64
OR                   : 46
PARAMS               : 
PIPE                 : 
PLUS                 : 40
PLUSASSIGN           : 
POW                  : 55
PRINT                : 25
QUESTION             : 32
RBRACE               : 13 14 21 24 30 31 31 33 34 35 63
RBRACKET             : 20 23 62
RETURN               : 
RPAREN               : 14 25 30 31 33 34 35 57
SEMICOLON            : 19 20 21 22 23 24 25 32 33 33
SLASH                : 
STRING               : 70
STRINGARRAY          : 75
STRINGLIST           : 79
STRING_LITERAL       : 18 60
SWITCH               : 35
TIMESASSIGN          : 
TRUE                 : 65
WHILE                : 34
error                : 

Nonterminals, with rules where they appear

array_type           : 21 24
assignment           : 8 33
boolean              : 61
case_stmts           : 35 36
class_declaration    : 5
control_structure    : 11
default_stmt         : 35
digit                : 59
empty                : 4 12 17 37 39
expression           : 22 23 23 24 24 25 30 31 32 32 32 33 33 34 35 36 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 54 55 55 56 57 62 63
for_stmt             : 27
fun_declaration      : 6
general_type         : 15 16 19 22
if_stmt              : 26
import_declaration   : 7
list_type            : 20 23
params               : 14 15
print_stmt           : 10
program              : 0
stmt                 : 2 3
stmt_list            : 1 2 13 14 30 31 31 33 34 36 38
switch_stmt          : 29
variable_declaration : 9
while_stmt           : 28

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 3

    (2) stmt_list -> stmt . stmt_list
    (3) stmt_list -> stmt .
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! reduce/reduce conflict for $end resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for RBRACE resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 3 (stmt_list -> stmt .)
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 3 (stmt_list -> stmt .)
    RBRACE          reduce using rule 3 (stmt_list -> stmt .)
    CASE            reduce using rule 3 (stmt_list -> stmt .)
    DEFAULT         reduce using rule 3 (stmt_list -> stmt .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! $end            [ reduce using rule 81 (empty -> .) ]
  ! RBRACE          [ reduce using rule 81 (empty -> .) ]
  ! CASE            [ reduce using rule 81 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 81 (empty -> .) ]
  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    stmt                           shift and go to state 3
    stmt_list                      shift and go to state 50
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 4

    (4) stmt_list -> empty .
    (12) stmt -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 4 (stmt_list -> empty .)
    $end            reduce using rule 4 (stmt_list -> empty .)
    RBRACE          reduce using rule 4 (stmt_list -> empty .)
    CASE            reduce using rule 4 (stmt_list -> empty .)
    DEFAULT         reduce using rule 4 (stmt_list -> empty .)
    CLASS           reduce using rule 12 (stmt -> empty .)
    FUN             reduce using rule 12 (stmt -> empty .)
    IMPORT          reduce using rule 12 (stmt -> empty .)
    PRINT           reduce using rule 12 (stmt -> empty .)
    INT             reduce using rule 12 (stmt -> empty .)
    FLOAT           reduce using rule 12 (stmt -> empty .)
    DOUBLE          reduce using rule 12 (stmt -> empty .)
    STRING          reduce using rule 12 (stmt -> empty .)
    BOOLEAN         reduce using rule 12 (stmt -> empty .)
    IDENTIFIER      reduce using rule 12 (stmt -> empty .)
    INTLIST         reduce using rule 12 (stmt -> empty .)
    FLOATLIST       reduce using rule 12 (stmt -> empty .)
    STRINGLIST      reduce using rule 12 (stmt -> empty .)
    DOUBLELIST      reduce using rule 12 (stmt -> empty .)
    INTARRAY        reduce using rule 12 (stmt -> empty .)
    FLOATARRAY      reduce using rule 12 (stmt -> empty .)
    STRINGARRAY     reduce using rule 12 (stmt -> empty .)
    DOUBLEARRAY     reduce using rule 12 (stmt -> empty .)
    IF              reduce using rule 12 (stmt -> empty .)
    FOR             reduce using rule 12 (stmt -> empty .)
    WHILE           reduce using rule 12 (stmt -> empty .)
    SWITCH          reduce using rule 12 (stmt -> empty .)
    NOT             reduce using rule 12 (stmt -> empty .)
    LPAREN          reduce using rule 12 (stmt -> empty .)
    STRING_LITERAL  reduce using rule 12 (stmt -> empty .)
    NUMBER          reduce using rule 12 (stmt -> empty .)
    TRUE            reduce using rule 12 (stmt -> empty .)
    FALSE           reduce using rule 12 (stmt -> empty .)

  ! $end            [ reduce using rule 12 (stmt -> empty .) ]
  ! RBRACE          [ reduce using rule 12 (stmt -> empty .) ]
  ! CASE            [ reduce using rule 12 (stmt -> empty .) ]
  ! DEFAULT         [ reduce using rule 12 (stmt -> empty .) ]


state 5

    (5) stmt -> class_declaration .

    CLASS           reduce using rule 5 (stmt -> class_declaration .)
    FUN             reduce using rule 5 (stmt -> class_declaration .)
    IMPORT          reduce using rule 5 (stmt -> class_declaration .)
    PRINT           reduce using rule 5 (stmt -> class_declaration .)
    INT             reduce using rule 5 (stmt -> class_declaration .)
    FLOAT           reduce using rule 5 (stmt -> class_declaration .)
    DOUBLE          reduce using rule 5 (stmt -> class_declaration .)
    STRING          reduce using rule 5 (stmt -> class_declaration .)
    BOOLEAN         reduce using rule 5 (stmt -> class_declaration .)
    IDENTIFIER      reduce using rule 5 (stmt -> class_declaration .)
    INTLIST         reduce using rule 5 (stmt -> class_declaration .)
    FLOATLIST       reduce using rule 5 (stmt -> class_declaration .)
    STRINGLIST      reduce using rule 5 (stmt -> class_declaration .)
    DOUBLELIST      reduce using rule 5 (stmt -> class_declaration .)
    INTARRAY        reduce using rule 5 (stmt -> class_declaration .)
    FLOATARRAY      reduce using rule 5 (stmt -> class_declaration .)
    STRINGARRAY     reduce using rule 5 (stmt -> class_declaration .)
    DOUBLEARRAY     reduce using rule 5 (stmt -> class_declaration .)
    IF              reduce using rule 5 (stmt -> class_declaration .)
    FOR             reduce using rule 5 (stmt -> class_declaration .)
    WHILE           reduce using rule 5 (stmt -> class_declaration .)
    SWITCH          reduce using rule 5 (stmt -> class_declaration .)
    NOT             reduce using rule 5 (stmt -> class_declaration .)
    LPAREN          reduce using rule 5 (stmt -> class_declaration .)
    STRING_LITERAL  reduce using rule 5 (stmt -> class_declaration .)
    NUMBER          reduce using rule 5 (stmt -> class_declaration .)
    TRUE            reduce using rule 5 (stmt -> class_declaration .)
    FALSE           reduce using rule 5 (stmt -> class_declaration .)
    $end            reduce using rule 5 (stmt -> class_declaration .)
    RBRACE          reduce using rule 5 (stmt -> class_declaration .)
    CASE            reduce using rule 5 (stmt -> class_declaration .)
    DEFAULT         reduce using rule 5 (stmt -> class_declaration .)


state 6

    (6) stmt -> fun_declaration .

    CLASS           reduce using rule 6 (stmt -> fun_declaration .)
    FUN             reduce using rule 6 (stmt -> fun_declaration .)
    IMPORT          reduce using rule 6 (stmt -> fun_declaration .)
    PRINT           reduce using rule 6 (stmt -> fun_declaration .)
    INT             reduce using rule 6 (stmt -> fun_declaration .)
    FLOAT           reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLE          reduce using rule 6 (stmt -> fun_declaration .)
    STRING          reduce using rule 6 (stmt -> fun_declaration .)
    BOOLEAN         reduce using rule 6 (stmt -> fun_declaration .)
    IDENTIFIER      reduce using rule 6 (stmt -> fun_declaration .)
    INTLIST         reduce using rule 6 (stmt -> fun_declaration .)
    FLOATLIST       reduce using rule 6 (stmt -> fun_declaration .)
    STRINGLIST      reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLELIST      reduce using rule 6 (stmt -> fun_declaration .)
    INTARRAY        reduce using rule 6 (stmt -> fun_declaration .)
    FLOATARRAY      reduce using rule 6 (stmt -> fun_declaration .)
    STRINGARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLEARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    IF              reduce using rule 6 (stmt -> fun_declaration .)
    FOR             reduce using rule 6 (stmt -> fun_declaration .)
    WHILE           reduce using rule 6 (stmt -> fun_declaration .)
    SWITCH          reduce using rule 6 (stmt -> fun_declaration .)
    NOT             reduce using rule 6 (stmt -> fun_declaration .)
    LPAREN          reduce using rule 6 (stmt -> fun_declaration .)
    STRING_LITERAL  reduce using rule 6 (stmt -> fun_declaration .)
    NUMBER          reduce using rule 6 (stmt -> fun_declaration .)
    TRUE            reduce using rule 6 (stmt -> fun_declaration .)
    FALSE           reduce using rule 6 (stmt -> fun_declaration .)
    $end            reduce using rule 6 (stmt -> fun_declaration .)
    RBRACE          reduce using rule 6 (stmt -> fun_declaration .)
    CASE            reduce using rule 6 (stmt -> fun_declaration .)
    DEFAULT         reduce using rule 6 (stmt -> fun_declaration .)


state 7

    (7) stmt -> import_declaration .

    CLASS           reduce using rule 7 (stmt -> import_declaration .)
    FUN             reduce using rule 7 (stmt -> import_declaration .)
    IMPORT          reduce using rule 7 (stmt -> import_declaration .)
    PRINT           reduce using rule 7 (stmt -> import_declaration .)
    INT             reduce using rule 7 (stmt -> import_declaration .)
    FLOAT           reduce using rule 7 (stmt -> import_declaration .)
    DOUBLE          reduce using rule 7 (stmt -> import_declaration .)
    STRING          reduce using rule 7 (stmt -> import_declaration .)
    BOOLEAN         reduce using rule 7 (stmt -> import_declaration .)
    IDENTIFIER      reduce using rule 7 (stmt -> import_declaration .)
    INTLIST         reduce using rule 7 (stmt -> import_declaration .)
    FLOATLIST       reduce using rule 7 (stmt -> import_declaration .)
    STRINGLIST      reduce using rule 7 (stmt -> import_declaration .)
    DOUBLELIST      reduce using rule 7 (stmt -> import_declaration .)
    INTARRAY        reduce using rule 7 (stmt -> import_declaration .)
    FLOATARRAY      reduce using rule 7 (stmt -> import_declaration .)
    STRINGARRAY     reduce using rule 7 (stmt -> import_declaration .)
    DOUBLEARRAY     reduce using rule 7 (stmt -> import_declaration .)
    IF              reduce using rule 7 (stmt -> import_declaration .)
    FOR             reduce using rule 7 (stmt -> import_declaration .)
    WHILE           reduce using rule 7 (stmt -> import_declaration .)
    SWITCH          reduce using rule 7 (stmt -> import_declaration .)
    NOT             reduce using rule 7 (stmt -> import_declaration .)
    LPAREN          reduce using rule 7 (stmt -> import_declaration .)
    STRING_LITERAL  reduce using rule 7 (stmt -> import_declaration .)
    NUMBER          reduce using rule 7 (stmt -> import_declaration .)
    TRUE            reduce using rule 7 (stmt -> import_declaration .)
    FALSE           reduce using rule 7 (stmt -> import_declaration .)
    $end            reduce using rule 7 (stmt -> import_declaration .)
    RBRACE          reduce using rule 7 (stmt -> import_declaration .)
    CASE            reduce using rule 7 (stmt -> import_declaration .)
    DEFAULT         reduce using rule 7 (stmt -> import_declaration .)


state 8

    (8) stmt -> assignment .

    CLASS           reduce using rule 8 (stmt -> assignment .)
    FUN             reduce using rule 8 (stmt -> assignment .)
    IMPORT          reduce using rule 8 (stmt -> assignment .)
    PRINT           reduce using rule 8 (stmt -> assignment .)
    INT             reduce using rule 8 (stmt -> assignment .)
    FLOAT           reduce using rule 8 (stmt -> assignment .)
    DOUBLE          reduce using rule 8 (stmt -> assignment .)
    STRING          reduce using rule 8 (stmt -> assignment .)
    BOOLEAN         reduce using rule 8 (stmt -> assignment .)
    IDENTIFIER      reduce using rule 8 (stmt -> assignment .)
    INTLIST         reduce using rule 8 (stmt -> assignment .)
    FLOATLIST       reduce using rule 8 (stmt -> assignment .)
    STRINGLIST      reduce using rule 8 (stmt -> assignment .)
    DOUBLELIST      reduce using rule 8 (stmt -> assignment .)
    INTARRAY        reduce using rule 8 (stmt -> assignment .)
    FLOATARRAY      reduce using rule 8 (stmt -> assignment .)
    STRINGARRAY     reduce using rule 8 (stmt -> assignment .)
    DOUBLEARRAY     reduce using rule 8 (stmt -> assignment .)
    IF              reduce using rule 8 (stmt -> assignment .)
    FOR             reduce using rule 8 (stmt -> assignment .)
    WHILE           reduce using rule 8 (stmt -> assignment .)
    SWITCH          reduce using rule 8 (stmt -> assignment .)
    NOT             reduce using rule 8 (stmt -> assignment .)
    LPAREN          reduce using rule 8 (stmt -> assignment .)
    STRING_LITERAL  reduce using rule 8 (stmt -> assignment .)
    NUMBER          reduce using rule 8 (stmt -> assignment .)
    TRUE            reduce using rule 8 (stmt -> assignment .)
    FALSE           reduce using rule 8 (stmt -> assignment .)
    $end            reduce using rule 8 (stmt -> assignment .)
    RBRACE          reduce using rule 8 (stmt -> assignment .)
    CASE            reduce using rule 8 (stmt -> assignment .)
    DEFAULT         reduce using rule 8 (stmt -> assignment .)


state 9

    (9) stmt -> variable_declaration .

    CLASS           reduce using rule 9 (stmt -> variable_declaration .)
    FUN             reduce using rule 9 (stmt -> variable_declaration .)
    IMPORT          reduce using rule 9 (stmt -> variable_declaration .)
    PRINT           reduce using rule 9 (stmt -> variable_declaration .)
    INT             reduce using rule 9 (stmt -> variable_declaration .)
    FLOAT           reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLE          reduce using rule 9 (stmt -> variable_declaration .)
    STRING          reduce using rule 9 (stmt -> variable_declaration .)
    BOOLEAN         reduce using rule 9 (stmt -> variable_declaration .)
    IDENTIFIER      reduce using rule 9 (stmt -> variable_declaration .)
    INTLIST         reduce using rule 9 (stmt -> variable_declaration .)
    FLOATLIST       reduce using rule 9 (stmt -> variable_declaration .)
    STRINGLIST      reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLELIST      reduce using rule 9 (stmt -> variable_declaration .)
    INTARRAY        reduce using rule 9 (stmt -> variable_declaration .)
    FLOATARRAY      reduce using rule 9 (stmt -> variable_declaration .)
    STRINGARRAY     reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLEARRAY     reduce using rule 9 (stmt -> variable_declaration .)
    IF              reduce using rule 9 (stmt -> variable_declaration .)
    FOR             reduce using rule 9 (stmt -> variable_declaration .)
    WHILE           reduce using rule 9 (stmt -> variable_declaration .)
    SWITCH          reduce using rule 9 (stmt -> variable_declaration .)
    NOT             reduce using rule 9 (stmt -> variable_declaration .)
    LPAREN          reduce using rule 9 (stmt -> variable_declaration .)
    STRING_LITERAL  reduce using rule 9 (stmt -> variable_declaration .)
    NUMBER          reduce using rule 9 (stmt -> variable_declaration .)
    TRUE            reduce using rule 9 (stmt -> variable_declaration .)
    FALSE           reduce using rule 9 (stmt -> variable_declaration .)
    $end            reduce using rule 9 (stmt -> variable_declaration .)
    RBRACE          reduce using rule 9 (stmt -> variable_declaration .)
    CASE            reduce using rule 9 (stmt -> variable_declaration .)
    DEFAULT         reduce using rule 9 (stmt -> variable_declaration .)


state 10

    (10) stmt -> print_stmt .

    CLASS           reduce using rule 10 (stmt -> print_stmt .)
    FUN             reduce using rule 10 (stmt -> print_stmt .)
    IMPORT          reduce using rule 10 (stmt -> print_stmt .)
    PRINT           reduce using rule 10 (stmt -> print_stmt .)
    INT             reduce using rule 10 (stmt -> print_stmt .)
    FLOAT           reduce using rule 10 (stmt -> print_stmt .)
    DOUBLE          reduce using rule 10 (stmt -> print_stmt .)
    STRING          reduce using rule 10 (stmt -> print_stmt .)
    BOOLEAN         reduce using rule 10 (stmt -> print_stmt .)
    IDENTIFIER      reduce using rule 10 (stmt -> print_stmt .)
    INTLIST         reduce using rule 10 (stmt -> print_stmt .)
    FLOATLIST       reduce using rule 10 (stmt -> print_stmt .)
    STRINGLIST      reduce using rule 10 (stmt -> print_stmt .)
    DOUBLELIST      reduce using rule 10 (stmt -> print_stmt .)
    INTARRAY        reduce using rule 10 (stmt -> print_stmt .)
    FLOATARRAY      reduce using rule 10 (stmt -> print_stmt .)
    STRINGARRAY     reduce using rule 10 (stmt -> print_stmt .)
    DOUBLEARRAY     reduce using rule 10 (stmt -> print_stmt .)
    IF              reduce using rule 10 (stmt -> print_stmt .)
    FOR             reduce using rule 10 (stmt -> print_stmt .)
    WHILE           reduce using rule 10 (stmt -> print_stmt .)
    SWITCH          reduce using rule 10 (stmt -> print_stmt .)
    NOT             reduce using rule 10 (stmt -> print_stmt .)
    LPAREN          reduce using rule 10 (stmt -> print_stmt .)
    STRING_LITERAL  reduce using rule 10 (stmt -> print_stmt .)
    NUMBER          reduce using rule 10 (stmt -> print_stmt .)
    TRUE            reduce using rule 10 (stmt -> print_stmt .)
    FALSE           reduce using rule 10 (stmt -> print_stmt .)
    $end            reduce using rule 10 (stmt -> print_stmt .)
    RBRACE          reduce using rule 10 (stmt -> print_stmt .)
    CASE            reduce using rule 10 (stmt -> print_stmt .)
    DEFAULT         reduce using rule 10 (stmt -> print_stmt .)


state 11

    (11) stmt -> control_structure .

    CLASS           reduce using rule 11 (stmt -> control_structure .)
    FUN             reduce using rule 11 (stmt -> control_structure .)
    IMPORT          reduce using rule 11 (stmt -> control_structure .)
    PRINT           reduce using rule 11 (stmt -> control_structure .)
    INT             reduce using rule 11 (stmt -> control_structure .)
    FLOAT           reduce using rule 11 (stmt -> control_structure .)
    DOUBLE          reduce using rule 11 (stmt -> control_structure .)
    STRING          reduce using rule 11 (stmt -> control_structure .)
    BOOLEAN         reduce using rule 11 (stmt -> control_structure .)
    IDENTIFIER      reduce using rule 11 (stmt -> control_structure .)
    INTLIST         reduce using rule 11 (stmt -> control_structure .)
    FLOATLIST       reduce using rule 11 (stmt -> control_structure .)
    STRINGLIST      reduce using rule 11 (stmt -> control_structure .)
    DOUBLELIST      reduce using rule 11 (stmt -> control_structure .)
    INTARRAY        reduce using rule 11 (stmt -> control_structure .)
    FLOATARRAY      reduce using rule 11 (stmt -> control_structure .)
    STRINGARRAY     reduce using rule 11 (stmt -> control_structure .)
    DOUBLEARRAY     reduce using rule 11 (stmt -> control_structure .)
    IF              reduce using rule 11 (stmt -> control_structure .)
    FOR             reduce using rule 11 (stmt -> control_structure .)
    WHILE           reduce using rule 11 (stmt -> control_structure .)
    SWITCH          reduce using rule 11 (stmt -> control_structure .)
    NOT             reduce using rule 11 (stmt -> control_structure .)
    LPAREN          reduce using rule 11 (stmt -> control_structure .)
    STRING_LITERAL  reduce using rule 11 (stmt -> control_structure .)
    NUMBER          reduce using rule 11 (stmt -> control_structure .)
    TRUE            reduce using rule 11 (stmt -> control_structure .)
    FALSE           reduce using rule 11 (stmt -> control_structure .)
    $end            reduce using rule 11 (stmt -> control_structure .)
    RBRACE          reduce using rule 11 (stmt -> control_structure .)
    CASE            reduce using rule 11 (stmt -> control_structure .)
    DEFAULT         reduce using rule 11 (stmt -> control_structure .)


state 12

    (13) class_declaration -> CLASS . IDENTIFIER LBRACE stmt_list RBRACE

    IDENTIFIER      shift and go to state 51


state 13

    (72) general_type -> IDENTIFIER .
    (58) expression -> IDENTIFIER .
    (62) expression -> IDENTIFIER . LBRACKET expression RBRACKET
    (63) expression -> IDENTIFIER . LBRACE expression RBRACE

    IDENTIFIER      reduce using rule 72 (general_type -> IDENTIFIER .)
    QUESTION        reduce using rule 58 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 58 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 58 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 58 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 58 (expression -> IDENTIFIER .)
    MODULUS         reduce using rule 58 (expression -> IDENTIFIER .)
    AND             reduce using rule 58 (expression -> IDENTIFIER .)
    OR              reduce using rule 58 (expression -> IDENTIFIER .)
    EQUAL           reduce using rule 58 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 58 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 58 (expression -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 58 (expression -> IDENTIFIER .)
    LESSTHANEQUAL   reduce using rule 58 (expression -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 58 (expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 58 (expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 58 (expression -> IDENTIFIER .)
    POW             reduce using rule 58 (expression -> IDENTIFIER .)
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 53


state 14

    (14) fun_declaration -> FUN . IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE

    IDENTIFIER      shift and go to state 54


state 15

    (57) expression -> LPAREN . expression RPAREN
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 55
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 16

    (18) import_declaration -> IMPORT . STRING_LITERAL

    STRING_LITERAL  shift and go to state 57


state 17

    (60) expression -> STRING_LITERAL .

    QUESTION        reduce using rule 60 (expression -> STRING_LITERAL .)
    PLUS            reduce using rule 60 (expression -> STRING_LITERAL .)
    MINUS           reduce using rule 60 (expression -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 60 (expression -> STRING_LITERAL .)
    DIVIDE          reduce using rule 60 (expression -> STRING_LITERAL .)
    MODULUS         reduce using rule 60 (expression -> STRING_LITERAL .)
    AND             reduce using rule 60 (expression -> STRING_LITERAL .)
    OR              reduce using rule 60 (expression -> STRING_LITERAL .)
    EQUAL           reduce using rule 60 (expression -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 60 (expression -> STRING_LITERAL .)
    LESSTHAN        reduce using rule 60 (expression -> STRING_LITERAL .)
    GREATERTHAN     reduce using rule 60 (expression -> STRING_LITERAL .)
    LESSTHANEQUAL   reduce using rule 60 (expression -> STRING_LITERAL .)
    GREATERTHANEQUAL reduce using rule 60 (expression -> STRING_LITERAL .)
    INCREMENT       reduce using rule 60 (expression -> STRING_LITERAL .)
    DECREMENT       reduce using rule 60 (expression -> STRING_LITERAL .)
    POW             reduce using rule 60 (expression -> STRING_LITERAL .)
    RPAREN          reduce using rule 60 (expression -> STRING_LITERAL .)
    RBRACKET        reduce using rule 60 (expression -> STRING_LITERAL .)
    RBRACE          reduce using rule 60 (expression -> STRING_LITERAL .)
    COLON           reduce using rule 60 (expression -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 60 (expression -> STRING_LITERAL .)


state 18

    (22) assignment -> general_type . IDENTIFIER ASSIGN expression SEMICOLON
    (19) variable_declaration -> general_type . IDENTIFIER SEMICOLON

    IDENTIFIER      shift and go to state 58


state 19

    (32) if_stmt -> expression . QUESTION expression COLON expression SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    QUESTION        shift and go to state 59
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 20

    (23) assignment -> list_type . IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (20) variable_declaration -> list_type . IDENTIFIER LBRACKET RBRACKET SEMICOLON

    IDENTIFIER      shift and go to state 76


state 21

    (24) assignment -> array_type . IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (21) variable_declaration -> array_type . IDENTIFIER LBRACE RBRACE SEMICOLON

    IDENTIFIER      shift and go to state 77


state 22

    (25) print_stmt -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 78


state 23

    (26) control_structure -> if_stmt .

    CLASS           reduce using rule 26 (control_structure -> if_stmt .)
    FUN             reduce using rule 26 (control_structure -> if_stmt .)
    IMPORT          reduce using rule 26 (control_structure -> if_stmt .)
    PRINT           reduce using rule 26 (control_structure -> if_stmt .)
    INT             reduce using rule 26 (control_structure -> if_stmt .)
    FLOAT           reduce using rule 26 (control_structure -> if_stmt .)
    DOUBLE          reduce using rule 26 (control_structure -> if_stmt .)
    STRING          reduce using rule 26 (control_structure -> if_stmt .)
    BOOLEAN         reduce using rule 26 (control_structure -> if_stmt .)
    IDENTIFIER      reduce using rule 26 (control_structure -> if_stmt .)
    INTLIST         reduce using rule 26 (control_structure -> if_stmt .)
    FLOATLIST       reduce using rule 26 (control_structure -> if_stmt .)
    STRINGLIST      reduce using rule 26 (control_structure -> if_stmt .)
    DOUBLELIST      reduce using rule 26 (control_structure -> if_stmt .)
    INTARRAY        reduce using rule 26 (control_structure -> if_stmt .)
    FLOATARRAY      reduce using rule 26 (control_structure -> if_stmt .)
    STRINGARRAY     reduce using rule 26 (control_structure -> if_stmt .)
    DOUBLEARRAY     reduce using rule 26 (control_structure -> if_stmt .)
    IF              reduce using rule 26 (control_structure -> if_stmt .)
    FOR             reduce using rule 26 (control_structure -> if_stmt .)
    WHILE           reduce using rule 26 (control_structure -> if_stmt .)
    SWITCH          reduce using rule 26 (control_structure -> if_stmt .)
    NOT             reduce using rule 26 (control_structure -> if_stmt .)
    LPAREN          reduce using rule 26 (control_structure -> if_stmt .)
    STRING_LITERAL  reduce using rule 26 (control_structure -> if_stmt .)
    NUMBER          reduce using rule 26 (control_structure -> if_stmt .)
    TRUE            reduce using rule 26 (control_structure -> if_stmt .)
    FALSE           reduce using rule 26 (control_structure -> if_stmt .)
    $end            reduce using rule 26 (control_structure -> if_stmt .)
    RBRACE          reduce using rule 26 (control_structure -> if_stmt .)
    CASE            reduce using rule 26 (control_structure -> if_stmt .)
    DEFAULT         reduce using rule 26 (control_structure -> if_stmt .)


state 24

    (27) control_structure -> for_stmt .

    CLASS           reduce using rule 27 (control_structure -> for_stmt .)
    FUN             reduce using rule 27 (control_structure -> for_stmt .)
    IMPORT          reduce using rule 27 (control_structure -> for_stmt .)
    PRINT           reduce using rule 27 (control_structure -> for_stmt .)
    INT             reduce using rule 27 (control_structure -> for_stmt .)
    FLOAT           reduce using rule 27 (control_structure -> for_stmt .)
    DOUBLE          reduce using rule 27 (control_structure -> for_stmt .)
    STRING          reduce using rule 27 (control_structure -> for_stmt .)
    BOOLEAN         reduce using rule 27 (control_structure -> for_stmt .)
    IDENTIFIER      reduce using rule 27 (control_structure -> for_stmt .)
    INTLIST         reduce using rule 27 (control_structure -> for_stmt .)
    FLOATLIST       reduce using rule 27 (control_structure -> for_stmt .)
    STRINGLIST      reduce using rule 27 (control_structure -> for_stmt .)
    DOUBLELIST      reduce using rule 27 (control_structure -> for_stmt .)
    INTARRAY        reduce using rule 27 (control_structure -> for_stmt .)
    FLOATARRAY      reduce using rule 27 (control_structure -> for_stmt .)
    STRINGARRAY     reduce using rule 27 (control_structure -> for_stmt .)
    DOUBLEARRAY     reduce using rule 27 (control_structure -> for_stmt .)
    IF              reduce using rule 27 (control_structure -> for_stmt .)
    FOR             reduce using rule 27 (control_structure -> for_stmt .)
    WHILE           reduce using rule 27 (control_structure -> for_stmt .)
    SWITCH          reduce using rule 27 (control_structure -> for_stmt .)
    NOT             reduce using rule 27 (control_structure -> for_stmt .)
    LPAREN          reduce using rule 27 (control_structure -> for_stmt .)
    STRING_LITERAL  reduce using rule 27 (control_structure -> for_stmt .)
    NUMBER          reduce using rule 27 (control_structure -> for_stmt .)
    TRUE            reduce using rule 27 (control_structure -> for_stmt .)
    FALSE           reduce using rule 27 (control_structure -> for_stmt .)
    $end            reduce using rule 27 (control_structure -> for_stmt .)
    RBRACE          reduce using rule 27 (control_structure -> for_stmt .)
    CASE            reduce using rule 27 (control_structure -> for_stmt .)
    DEFAULT         reduce using rule 27 (control_structure -> for_stmt .)


state 25

    (28) control_structure -> while_stmt .

    CLASS           reduce using rule 28 (control_structure -> while_stmt .)
    FUN             reduce using rule 28 (control_structure -> while_stmt .)
    IMPORT          reduce using rule 28 (control_structure -> while_stmt .)
    PRINT           reduce using rule 28 (control_structure -> while_stmt .)
    INT             reduce using rule 28 (control_structure -> while_stmt .)
    FLOAT           reduce using rule 28 (control_structure -> while_stmt .)
    DOUBLE          reduce using rule 28 (control_structure -> while_stmt .)
    STRING          reduce using rule 28 (control_structure -> while_stmt .)
    BOOLEAN         reduce using rule 28 (control_structure -> while_stmt .)
    IDENTIFIER      reduce using rule 28 (control_structure -> while_stmt .)
    INTLIST         reduce using rule 28 (control_structure -> while_stmt .)
    FLOATLIST       reduce using rule 28 (control_structure -> while_stmt .)
    STRINGLIST      reduce using rule 28 (control_structure -> while_stmt .)
    DOUBLELIST      reduce using rule 28 (control_structure -> while_stmt .)
    INTARRAY        reduce using rule 28 (control_structure -> while_stmt .)
    FLOATARRAY      reduce using rule 28 (control_structure -> while_stmt .)
    STRINGARRAY     reduce using rule 28 (control_structure -> while_stmt .)
    DOUBLEARRAY     reduce using rule 28 (control_structure -> while_stmt .)
    IF              reduce using rule 28 (control_structure -> while_stmt .)
    FOR             reduce using rule 28 (control_structure -> while_stmt .)
    WHILE           reduce using rule 28 (control_structure -> while_stmt .)
    SWITCH          reduce using rule 28 (control_structure -> while_stmt .)
    NOT             reduce using rule 28 (control_structure -> while_stmt .)
    LPAREN          reduce using rule 28 (control_structure -> while_stmt .)
    STRING_LITERAL  reduce using rule 28 (control_structure -> while_stmt .)
    NUMBER          reduce using rule 28 (control_structure -> while_stmt .)
    TRUE            reduce using rule 28 (control_structure -> while_stmt .)
    FALSE           reduce using rule 28 (control_structure -> while_stmt .)
    $end            reduce using rule 28 (control_structure -> while_stmt .)
    RBRACE          reduce using rule 28 (control_structure -> while_stmt .)
    CASE            reduce using rule 28 (control_structure -> while_stmt .)
    DEFAULT         reduce using rule 28 (control_structure -> while_stmt .)


state 26

    (29) control_structure -> switch_stmt .

    CLASS           reduce using rule 29 (control_structure -> switch_stmt .)
    FUN             reduce using rule 29 (control_structure -> switch_stmt .)
    IMPORT          reduce using rule 29 (control_structure -> switch_stmt .)
    PRINT           reduce using rule 29 (control_structure -> switch_stmt .)
    INT             reduce using rule 29 (control_structure -> switch_stmt .)
    FLOAT           reduce using rule 29 (control_structure -> switch_stmt .)
    DOUBLE          reduce using rule 29 (control_structure -> switch_stmt .)
    STRING          reduce using rule 29 (control_structure -> switch_stmt .)
    BOOLEAN         reduce using rule 29 (control_structure -> switch_stmt .)
    IDENTIFIER      reduce using rule 29 (control_structure -> switch_stmt .)
    INTLIST         reduce using rule 29 (control_structure -> switch_stmt .)
    FLOATLIST       reduce using rule 29 (control_structure -> switch_stmt .)
    STRINGLIST      reduce using rule 29 (control_structure -> switch_stmt .)
    DOUBLELIST      reduce using rule 29 (control_structure -> switch_stmt .)
    INTARRAY        reduce using rule 29 (control_structure -> switch_stmt .)
    FLOATARRAY      reduce using rule 29 (control_structure -> switch_stmt .)
    STRINGARRAY     reduce using rule 29 (control_structure -> switch_stmt .)
    DOUBLEARRAY     reduce using rule 29 (control_structure -> switch_stmt .)
    IF              reduce using rule 29 (control_structure -> switch_stmt .)
    FOR             reduce using rule 29 (control_structure -> switch_stmt .)
    WHILE           reduce using rule 29 (control_structure -> switch_stmt .)
    SWITCH          reduce using rule 29 (control_structure -> switch_stmt .)
    NOT             reduce using rule 29 (control_structure -> switch_stmt .)
    LPAREN          reduce using rule 29 (control_structure -> switch_stmt .)
    STRING_LITERAL  reduce using rule 29 (control_structure -> switch_stmt .)
    NUMBER          reduce using rule 29 (control_structure -> switch_stmt .)
    TRUE            reduce using rule 29 (control_structure -> switch_stmt .)
    FALSE           reduce using rule 29 (control_structure -> switch_stmt .)
    $end            reduce using rule 29 (control_structure -> switch_stmt .)
    RBRACE          reduce using rule 29 (control_structure -> switch_stmt .)
    CASE            reduce using rule 29 (control_structure -> switch_stmt .)
    DEFAULT         reduce using rule 29 (control_structure -> switch_stmt .)


state 27

    (67) general_type -> INT .

    IDENTIFIER      reduce using rule 67 (general_type -> INT .)


state 28

    (68) general_type -> FLOAT .

    IDENTIFIER      reduce using rule 68 (general_type -> FLOAT .)


state 29

    (69) general_type -> DOUBLE .

    IDENTIFIER      reduce using rule 69 (general_type -> DOUBLE .)


state 30

    (70) general_type -> STRING .

    IDENTIFIER      reduce using rule 70 (general_type -> STRING .)


state 31

    (71) general_type -> BOOLEAN .

    IDENTIFIER      reduce using rule 71 (general_type -> BOOLEAN .)


state 32

    (77) list_type -> INTLIST .

    IDENTIFIER      reduce using rule 77 (list_type -> INTLIST .)


state 33

    (78) list_type -> FLOATLIST .

    IDENTIFIER      reduce using rule 78 (list_type -> FLOATLIST .)


state 34

    (79) list_type -> STRINGLIST .

    IDENTIFIER      reduce using rule 79 (list_type -> STRINGLIST .)


state 35

    (80) list_type -> DOUBLELIST .

    IDENTIFIER      reduce using rule 80 (list_type -> DOUBLELIST .)


state 36

    (73) array_type -> INTARRAY .

    IDENTIFIER      reduce using rule 73 (array_type -> INTARRAY .)


state 37

    (74) array_type -> FLOATARRAY .

    IDENTIFIER      reduce using rule 74 (array_type -> FLOATARRAY .)


state 38

    (75) array_type -> STRINGARRAY .

    IDENTIFIER      reduce using rule 75 (array_type -> STRINGARRAY .)


state 39

    (76) array_type -> DOUBLEARRAY .

    IDENTIFIER      reduce using rule 76 (array_type -> DOUBLEARRAY .)


state 40

    (30) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 79


state 41

    (33) for_stmt -> FOR . LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 80


state 42

    (34) while_stmt -> WHILE . LPAREN expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 81


state 43

    (35) switch_stmt -> SWITCH . LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE

    LPAREN          shift and go to state 82


state 44

    (56) expression -> NOT . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 83
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 45

    (59) expression -> digit .

    QUESTION        reduce using rule 59 (expression -> digit .)
    PLUS            reduce using rule 59 (expression -> digit .)
    MINUS           reduce using rule 59 (expression -> digit .)
    MULTIPLY        reduce using rule 59 (expression -> digit .)
    DIVIDE          reduce using rule 59 (expression -> digit .)
    MODULUS         reduce using rule 59 (expression -> digit .)
    AND             reduce using rule 59 (expression -> digit .)
    OR              reduce using rule 59 (expression -> digit .)
    EQUAL           reduce using rule 59 (expression -> digit .)
    NOTEQUAL        reduce using rule 59 (expression -> digit .)
    LESSTHAN        reduce using rule 59 (expression -> digit .)
    GREATERTHAN     reduce using rule 59 (expression -> digit .)
    LESSTHANEQUAL   reduce using rule 59 (expression -> digit .)
    GREATERTHANEQUAL reduce using rule 59 (expression -> digit .)
    INCREMENT       reduce using rule 59 (expression -> digit .)
    DECREMENT       reduce using rule 59 (expression -> digit .)
    POW             reduce using rule 59 (expression -> digit .)
    RPAREN          reduce using rule 59 (expression -> digit .)
    RBRACKET        reduce using rule 59 (expression -> digit .)
    RBRACE          reduce using rule 59 (expression -> digit .)
    COLON           reduce using rule 59 (expression -> digit .)
    SEMICOLON       reduce using rule 59 (expression -> digit .)


state 46

    (61) expression -> boolean .

    QUESTION        reduce using rule 61 (expression -> boolean .)
    PLUS            reduce using rule 61 (expression -> boolean .)
    MINUS           reduce using rule 61 (expression -> boolean .)
    MULTIPLY        reduce using rule 61 (expression -> boolean .)
    DIVIDE          reduce using rule 61 (expression -> boolean .)
    MODULUS         reduce using rule 61 (expression -> boolean .)
    AND             reduce using rule 61 (expression -> boolean .)
    OR              reduce using rule 61 (expression -> boolean .)
    EQUAL           reduce using rule 61 (expression -> boolean .)
    NOTEQUAL        reduce using rule 61 (expression -> boolean .)
    LESSTHAN        reduce using rule 61 (expression -> boolean .)
    GREATERTHAN     reduce using rule 61 (expression -> boolean .)
    LESSTHANEQUAL   reduce using rule 61 (expression -> boolean .)
    GREATERTHANEQUAL reduce using rule 61 (expression -> boolean .)
    INCREMENT       reduce using rule 61 (expression -> boolean .)
    DECREMENT       reduce using rule 61 (expression -> boolean .)
    POW             reduce using rule 61 (expression -> boolean .)
    RPAREN          reduce using rule 61 (expression -> boolean .)
    RBRACKET        reduce using rule 61 (expression -> boolean .)
    RBRACE          reduce using rule 61 (expression -> boolean .)
    COLON           reduce using rule 61 (expression -> boolean .)
    SEMICOLON       reduce using rule 61 (expression -> boolean .)


state 47

    (64) digit -> NUMBER .

    QUESTION        reduce using rule 64 (digit -> NUMBER .)
    PLUS            reduce using rule 64 (digit -> NUMBER .)
    MINUS           reduce using rule 64 (digit -> NUMBER .)
    MULTIPLY        reduce using rule 64 (digit -> NUMBER .)
    DIVIDE          reduce using rule 64 (digit -> NUMBER .)
    MODULUS         reduce using rule 64 (digit -> NUMBER .)
    AND             reduce using rule 64 (digit -> NUMBER .)
    OR              reduce using rule 64 (digit -> NUMBER .)
    EQUAL           reduce using rule 64 (digit -> NUMBER .)
    NOTEQUAL        reduce using rule 64 (digit -> NUMBER .)
    LESSTHAN        reduce using rule 64 (digit -> NUMBER .)
    GREATERTHAN     reduce using rule 64 (digit -> NUMBER .)
    LESSTHANEQUAL   reduce using rule 64 (digit -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 64 (digit -> NUMBER .)
    INCREMENT       reduce using rule 64 (digit -> NUMBER .)
    DECREMENT       reduce using rule 64 (digit -> NUMBER .)
    POW             reduce using rule 64 (digit -> NUMBER .)
    RPAREN          reduce using rule 64 (digit -> NUMBER .)
    RBRACKET        reduce using rule 64 (digit -> NUMBER .)
    RBRACE          reduce using rule 64 (digit -> NUMBER .)
    COLON           reduce using rule 64 (digit -> NUMBER .)
    SEMICOLON       reduce using rule 64 (digit -> NUMBER .)


state 48

    (65) boolean -> TRUE .

    QUESTION        reduce using rule 65 (boolean -> TRUE .)
    PLUS            reduce using rule 65 (boolean -> TRUE .)
    MINUS           reduce using rule 65 (boolean -> TRUE .)
    MULTIPLY        reduce using rule 65 (boolean -> TRUE .)
    DIVIDE          reduce using rule 65 (boolean -> TRUE .)
    MODULUS         reduce using rule 65 (boolean -> TRUE .)
    AND             reduce using rule 65 (boolean -> TRUE .)
    OR              reduce using rule 65 (boolean -> TRUE .)
    EQUAL           reduce using rule 65 (boolean -> TRUE .)
    NOTEQUAL        reduce using rule 65 (boolean -> TRUE .)
    LESSTHAN        reduce using rule 65 (boolean -> TRUE .)
    GREATERTHAN     reduce using rule 65 (boolean -> TRUE .)
    LESSTHANEQUAL   reduce using rule 65 (boolean -> TRUE .)
    GREATERTHANEQUAL reduce using rule 65 (boolean -> TRUE .)
    INCREMENT       reduce using rule 65 (boolean -> TRUE .)
    DECREMENT       reduce using rule 65 (boolean -> TRUE .)
    POW             reduce using rule 65 (boolean -> TRUE .)
    RPAREN          reduce using rule 65 (boolean -> TRUE .)
    RBRACKET        reduce using rule 65 (boolean -> TRUE .)
    RBRACE          reduce using rule 65 (boolean -> TRUE .)
    COLON           reduce using rule 65 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 65 (boolean -> TRUE .)


state 49

    (66) boolean -> FALSE .

    QUESTION        reduce using rule 66 (boolean -> FALSE .)
    PLUS            reduce using rule 66 (boolean -> FALSE .)
    MINUS           reduce using rule 66 (boolean -> FALSE .)
    MULTIPLY        reduce using rule 66 (boolean -> FALSE .)
    DIVIDE          reduce using rule 66 (boolean -> FALSE .)
    MODULUS         reduce using rule 66 (boolean -> FALSE .)
    AND             reduce using rule 66 (boolean -> FALSE .)
    OR              reduce using rule 66 (boolean -> FALSE .)
    EQUAL           reduce using rule 66 (boolean -> FALSE .)
    NOTEQUAL        reduce using rule 66 (boolean -> FALSE .)
    LESSTHAN        reduce using rule 66 (boolean -> FALSE .)
    GREATERTHAN     reduce using rule 66 (boolean -> FALSE .)
    LESSTHANEQUAL   reduce using rule 66 (boolean -> FALSE .)
    GREATERTHANEQUAL reduce using rule 66 (boolean -> FALSE .)
    INCREMENT       reduce using rule 66 (boolean -> FALSE .)
    DECREMENT       reduce using rule 66 (boolean -> FALSE .)
    POW             reduce using rule 66 (boolean -> FALSE .)
    RPAREN          reduce using rule 66 (boolean -> FALSE .)
    RBRACKET        reduce using rule 66 (boolean -> FALSE .)
    RBRACE          reduce using rule 66 (boolean -> FALSE .)
    COLON           reduce using rule 66 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 66 (boolean -> FALSE .)


state 50

    (2) stmt_list -> stmt stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    RBRACE          reduce using rule 2 (stmt_list -> stmt stmt_list .)
    CASE            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    DEFAULT         reduce using rule 2 (stmt_list -> stmt stmt_list .)


state 51

    (13) class_declaration -> CLASS IDENTIFIER . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 84


state 52

    (62) expression -> IDENTIFIER LBRACKET . expression RBRACKET
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 85
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 53

    (63) expression -> IDENTIFIER LBRACE . expression RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 86
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 54

    (14) fun_declaration -> FUN IDENTIFIER . LPAREN params RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 87


state 55

    (57) expression -> LPAREN expression . RPAREN
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RPAREN          shift and go to state 88
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 56

    (58) expression -> IDENTIFIER .
    (62) expression -> IDENTIFIER . LBRACKET expression RBRACKET
    (63) expression -> IDENTIFIER . LBRACE expression RBRACE

    RPAREN          reduce using rule 58 (expression -> IDENTIFIER .)
    PLUS            reduce using rule 58 (expression -> IDENTIFIER .)
    MINUS           reduce using rule 58 (expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 58 (expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 58 (expression -> IDENTIFIER .)
    MODULUS         reduce using rule 58 (expression -> IDENTIFIER .)
    AND             reduce using rule 58 (expression -> IDENTIFIER .)
    OR              reduce using rule 58 (expression -> IDENTIFIER .)
    EQUAL           reduce using rule 58 (expression -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 58 (expression -> IDENTIFIER .)
    LESSTHAN        reduce using rule 58 (expression -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 58 (expression -> IDENTIFIER .)
    LESSTHANEQUAL   reduce using rule 58 (expression -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 58 (expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 58 (expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 58 (expression -> IDENTIFIER .)
    POW             reduce using rule 58 (expression -> IDENTIFIER .)
    QUESTION        reduce using rule 58 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 58 (expression -> IDENTIFIER .)
    RBRACE          reduce using rule 58 (expression -> IDENTIFIER .)
    COLON           reduce using rule 58 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 58 (expression -> IDENTIFIER .)
    LBRACKET        shift and go to state 52
    LBRACE          shift and go to state 53


state 57

    (18) import_declaration -> IMPORT STRING_LITERAL .

    CLASS           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FUN             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    IMPORT          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    PRINT           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    INT             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOAT           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLE          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    BOOLEAN         reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    IDENTIFIER      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    INTLIST         reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATLIST       reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGLIST      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLELIST      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    INTARRAY        reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATARRAY      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGARRAY     reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLEARRAY     reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    IF              reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FOR             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    WHILE           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    SWITCH          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    NOT             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    LPAREN          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    NUMBER          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    TRUE            reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FALSE           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    $end            reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    RBRACE          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    CASE            reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DEFAULT         reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)


state 58

    (22) assignment -> general_type IDENTIFIER . ASSIGN expression SEMICOLON
    (19) variable_declaration -> general_type IDENTIFIER . SEMICOLON

    ASSIGN          shift and go to state 89
    SEMICOLON       shift and go to state 90


state 59

    (32) if_stmt -> expression QUESTION . expression COLON expression SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 91
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 60

    (40) expression -> expression PLUS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 92
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 61

    (41) expression -> expression MINUS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 93
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 62

    (42) expression -> expression MULTIPLY . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 94
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 63

    (43) expression -> expression DIVIDE . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 95
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 64

    (44) expression -> expression MODULUS . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 96
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 65

    (45) expression -> expression AND . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 97
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 66

    (46) expression -> expression OR . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 98
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 67

    (47) expression -> expression EQUAL . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 99
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 68

    (48) expression -> expression NOTEQUAL . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 100
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 69

    (49) expression -> expression LESSTHAN . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 101
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 70

    (50) expression -> expression GREATERTHAN . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 102
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 71

    (51) expression -> expression LESSTHANEQUAL . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 103
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 72

    (52) expression -> expression GREATERTHANEQUAL . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 104
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 73

    (53) expression -> expression INCREMENT .

    QUESTION        reduce using rule 53 (expression -> expression INCREMENT .)
    PLUS            reduce using rule 53 (expression -> expression INCREMENT .)
    MINUS           reduce using rule 53 (expression -> expression INCREMENT .)
    MULTIPLY        reduce using rule 53 (expression -> expression INCREMENT .)
    DIVIDE          reduce using rule 53 (expression -> expression INCREMENT .)
    MODULUS         reduce using rule 53 (expression -> expression INCREMENT .)
    AND             reduce using rule 53 (expression -> expression INCREMENT .)
    OR              reduce using rule 53 (expression -> expression INCREMENT .)
    EQUAL           reduce using rule 53 (expression -> expression INCREMENT .)
    NOTEQUAL        reduce using rule 53 (expression -> expression INCREMENT .)
    LESSTHAN        reduce using rule 53 (expression -> expression INCREMENT .)
    GREATERTHAN     reduce using rule 53 (expression -> expression INCREMENT .)
    LESSTHANEQUAL   reduce using rule 53 (expression -> expression INCREMENT .)
    GREATERTHANEQUAL reduce using rule 53 (expression -> expression INCREMENT .)
    INCREMENT       reduce using rule 53 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 53 (expression -> expression INCREMENT .)
    POW             reduce using rule 53 (expression -> expression INCREMENT .)
    RPAREN          reduce using rule 53 (expression -> expression INCREMENT .)
    RBRACKET        reduce using rule 53 (expression -> expression INCREMENT .)
    RBRACE          reduce using rule 53 (expression -> expression INCREMENT .)
    COLON           reduce using rule 53 (expression -> expression INCREMENT .)
    SEMICOLON       reduce using rule 53 (expression -> expression INCREMENT .)


state 74

    (54) expression -> expression DECREMENT .

    QUESTION        reduce using rule 54 (expression -> expression DECREMENT .)
    PLUS            reduce using rule 54 (expression -> expression DECREMENT .)
    MINUS           reduce using rule 54 (expression -> expression DECREMENT .)
    MULTIPLY        reduce using rule 54 (expression -> expression DECREMENT .)
    DIVIDE          reduce using rule 54 (expression -> expression DECREMENT .)
    MODULUS         reduce using rule 54 (expression -> expression DECREMENT .)
    AND             reduce using rule 54 (expression -> expression DECREMENT .)
    OR              reduce using rule 54 (expression -> expression DECREMENT .)
    EQUAL           reduce using rule 54 (expression -> expression DECREMENT .)
    NOTEQUAL        reduce using rule 54 (expression -> expression DECREMENT .)
    LESSTHAN        reduce using rule 54 (expression -> expression DECREMENT .)
    GREATERTHAN     reduce using rule 54 (expression -> expression DECREMENT .)
    LESSTHANEQUAL   reduce using rule 54 (expression -> expression DECREMENT .)
    GREATERTHANEQUAL reduce using rule 54 (expression -> expression DECREMENT .)
    INCREMENT       reduce using rule 54 (expression -> expression DECREMENT .)
    DECREMENT       reduce using rule 54 (expression -> expression DECREMENT .)
    POW             reduce using rule 54 (expression -> expression DECREMENT .)
    RPAREN          reduce using rule 54 (expression -> expression DECREMENT .)
    RBRACKET        reduce using rule 54 (expression -> expression DECREMENT .)
    RBRACE          reduce using rule 54 (expression -> expression DECREMENT .)
    COLON           reduce using rule 54 (expression -> expression DECREMENT .)
    SEMICOLON       reduce using rule 54 (expression -> expression DECREMENT .)


state 75

    (55) expression -> expression POW . expression
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 105
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 76

    (23) assignment -> list_type IDENTIFIER . LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (20) variable_declaration -> list_type IDENTIFIER . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 106


state 77

    (24) assignment -> array_type IDENTIFIER . LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (21) variable_declaration -> array_type IDENTIFIER . LBRACE RBRACE SEMICOLON

    LBRACE          shift and go to state 107


state 78

    (25) print_stmt -> PRINT LPAREN . expression RPAREN SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 108
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 79

    (30) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 109
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 80

    (33) for_stmt -> FOR LPAREN . assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 112
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39

    assignment                     shift and go to state 110
    general_type                   shift and go to state 111
    list_type                      shift and go to state 113
    array_type                     shift and go to state 114

state 81

    (34) while_stmt -> WHILE LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 115
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 82

    (35) switch_stmt -> SWITCH LPAREN . expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 116
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 83

    (56) expression -> NOT expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 56 (expression -> NOT expression .)
    RPAREN          reduce using rule 56 (expression -> NOT expression .)
    RBRACKET        reduce using rule 56 (expression -> NOT expression .)
    RBRACE          reduce using rule 56 (expression -> NOT expression .)
    COLON           reduce using rule 56 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 56 (expression -> NOT expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 56 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 56 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 56 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> NOT expression .) ]
  ! MODULUS         [ reduce using rule 56 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 56 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 56 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 56 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 56 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 56 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 56 (expression -> NOT expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 56 (expression -> NOT expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 56 (expression -> NOT expression .) ]
  ! INCREMENT       [ reduce using rule 56 (expression -> NOT expression .) ]
  ! DECREMENT       [ reduce using rule 56 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 56 (expression -> NOT expression .) ]


state 84

    (13) class_declaration -> CLASS IDENTIFIER LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    stmt_list                      shift and go to state 117
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 85

    (62) expression -> IDENTIFIER LBRACKET expression . RBRACKET
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RBRACKET        shift and go to state 118
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 86

    (63) expression -> IDENTIFIER LBRACE expression . RBRACE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RBRACE          shift and go to state 119
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 87

    (14) fun_declaration -> FUN IDENTIFIER LPAREN . params RPAREN LBRACE stmt_list RBRACE
    (15) params -> . general_type IDENTIFIER COMMA params
    (16) params -> . general_type IDENTIFIER
    (17) params -> . empty
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (81) empty -> .

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 112
    RPAREN          reduce using rule 81 (empty -> .)

    params                         shift and go to state 120
    general_type                   shift and go to state 121
    empty                          shift and go to state 122

state 88

    (57) expression -> LPAREN expression RPAREN .

    QUESTION        reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    LESSTHANEQUAL   reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    GREATERTHANEQUAL reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 57 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 57 (expression -> LPAREN expression RPAREN .)


state 89

    (22) assignment -> general_type IDENTIFIER ASSIGN . expression SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 123
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 90

    (19) variable_declaration -> general_type IDENTIFIER SEMICOLON .

    CLASS           reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    FUN             reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    IMPORT          reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    PRINT           reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    INT             reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    FLOAT           reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    DOUBLE          reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    STRING          reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    BOOLEAN         reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    INTLIST         reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    FLOATLIST       reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    STRINGLIST      reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    DOUBLELIST      reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    INTARRAY        reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    FLOATARRAY      reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    STRINGARRAY     reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    DOUBLEARRAY     reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    IF              reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    FOR             reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    WHILE           reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    SWITCH          reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    NOT             reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    LPAREN          reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    STRING_LITERAL  reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    NUMBER          reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    TRUE            reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    FALSE           reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    $end            reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    RBRACE          reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    CASE            reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)
    DEFAULT         reduce using rule 19 (variable_declaration -> general_type IDENTIFIER SEMICOLON .)


state 91

    (32) if_stmt -> expression QUESTION expression . COLON expression SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    COLON           shift and go to state 124
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 92

    (40) expression -> expression PLUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 40 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 40 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 40 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 40 (expression -> expression PLUS expression .)
    COLON           reduce using rule 40 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 40 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! INCREMENT       [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! DECREMENT       [ reduce using rule 40 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 40 (expression -> expression PLUS expression .) ]


state 93

    (41) expression -> expression MINUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 41 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 41 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 41 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 41 (expression -> expression MINUS expression .)
    COLON           reduce using rule 41 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 41 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! INCREMENT       [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! DECREMENT       [ reduce using rule 41 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 41 (expression -> expression MINUS expression .) ]


state 94

    (42) expression -> expression MULTIPLY expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 42 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 42 (expression -> expression MULTIPLY expression .)
    RBRACKET        reduce using rule 42 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 42 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 42 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 42 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! MODULUS         [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! EQUAL           [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUAL        [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! INCREMENT       [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! DECREMENT       [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]
  ! POW             [ reduce using rule 42 (expression -> expression MULTIPLY expression .) ]


state 95

    (43) expression -> expression DIVIDE expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 43 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 43 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 43 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 43 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 43 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 43 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! MODULUS         [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! EQUAL           [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUAL        [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! INCREMENT       [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! DECREMENT       [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]
  ! POW             [ reduce using rule 43 (expression -> expression DIVIDE expression .) ]


state 96

    (44) expression -> expression MODULUS expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 44 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 44 (expression -> expression MODULUS expression .)
    RBRACKET        reduce using rule 44 (expression -> expression MODULUS expression .)
    RBRACE          reduce using rule 44 (expression -> expression MODULUS expression .)
    COLON           reduce using rule 44 (expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 44 (expression -> expression MODULUS expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! EQUAL           [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! LESSTHAN        [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! INCREMENT       [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! DECREMENT       [ reduce using rule 44 (expression -> expression MODULUS expression .) ]
  ! POW             [ reduce using rule 44 (expression -> expression MODULUS expression .) ]


state 97

    (45) expression -> expression AND expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 45 (expression -> expression AND expression .)
    RPAREN          reduce using rule 45 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 45 (expression -> expression AND expression .)
    RBRACE          reduce using rule 45 (expression -> expression AND expression .)
    COLON           reduce using rule 45 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression AND expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! INCREMENT       [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! DECREMENT       [ reduce using rule 45 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 45 (expression -> expression AND expression .) ]


state 98

    (46) expression -> expression OR expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 46 (expression -> expression OR expression .)
    RPAREN          reduce using rule 46 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 46 (expression -> expression OR expression .)
    RBRACE          reduce using rule 46 (expression -> expression OR expression .)
    COLON           reduce using rule 46 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 46 (expression -> expression OR expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! INCREMENT       [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! DECREMENT       [ reduce using rule 46 (expression -> expression OR expression .) ]
  ! POW             [ reduce using rule 46 (expression -> expression OR expression .) ]


state 99

    (47) expression -> expression EQUAL expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 47 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 47 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 47 (expression -> expression EQUAL expression .)
    RBRACE          reduce using rule 47 (expression -> expression EQUAL expression .)
    COLON           reduce using rule 47 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 47 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 47 (expression -> expression EQUAL expression .) ]
  ! POW             [ reduce using rule 47 (expression -> expression EQUAL expression .) ]


state 100

    (48) expression -> expression NOTEQUAL expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    RBRACKET        reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    RBRACE          reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    COLON           reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 48 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]
  ! POW             [ reduce using rule 48 (expression -> expression NOTEQUAL expression .) ]


state 101

    (49) expression -> expression LESSTHAN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 49 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 49 (expression -> expression LESSTHAN expression .)
    RBRACKET        reduce using rule 49 (expression -> expression LESSTHAN expression .)
    RBRACE          reduce using rule 49 (expression -> expression LESSTHAN expression .)
    COLON           reduce using rule 49 (expression -> expression LESSTHAN expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! MODULUS         [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! EQUAL           [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]
  ! POW             [ reduce using rule 49 (expression -> expression LESSTHAN expression .) ]


state 102

    (50) expression -> expression GREATERTHAN expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 50 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 50 (expression -> expression GREATERTHAN expression .)
    RBRACKET        reduce using rule 50 (expression -> expression GREATERTHAN expression .)
    RBRACE          reduce using rule 50 (expression -> expression GREATERTHAN expression .)
    COLON           reduce using rule 50 (expression -> expression GREATERTHAN expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! MODULUS         [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! EQUAL           [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]
  ! POW             [ reduce using rule 50 (expression -> expression GREATERTHAN expression .) ]


state 103

    (51) expression -> expression LESSTHANEQUAL expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .)
    RPAREN          reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .)
    RBRACKET        reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .)
    RBRACE          reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .)
    COLON           reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 51 (expression -> expression LESSTHANEQUAL expression .) ]


state 104

    (52) expression -> expression GREATERTHANEQUAL expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .)
    RPAREN          reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACKET        reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACE          reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .)
    COLON           reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 52 (expression -> expression GREATERTHANEQUAL expression .) ]


state 105

    (55) expression -> expression POW expression .
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 55 (expression -> expression POW expression .)
    RPAREN          reduce using rule 55 (expression -> expression POW expression .)
    RBRACKET        reduce using rule 55 (expression -> expression POW expression .)
    RBRACE          reduce using rule 55 (expression -> expression POW expression .)
    COLON           reduce using rule 55 (expression -> expression POW expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression POW expression .)
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75

  ! PLUS            [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! MODULUS         [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! EQUAL           [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! NOTEQUAL        [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! LESSTHAN        [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! GREATERTHAN     [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! INCREMENT       [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! DECREMENT       [ reduce using rule 55 (expression -> expression POW expression .) ]
  ! POW             [ reduce using rule 55 (expression -> expression POW expression .) ]


state 106

    (23) assignment -> list_type IDENTIFIER LBRACKET . expression RBRACKET ASSIGN expression SEMICOLON
    (20) variable_declaration -> list_type IDENTIFIER LBRACKET . RBRACKET SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    RBRACKET        shift and go to state 126
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 125
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 107

    (24) assignment -> array_type IDENTIFIER LBRACE . expression RBRACE ASSIGN expression SEMICOLON
    (21) variable_declaration -> array_type IDENTIFIER LBRACE . RBRACE SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    RBRACE          shift and go to state 128
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 127
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 108

    (25) print_stmt -> PRINT LPAREN expression . RPAREN SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RPAREN          shift and go to state 129
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 109

    (30) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RPAREN          shift and go to state 130
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 110

    (33) for_stmt -> FOR LPAREN assignment . SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE

    SEMICOLON       shift and go to state 131


state 111

    (22) assignment -> general_type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 132


state 112

    (72) general_type -> IDENTIFIER .

    IDENTIFIER      reduce using rule 72 (general_type -> IDENTIFIER .)


state 113

    (23) assignment -> list_type . IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 133


state 114

    (24) assignment -> array_type . IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON

    IDENTIFIER      shift and go to state 134


state 115

    (34) while_stmt -> WHILE LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 116

    (35) switch_stmt -> SWITCH LPAREN expression . RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RPAREN          shift and go to state 136
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 117

    (13) class_declaration -> CLASS IDENTIFIER LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 137


state 118

    (62) expression -> IDENTIFIER LBRACKET expression RBRACKET .

    QUESTION        reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    MULTIPLY        reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    AND             reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    OR              reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    NOTEQUAL        reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    LESSTHANEQUAL   reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    GREATERTHANEQUAL reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    POW             reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    COLON           reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 62 (expression -> IDENTIFIER LBRACKET expression RBRACKET .)


state 119

    (63) expression -> IDENTIFIER LBRACE expression RBRACE .

    QUESTION        reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    PLUS            reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    MINUS           reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    MULTIPLY        reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    DIVIDE          reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    MODULUS         reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    AND             reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    OR              reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    EQUAL           reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    NOTEQUAL        reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    LESSTHAN        reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    GREATERTHAN     reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    LESSTHANEQUAL   reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    GREATERTHANEQUAL reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    INCREMENT       reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    DECREMENT       reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    POW             reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    RPAREN          reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    RBRACKET        reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    RBRACE          reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    COLON           reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)
    SEMICOLON       reduce using rule 63 (expression -> IDENTIFIER LBRACE expression RBRACE .)


state 120

    (14) fun_declaration -> FUN IDENTIFIER LPAREN params . RPAREN LBRACE stmt_list RBRACE

    RPAREN          shift and go to state 138


state 121

    (15) params -> general_type . IDENTIFIER COMMA params
    (16) params -> general_type . IDENTIFIER

    IDENTIFIER      shift and go to state 139


state 122

    (17) params -> empty .

    RPAREN          reduce using rule 17 (params -> empty .)


state 123

    (22) assignment -> general_type IDENTIFIER ASSIGN expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    SEMICOLON       shift and go to state 140
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 124

    (32) if_stmt -> expression QUESTION expression COLON . expression SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 141
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 125

    (23) assignment -> list_type IDENTIFIER LBRACKET expression . RBRACKET ASSIGN expression SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RBRACKET        shift and go to state 142
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 126

    (20) variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 143


state 127

    (24) assignment -> array_type IDENTIFIER LBRACE expression . RBRACE ASSIGN expression SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RBRACE          shift and go to state 144
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 128

    (21) variable_declaration -> array_type IDENTIFIER LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 145


state 129

    (25) print_stmt -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 146


state 130

    (30) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE
    (31) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 147


state 131

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON . expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 148
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 132

    (22) assignment -> general_type IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 89


state 133

    (23) assignment -> list_type IDENTIFIER . LBRACKET expression RBRACKET ASSIGN expression SEMICOLON

    LBRACKET        shift and go to state 149


state 134

    (24) assignment -> array_type IDENTIFIER . LBRACE expression RBRACE ASSIGN expression SEMICOLON

    LBRACE          shift and go to state 150


state 135

    (34) while_stmt -> WHILE LPAREN expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 151


state 136

    (35) switch_stmt -> SWITCH LPAREN expression RPAREN . LBRACE case_stmts default_stmt RBRACE

    LBRACE          shift and go to state 152


state 137

    (13) class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    INT             reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    IF              reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    $end            reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 13 (class_declaration -> CLASS IDENTIFIER LBRACE stmt_list RBRACE .)


state 138

    (14) fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 153


state 139

    (15) params -> general_type IDENTIFIER . COMMA params
    (16) params -> general_type IDENTIFIER .

    COMMA           shift and go to state 154
    RPAREN          reduce using rule 16 (params -> general_type IDENTIFIER .)


state 140

    (22) assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    INT             reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    IF              reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    $end            reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 22 (assignment -> general_type IDENTIFIER ASSIGN expression SEMICOLON .)


state 141

    (32) if_stmt -> expression QUESTION expression COLON expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    SEMICOLON       shift and go to state 155
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 142

    (23) assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 156


state 143

    (20) variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .

    CLASS           reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    FUN             reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    IMPORT          reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    PRINT           reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    INT             reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    STRING          reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    INTLIST         reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    FLOATLIST       reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    STRINGLIST      reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    DOUBLELIST      reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    INTARRAY        reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    FLOATARRAY      reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    STRINGARRAY     reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    DOUBLEARRAY     reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    IF              reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    FOR             reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    WHILE           reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    NOT             reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    TRUE            reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    FALSE           reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    CASE            reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 20 (variable_declaration -> list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON .)


state 144

    (24) assignment -> array_type IDENTIFIER LBRACE expression RBRACE . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 157


state 145

    (21) variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .

    CLASS           reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FUN             reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    IMPORT          reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    PRINT           reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    INT             reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FLOAT           reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    DOUBLE          reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    BOOLEAN         reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    INTLIST         reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FLOATLIST       reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    STRINGLIST      reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    DOUBLELIST      reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    INTARRAY        reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FLOATARRAY      reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    STRINGARRAY     reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    DOUBLEARRAY     reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    IF              reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FOR             reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    WHILE           reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    SWITCH          reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    STRING_LITERAL  reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    TRUE            reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    FALSE           reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    CASE            reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 21 (variable_declaration -> array_type IDENTIFIER LBRACE RBRACE SEMICOLON .)


state 146

    (25) print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .

    CLASS           reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FUN             reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTLIST         reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 25 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 147

    (30) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 158
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 148

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON expression . SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    SEMICOLON       shift and go to state 159
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 149

    (23) assignment -> list_type IDENTIFIER LBRACKET . expression RBRACKET ASSIGN expression SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 125
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 150

    (24) assignment -> array_type IDENTIFIER LBRACE . expression RBRACE ASSIGN expression SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 127
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 151

    (34) while_stmt -> WHILE LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 160
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 152

    (35) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE . case_stmts default_stmt RBRACE
    (36) case_stmts -> . CASE expression COLON stmt_list case_stmts
    (37) case_stmts -> . empty
    (81) empty -> .

    CASE            shift and go to state 162
    DEFAULT         reduce using rule 81 (empty -> .)
    RBRACE          reduce using rule 81 (empty -> .)

    case_stmts                     shift and go to state 161
    empty                          shift and go to state 163

state 153

    (14) fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    stmt_list                      shift and go to state 164
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 154

    (15) params -> general_type IDENTIFIER COMMA . params
    (15) params -> . general_type IDENTIFIER COMMA params
    (16) params -> . general_type IDENTIFIER
    (17) params -> . empty
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (81) empty -> .

    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 112
    RPAREN          reduce using rule 81 (empty -> .)

    general_type                   shift and go to state 121
    params                         shift and go to state 165
    empty                          shift and go to state 122

state 155

    (32) if_stmt -> expression QUESTION expression COLON expression SEMICOLON .

    CLASS           reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FUN             reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IMPORT          reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    PRINT           reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INT             reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOAT           reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLE          reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING          reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    BOOLEAN         reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IDENTIFIER      reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTLIST         reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATLIST       reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGLIST      reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLELIST      reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTARRAY        reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATARRAY      reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGARRAY     reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IF              reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FOR             reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    WHILE           reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    SWITCH          reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NOT             reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    LPAREN          reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NUMBER          reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    TRUE            reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FALSE           reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    $end            reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    RBRACE          reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    CASE            reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DEFAULT         reduce using rule 32 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)


state 156

    (23) assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN . expression SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 166
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 157

    (24) assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN . expression SEMICOLON
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 167
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 158

    (30) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE
    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE

    RBRACE          shift and go to state 168


state 159

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON . expression RPAREN LBRACE stmt_list RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 169
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 160

    (34) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 170


state 161

    (35) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts . default_stmt RBRACE
    (38) default_stmt -> . DEFAULT COLON stmt_list
    (39) default_stmt -> . empty
    (81) empty -> .

    DEFAULT         shift and go to state 172
    RBRACE          reduce using rule 81 (empty -> .)

    default_stmt                   shift and go to state 171
    empty                          shift and go to state 173

state 162

    (36) case_stmts -> CASE . expression COLON stmt_list case_stmts
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 56
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

    expression                     shift and go to state 174
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 163

    (37) case_stmts -> empty .

    DEFAULT         reduce using rule 37 (case_stmts -> empty .)
    RBRACE          reduce using rule 37 (case_stmts -> empty .)


state 164

    (14) fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 175


state 165

    (15) params -> general_type IDENTIFIER COMMA params .

    RPAREN          reduce using rule 15 (params -> general_type IDENTIFIER COMMA params .)


state 166

    (23) assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    SEMICOLON       shift and go to state 176
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 167

    (24) assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression . SEMICOLON
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    SEMICOLON       shift and go to state 177
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 168

    (30) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .
    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    CLASS           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 30 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 178


state 169

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression . RPAREN LBRACE stmt_list RBRACE
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    RPAREN          shift and go to state 179
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 170

    (34) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 34 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)


state 171

    (35) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt . RBRACE

    RBRACE          shift and go to state 180


state 172

    (38) default_stmt -> DEFAULT . COLON stmt_list

    COLON           shift and go to state 181


state 173

    (39) default_stmt -> empty .

    RBRACE          reduce using rule 39 (default_stmt -> empty .)


state 174

    (36) case_stmts -> CASE expression . COLON stmt_list case_stmts
    (40) expression -> expression . PLUS expression
    (41) expression -> expression . MINUS expression
    (42) expression -> expression . MULTIPLY expression
    (43) expression -> expression . DIVIDE expression
    (44) expression -> expression . MODULUS expression
    (45) expression -> expression . AND expression
    (46) expression -> expression . OR expression
    (47) expression -> expression . EQUAL expression
    (48) expression -> expression . NOTEQUAL expression
    (49) expression -> expression . LESSTHAN expression
    (50) expression -> expression . GREATERTHAN expression
    (51) expression -> expression . LESSTHANEQUAL expression
    (52) expression -> expression . GREATERTHANEQUAL expression
    (53) expression -> expression . INCREMENT
    (54) expression -> expression . DECREMENT
    (55) expression -> expression . POW expression

    COLON           shift and go to state 182
    PLUS            shift and go to state 60
    MINUS           shift and go to state 61
    MULTIPLY        shift and go to state 62
    DIVIDE          shift and go to state 63
    MODULUS         shift and go to state 64
    AND             shift and go to state 65
    OR              shift and go to state 66
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 68
    LESSTHAN        shift and go to state 69
    GREATERTHAN     shift and go to state 70
    LESSTHANEQUAL   shift and go to state 71
    GREATERTHANEQUAL shift and go to state 72
    INCREMENT       shift and go to state 73
    DECREMENT       shift and go to state 74
    POW             shift and go to state 75


state 175

    (14) fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 14 (fun_declaration -> FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE .)


state 176

    (23) assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    INT             reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    $end            reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 23 (assignment -> list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON .)


state 177

    (24) assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    INT             reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    IF              reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    $end            reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 24 (assignment -> array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON .)


state 178

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 183


state 179

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 184


state 180

    (35) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .

    CLASS           reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FUN             reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IMPORT          reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    PRINT           reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INT             reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOAT           reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLE          reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRING          reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    BOOLEAN         reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IDENTIFIER      reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INTLIST         reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOATLIST       reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRINGLIST      reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLELIST      reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INTARRAY        reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOATARRAY      reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRINGARRAY     reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLEARRAY     reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IF              reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FOR             reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    WHILE           reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    SWITCH          reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    NOT             reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    LPAREN          reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRING_LITERAL  reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    NUMBER          reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    TRUE            reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FALSE           reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    $end            reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    RBRACE          reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    CASE            reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DEFAULT         reduce using rule 35 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)


state 181

    (38) default_stmt -> DEFAULT COLON . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    stmt_list                      shift and go to state 185
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 182

    (36) case_stmts -> CASE expression COLON . stmt_list case_stmts
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    CASE            reduce using rule 81 (empty -> .)
    DEFAULT         reduce using rule 81 (empty -> .)
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 186
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 183

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 187
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 184

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (81) empty -> .
    (13) class_declaration -> . CLASS IDENTIFIER LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN IDENTIFIER LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type IDENTIFIER ASSIGN expression SEMICOLON
    (23) assignment -> . list_type IDENTIFIER LBRACKET expression RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . array_type IDENTIFIER LBRACE expression RBRACE ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type IDENTIFIER SEMICOLON
    (20) variable_declaration -> . list_type IDENTIFIER LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type IDENTIFIER LBRACE RBRACE SEMICOLON
    (25) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (26) control_structure -> . if_stmt
    (27) control_structure -> . for_stmt
    (28) control_structure -> . while_stmt
    (29) control_structure -> . switch_stmt
    (67) general_type -> . INT
    (68) general_type -> . FLOAT
    (69) general_type -> . DOUBLE
    (70) general_type -> . STRING
    (71) general_type -> . BOOLEAN
    (72) general_type -> . IDENTIFIER
    (77) list_type -> . INTLIST
    (78) list_type -> . FLOATLIST
    (79) list_type -> . STRINGLIST
    (80) list_type -> . DOUBLELIST
    (73) array_type -> . INTARRAY
    (74) array_type -> . FLOATARRAY
    (75) array_type -> . STRINGARRAY
    (76) array_type -> . DOUBLEARRAY
    (30) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (31) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (32) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (33) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (34) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (35) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (40) expression -> . expression PLUS expression
    (41) expression -> . expression MINUS expression
    (42) expression -> . expression MULTIPLY expression
    (43) expression -> . expression DIVIDE expression
    (44) expression -> . expression MODULUS expression
    (45) expression -> . expression AND expression
    (46) expression -> . expression OR expression
    (47) expression -> . expression EQUAL expression
    (48) expression -> . expression NOTEQUAL expression
    (49) expression -> . expression LESSTHAN expression
    (50) expression -> . expression GREATERTHAN expression
    (51) expression -> . expression LESSTHANEQUAL expression
    (52) expression -> . expression GREATERTHANEQUAL expression
    (53) expression -> . expression INCREMENT
    (54) expression -> . expression DECREMENT
    (55) expression -> . expression POW expression
    (56) expression -> . NOT expression
    (57) expression -> . LPAREN expression RPAREN
    (58) expression -> . IDENTIFIER
    (59) expression -> . digit
    (60) expression -> . STRING_LITERAL
    (61) expression -> . boolean
    (62) expression -> . IDENTIFIER LBRACKET expression RBRACKET
    (63) expression -> . IDENTIFIER LBRACE expression RBRACE
    (64) digit -> . NUMBER
    (65) boolean -> . TRUE
    (66) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 81 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 22
    INT             shift and go to state 27
    FLOAT           shift and go to state 28
    DOUBLE          shift and go to state 29
    STRING          shift and go to state 30
    BOOLEAN         shift and go to state 31
    IDENTIFIER      shift and go to state 13
    INTLIST         shift and go to state 32
    FLOATLIST       shift and go to state 33
    STRINGLIST      shift and go to state 34
    DOUBLELIST      shift and go to state 35
    INTARRAY        shift and go to state 36
    FLOATARRAY      shift and go to state 37
    STRINGARRAY     shift and go to state 38
    DOUBLEARRAY     shift and go to state 39
    IF              shift and go to state 40
    FOR             shift and go to state 41
    WHILE           shift and go to state 42
    SWITCH          shift and go to state 43
    NOT             shift and go to state 44
    LPAREN          shift and go to state 15
    STRING_LITERAL  shift and go to state 17
    NUMBER          shift and go to state 47
    TRUE            shift and go to state 48
    FALSE           shift and go to state 49

  ! CLASS           [ reduce using rule 81 (empty -> .) ]
  ! FUN             [ reduce using rule 81 (empty -> .) ]
  ! IMPORT          [ reduce using rule 81 (empty -> .) ]
  ! PRINT           [ reduce using rule 81 (empty -> .) ]
  ! INT             [ reduce using rule 81 (empty -> .) ]
  ! FLOAT           [ reduce using rule 81 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 81 (empty -> .) ]
  ! STRING          [ reduce using rule 81 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 81 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 81 (empty -> .) ]
  ! INTLIST         [ reduce using rule 81 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 81 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 81 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 81 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 81 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 81 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 81 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 81 (empty -> .) ]
  ! IF              [ reduce using rule 81 (empty -> .) ]
  ! FOR             [ reduce using rule 81 (empty -> .) ]
  ! WHILE           [ reduce using rule 81 (empty -> .) ]
  ! SWITCH          [ reduce using rule 81 (empty -> .) ]
  ! NOT             [ reduce using rule 81 (empty -> .) ]
  ! LPAREN          [ reduce using rule 81 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 81 (empty -> .) ]
  ! NUMBER          [ reduce using rule 81 (empty -> .) ]
  ! TRUE            [ reduce using rule 81 (empty -> .) ]
  ! FALSE           [ reduce using rule 81 (empty -> .) ]

    assignment                     shift and go to state 8
    expression                     shift and go to state 19
    stmt_list                      shift and go to state 188
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    array_type                     shift and go to state 21
    if_stmt                        shift and go to state 23
    for_stmt                       shift and go to state 24
    while_stmt                     shift and go to state 25
    switch_stmt                    shift and go to state 26
    digit                          shift and go to state 45
    boolean                        shift and go to state 46

state 185

    (38) default_stmt -> DEFAULT COLON stmt_list .

    RBRACE          reduce using rule 38 (default_stmt -> DEFAULT COLON stmt_list .)


state 186

    (36) case_stmts -> CASE expression COLON stmt_list . case_stmts
    (36) case_stmts -> . CASE expression COLON stmt_list case_stmts
    (37) case_stmts -> . empty
    (81) empty -> .

    CASE            shift and go to state 162
    DEFAULT         reduce using rule 81 (empty -> .)
    RBRACE          reduce using rule 81 (empty -> .)

    case_stmts                     shift and go to state 189
    empty                          shift and go to state 163

state 187

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 190


state 188

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 191


state 189

    (36) case_stmts -> CASE expression COLON stmt_list case_stmts .

    DEFAULT         reduce using rule 36 (case_stmts -> CASE expression COLON stmt_list case_stmts .)
    RBRACE          reduce using rule 36 (case_stmts -> CASE expression COLON stmt_list case_stmts .)


state 190

    (31) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INT             reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    $end            reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 31 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)


state 191

    (33) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 33 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for FUN in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 0 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for FUN in state 3 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 3 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 3 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 3 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 83 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 83 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 83 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 83 resolved as shift
WARNING: shift/reduce conflict for AND in state 83 resolved as shift
WARNING: shift/reduce conflict for OR in state 83 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 83 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 83 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 83 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 83 resolved as shift
WARNING: shift/reduce conflict for POW in state 83 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 84 resolved as shift
WARNING: shift/reduce conflict for FUN in state 84 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 84 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 84 resolved as shift
WARNING: shift/reduce conflict for INT in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 84 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 84 resolved as shift
WARNING: shift/reduce conflict for STRING in state 84 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 84 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 84 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 84 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 84 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 84 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 84 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 84 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 84 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 84 resolved as shift
WARNING: shift/reduce conflict for IF in state 84 resolved as shift
WARNING: shift/reduce conflict for FOR in state 84 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 84 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 84 resolved as shift
WARNING: shift/reduce conflict for NOT in state 84 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 84 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 84 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 84 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 84 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 84 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 92 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 92 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 92 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 92 resolved as shift
WARNING: shift/reduce conflict for AND in state 92 resolved as shift
WARNING: shift/reduce conflict for OR in state 92 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 92 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 92 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 92 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 92 resolved as shift
WARNING: shift/reduce conflict for POW in state 92 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 93 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 93 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 93 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 93 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 93 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 93 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 93 resolved as shift
WARNING: shift/reduce conflict for POW in state 93 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 94 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 94 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 94 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 94 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 94 resolved as shift
WARNING: shift/reduce conflict for POW in state 94 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 95 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 95 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 95 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 95 resolved as shift
WARNING: shift/reduce conflict for AND in state 95 resolved as shift
WARNING: shift/reduce conflict for OR in state 95 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 95 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 95 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 95 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 95 resolved as shift
WARNING: shift/reduce conflict for POW in state 95 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 96 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 96 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 96 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 96 resolved as shift
WARNING: shift/reduce conflict for AND in state 96 resolved as shift
WARNING: shift/reduce conflict for OR in state 96 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 96 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 96 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 96 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 96 resolved as shift
WARNING: shift/reduce conflict for POW in state 96 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 97 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 97 resolved as shift
WARNING: shift/reduce conflict for POW in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for POW in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 99 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 99 resolved as shift
WARNING: shift/reduce conflict for POW in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 100 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 100 resolved as shift
WARNING: shift/reduce conflict for POW in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 101 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 101 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 101 resolved as shift
WARNING: shift/reduce conflict for POW in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 102 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 102 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 102 resolved as shift
WARNING: shift/reduce conflict for POW in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 103 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 103 resolved as shift
WARNING: shift/reduce conflict for POW in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 104 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 104 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 104 resolved as shift
WARNING: shift/reduce conflict for POW in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for POW in state 105 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 147 resolved as shift
WARNING: shift/reduce conflict for FUN in state 147 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 147 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 147 resolved as shift
WARNING: shift/reduce conflict for INT in state 147 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 147 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 147 resolved as shift
WARNING: shift/reduce conflict for STRING in state 147 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 147 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 147 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 147 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 147 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 147 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 147 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 147 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 147 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 147 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 147 resolved as shift
WARNING: shift/reduce conflict for IF in state 147 resolved as shift
WARNING: shift/reduce conflict for FOR in state 147 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 147 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 147 resolved as shift
WARNING: shift/reduce conflict for NOT in state 147 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 147 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 147 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 147 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 147 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 147 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 151 resolved as shift
WARNING: shift/reduce conflict for FUN in state 151 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 151 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 151 resolved as shift
WARNING: shift/reduce conflict for INT in state 151 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 151 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 151 resolved as shift
WARNING: shift/reduce conflict for STRING in state 151 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 151 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 151 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 151 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 151 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 151 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 151 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 151 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 151 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 151 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 151 resolved as shift
WARNING: shift/reduce conflict for IF in state 151 resolved as shift
WARNING: shift/reduce conflict for FOR in state 151 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 151 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 151 resolved as shift
WARNING: shift/reduce conflict for NOT in state 151 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 151 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 151 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 151 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 151 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 151 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 153 resolved as shift
WARNING: shift/reduce conflict for FUN in state 153 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 153 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 153 resolved as shift
WARNING: shift/reduce conflict for INT in state 153 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 153 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 153 resolved as shift
WARNING: shift/reduce conflict for STRING in state 153 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 153 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 153 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 153 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 153 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 153 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 153 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 153 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 153 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 153 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 153 resolved as shift
WARNING: shift/reduce conflict for IF in state 153 resolved as shift
WARNING: shift/reduce conflict for FOR in state 153 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 153 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 153 resolved as shift
WARNING: shift/reduce conflict for NOT in state 153 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 153 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 153 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 153 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 153 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 153 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 181 resolved as shift
WARNING: shift/reduce conflict for FUN in state 181 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 181 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 181 resolved as shift
WARNING: shift/reduce conflict for INT in state 181 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 181 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 181 resolved as shift
WARNING: shift/reduce conflict for STRING in state 181 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 181 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 181 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 181 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 181 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 181 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 181 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 181 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 181 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 181 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 181 resolved as shift
WARNING: shift/reduce conflict for IF in state 181 resolved as shift
WARNING: shift/reduce conflict for FOR in state 181 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 181 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 181 resolved as shift
WARNING: shift/reduce conflict for NOT in state 181 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 181 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 181 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 181 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 181 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 181 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 182 resolved as shift
WARNING: shift/reduce conflict for FUN in state 182 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 182 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 182 resolved as shift
WARNING: shift/reduce conflict for INT in state 182 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 182 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 182 resolved as shift
WARNING: shift/reduce conflict for STRING in state 182 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 182 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 182 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 182 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 182 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 182 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 182 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 182 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 182 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 182 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 182 resolved as shift
WARNING: shift/reduce conflict for IF in state 182 resolved as shift
WARNING: shift/reduce conflict for FOR in state 182 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 182 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 182 resolved as shift
WARNING: shift/reduce conflict for NOT in state 182 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 182 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 182 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 182 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 182 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 182 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 183 resolved as shift
WARNING: shift/reduce conflict for FUN in state 183 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 183 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 183 resolved as shift
WARNING: shift/reduce conflict for INT in state 183 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 183 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 183 resolved as shift
WARNING: shift/reduce conflict for STRING in state 183 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 183 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 183 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 183 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 183 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 183 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 183 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 183 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 183 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 183 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 183 resolved as shift
WARNING: shift/reduce conflict for IF in state 183 resolved as shift
WARNING: shift/reduce conflict for FOR in state 183 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 183 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 183 resolved as shift
WARNING: shift/reduce conflict for NOT in state 183 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 183 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 183 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 183 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 183 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 183 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 184 resolved as shift
WARNING: shift/reduce conflict for FUN in state 184 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 184 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 184 resolved as shift
WARNING: shift/reduce conflict for INT in state 184 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 184 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 184 resolved as shift
WARNING: shift/reduce conflict for STRING in state 184 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 184 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 184 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 184 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 184 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 184 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 184 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 184 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 184 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 184 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 184 resolved as shift
WARNING: shift/reduce conflict for IF in state 184 resolved as shift
WARNING: shift/reduce conflict for FOR in state 184 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 184 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 184 resolved as shift
WARNING: shift/reduce conflict for NOT in state 184 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 184 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 184 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 184 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 184 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 184 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (stmt_list -> stmt)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (stmt_list -> empty)
WARNING: rejected rule (stmt -> empty) in state 4
