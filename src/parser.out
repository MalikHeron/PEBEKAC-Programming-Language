Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    ARROW
    AT
    BACKSLASH
    BREAK
    DIVIDEASSIGN
    DOT
    DOUBLEQUOTE
    HASH
    INPUT
    MINUSASSIGN
    MODASSIGN
    NEW
    NULL
    PARAMS
    PIPE
    PLUSASSIGN
    RETURN
    SLASH
    TIMESASSIGN

Grammar

Rule 0     S' -> program
Rule 1     program -> stmt_list
Rule 2     stmt_list -> stmt stmt_list
Rule 3     stmt_list -> stmt
Rule 4     stmt_list -> empty
Rule 5     stmt -> class_declaration
Rule 6     stmt -> fun_declaration
Rule 7     stmt -> import_declaration
Rule 8     stmt -> assignment
Rule 9     stmt -> variable_declaration
Rule 10    stmt -> print_stmt
Rule 11    stmt -> control_structure
Rule 12    stmt -> empty
Rule 13    class_declaration -> CLASS identifier LBRACE stmt_list RBRACE
Rule 14    fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
Rule 15    params -> general_type identifier COMMA params
Rule 16    params -> general_type identifier
Rule 17    params -> empty
Rule 18    import_declaration -> IMPORT STRING_LITERAL
Rule 19    variable_declaration -> general_type identifier SEMICOLON
Rule 20    variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON
Rule 21    variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON
Rule 22    assignment -> general_type identifier ASSIGN expression SEMICOLON
Rule 23    assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
Rule 24    assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
Rule 25    assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
Rule 26    assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
Rule 27    assignment -> identifier ASSIGN expression SEMICOLON
Rule 28    print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON
Rule 29    control_structure -> if_stmt
Rule 30    control_structure -> for_stmt
Rule 31    control_structure -> while_stmt
Rule 32    control_structure -> switch_stmt
Rule 33    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 34    if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
Rule 35    if_stmt -> expression QUESTION expression COLON expression SEMICOLON
Rule 36    for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
Rule 37    while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
Rule 38    switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
Rule 39    case_stmts -> CASE expression COLON stmt_list case_stmts
Rule 40    case_stmts -> empty
Rule 41    default_stmt -> DEFAULT COLON stmt_list
Rule 42    default_stmt -> empty
Rule 43    expression -> expression PLUS expression
Rule 44    expression -> expression MINUS expression
Rule 45    expression -> expression MULTIPLY expression
Rule 46    expression -> expression DIVIDE expression
Rule 47    expression -> expression MODULUS expression
Rule 48    expression -> expression AND expression
Rule 49    expression -> expression OR expression
Rule 50    expression -> expression EQUAL expression
Rule 51    expression -> expression NOTEQUAL expression
Rule 52    expression -> expression LESSTHAN expression
Rule 53    expression -> expression GREATERTHAN expression
Rule 54    expression -> expression LESSTHANEQUAL expression
Rule 55    expression -> expression GREATERTHANEQUAL expression
Rule 56    expression -> expression INCREMENT
Rule 57    expression -> expression DECREMENT
Rule 58    expression -> expression COMMA expression
Rule 59    expression -> expression POW expression
Rule 60    expression -> NOT expression
Rule 61    expression -> LPAREN expression RPAREN
Rule 62    expression -> identifier
Rule 63    expression -> digit
Rule 64    expression -> string
Rule 65    expression -> boolean
Rule 66    expression -> identifier LBRACKET expression RBRACKET
Rule 67    expression -> identifier LBRACE expression RBRACE
Rule 68    digit -> NUMBER
Rule 69    boolean -> TRUE
Rule 70    boolean -> FALSE
Rule 71    general_type -> INT
Rule 72    general_type -> FLOAT
Rule 73    general_type -> DOUBLE
Rule 74    general_type -> STRING
Rule 75    general_type -> BOOLEAN
Rule 76    general_type -> identifier
Rule 77    array_type -> INTARRAY
Rule 78    array_type -> FLOATARRAY
Rule 79    array_type -> STRINGARRAY
Rule 80    array_type -> DOUBLEARRAY
Rule 81    list_type -> INTLIST
Rule 82    list_type -> FLOATLIST
Rule 83    list_type -> STRINGLIST
Rule 84    list_type -> DOUBLELIST
Rule 85    identifier -> IDENTIFIER
Rule 86    string -> STRING_LITERAL
Rule 87    empty -> <empty>

Terminals, with rules where they appear

AND                  : 48
APOSTROPHE           : 
ARROW                : 
ASSIGN               : 22 23 24 25 26 27
AT                   : 
BACKSLASH            : 
BOOLEAN              : 75
BREAK                : 
CASE                 : 39
CLASS                : 13
COLON                : 35 39 41
COMMA                : 15 58
DECREMENT            : 57
DEFAULT              : 41
DIVIDE               : 46
DIVIDEASSIGN         : 
DOT                  : 
DOUBLE               : 73
DOUBLEARRAY          : 80
DOUBLELIST           : 84
DOUBLEQUOTE          : 
ELSE                 : 34
EQUAL                : 50
FALSE                : 70
FLOAT                : 72
FLOATARRAY           : 78
FLOATLIST            : 82
FOR                  : 36
FUN                  : 14
GREATERTHAN          : 53
GREATERTHANEQUAL     : 55
HASH                 : 
IDENTIFIER           : 85
IF                   : 33 34
IMPORT               : 18
INCREMENT            : 56
INPUT                : 
INT                  : 71
INTARRAY             : 77
INTLIST              : 81
LBRACE               : 13 14 21 25 26 33 34 34 36 37 38 67
LBRACKET             : 20 23 24 66
LESSTHAN             : 52
LESSTHANEQUAL        : 54
LPAREN               : 14 28 33 34 36 37 38 61
MINUS                : 44
MINUSASSIGN          : 
MODASSIGN            : 
MODULUS              : 47
MULTIPLY             : 45
NEW                  : 
NOT                  : 60
NOTEQUAL             : 51
NULL                 : 
NUMBER               : 68
OR                   : 49
PARAMS               : 
PIPE                 : 
PLUS                 : 43
PLUSASSIGN           : 
POW                  : 59
PRINT                : 28
QUESTION             : 35
RBRACE               : 13 14 21 25 26 33 34 34 36 37 38 67
RBRACKET             : 20 23 24 66
RETURN               : 
RPAREN               : 14 28 33 34 36 37 38 61
SEMICOLON            : 19 20 21 22 23 24 25 26 27 28 35 36 36
SLASH                : 
STRING               : 74
STRINGARRAY          : 79
STRINGLIST           : 83
STRING_LITERAL       : 18 86
SWITCH               : 38
TIMESASSIGN          : 
TRUE                 : 69
WHILE                : 37
error                : 

Nonterminals, with rules where they appear

array_type           : 21 25 26
assignment           : 8 36
boolean              : 65
case_stmts           : 38 39
class_declaration    : 5
control_structure    : 11
default_stmt         : 38
digit                : 23 25 63
empty                : 4 12 17 40 42
expression           : 22 23 24 25 26 27 28 33 34 35 35 35 36 36 37 38 39 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 57 58 58 59 59 60 61 66 67
for_stmt             : 30
fun_declaration      : 6
general_type         : 15 16 19 22
identifier           : 13 14 15 16 19 20 21 22 23 24 25 26 27 62 66 67 76
if_stmt              : 29
import_declaration   : 7
list_type            : 20 23 24
params               : 14 15
print_stmt           : 10
program              : 0
stmt                 : 2 3
stmt_list            : 1 2 13 14 33 34 34 36 37 39 41
string               : 64
switch_stmt          : 32
variable_declaration : 9
while_stmt           : 31

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    program                        shift and go to state 1
    stmt_list                      shift and go to state 2
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 1

    (0) S' -> program .



state 2

    (1) program -> stmt_list .

    $end            reduce using rule 1 (program -> stmt_list .)


state 3

    (2) stmt_list -> stmt . stmt_list
    (3) stmt_list -> stmt .
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! reduce/reduce conflict for $end resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for RBRACE resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 3 (stmt_list -> stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 3 (stmt_list -> stmt .)
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 3 (stmt_list -> stmt .)
    RBRACE          reduce using rule 3 (stmt_list -> stmt .)
    CASE            reduce using rule 3 (stmt_list -> stmt .)
    DEFAULT         reduce using rule 3 (stmt_list -> stmt .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! $end            [ reduce using rule 87 (empty -> .) ]
  ! RBRACE          [ reduce using rule 87 (empty -> .) ]
  ! CASE            [ reduce using rule 87 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 87 (empty -> .) ]
  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    stmt                           shift and go to state 3
    stmt_list                      shift and go to state 52
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 4

    (4) stmt_list -> empty .
    (12) stmt -> empty .

  ! reduce/reduce conflict for $end resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for RBRACE resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for CASE resolved using rule 4 (stmt_list -> empty .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 4 (stmt_list -> empty .)
    $end            reduce using rule 4 (stmt_list -> empty .)
    RBRACE          reduce using rule 4 (stmt_list -> empty .)
    CASE            reduce using rule 4 (stmt_list -> empty .)
    DEFAULT         reduce using rule 4 (stmt_list -> empty .)
    CLASS           reduce using rule 12 (stmt -> empty .)
    FUN             reduce using rule 12 (stmt -> empty .)
    IMPORT          reduce using rule 12 (stmt -> empty .)
    PRINT           reduce using rule 12 (stmt -> empty .)
    INT             reduce using rule 12 (stmt -> empty .)
    FLOAT           reduce using rule 12 (stmt -> empty .)
    DOUBLE          reduce using rule 12 (stmt -> empty .)
    STRING          reduce using rule 12 (stmt -> empty .)
    BOOLEAN         reduce using rule 12 (stmt -> empty .)
    INTLIST         reduce using rule 12 (stmt -> empty .)
    FLOATLIST       reduce using rule 12 (stmt -> empty .)
    STRINGLIST      reduce using rule 12 (stmt -> empty .)
    DOUBLELIST      reduce using rule 12 (stmt -> empty .)
    INTARRAY        reduce using rule 12 (stmt -> empty .)
    FLOATARRAY      reduce using rule 12 (stmt -> empty .)
    STRINGARRAY     reduce using rule 12 (stmt -> empty .)
    DOUBLEARRAY     reduce using rule 12 (stmt -> empty .)
    IDENTIFIER      reduce using rule 12 (stmt -> empty .)
    IF              reduce using rule 12 (stmt -> empty .)
    FOR             reduce using rule 12 (stmt -> empty .)
    WHILE           reduce using rule 12 (stmt -> empty .)
    SWITCH          reduce using rule 12 (stmt -> empty .)
    NOT             reduce using rule 12 (stmt -> empty .)
    LPAREN          reduce using rule 12 (stmt -> empty .)
    NUMBER          reduce using rule 12 (stmt -> empty .)
    STRING_LITERAL  reduce using rule 12 (stmt -> empty .)
    TRUE            reduce using rule 12 (stmt -> empty .)
    FALSE           reduce using rule 12 (stmt -> empty .)

  ! $end            [ reduce using rule 12 (stmt -> empty .) ]
  ! RBRACE          [ reduce using rule 12 (stmt -> empty .) ]
  ! CASE            [ reduce using rule 12 (stmt -> empty .) ]
  ! DEFAULT         [ reduce using rule 12 (stmt -> empty .) ]


state 5

    (5) stmt -> class_declaration .

    CLASS           reduce using rule 5 (stmt -> class_declaration .)
    FUN             reduce using rule 5 (stmt -> class_declaration .)
    IMPORT          reduce using rule 5 (stmt -> class_declaration .)
    PRINT           reduce using rule 5 (stmt -> class_declaration .)
    INT             reduce using rule 5 (stmt -> class_declaration .)
    FLOAT           reduce using rule 5 (stmt -> class_declaration .)
    DOUBLE          reduce using rule 5 (stmt -> class_declaration .)
    STRING          reduce using rule 5 (stmt -> class_declaration .)
    BOOLEAN         reduce using rule 5 (stmt -> class_declaration .)
    INTLIST         reduce using rule 5 (stmt -> class_declaration .)
    FLOATLIST       reduce using rule 5 (stmt -> class_declaration .)
    STRINGLIST      reduce using rule 5 (stmt -> class_declaration .)
    DOUBLELIST      reduce using rule 5 (stmt -> class_declaration .)
    INTARRAY        reduce using rule 5 (stmt -> class_declaration .)
    FLOATARRAY      reduce using rule 5 (stmt -> class_declaration .)
    STRINGARRAY     reduce using rule 5 (stmt -> class_declaration .)
    DOUBLEARRAY     reduce using rule 5 (stmt -> class_declaration .)
    IDENTIFIER      reduce using rule 5 (stmt -> class_declaration .)
    IF              reduce using rule 5 (stmt -> class_declaration .)
    FOR             reduce using rule 5 (stmt -> class_declaration .)
    WHILE           reduce using rule 5 (stmt -> class_declaration .)
    SWITCH          reduce using rule 5 (stmt -> class_declaration .)
    NOT             reduce using rule 5 (stmt -> class_declaration .)
    LPAREN          reduce using rule 5 (stmt -> class_declaration .)
    NUMBER          reduce using rule 5 (stmt -> class_declaration .)
    STRING_LITERAL  reduce using rule 5 (stmt -> class_declaration .)
    TRUE            reduce using rule 5 (stmt -> class_declaration .)
    FALSE           reduce using rule 5 (stmt -> class_declaration .)
    $end            reduce using rule 5 (stmt -> class_declaration .)
    RBRACE          reduce using rule 5 (stmt -> class_declaration .)
    CASE            reduce using rule 5 (stmt -> class_declaration .)
    DEFAULT         reduce using rule 5 (stmt -> class_declaration .)


state 6

    (6) stmt -> fun_declaration .

    CLASS           reduce using rule 6 (stmt -> fun_declaration .)
    FUN             reduce using rule 6 (stmt -> fun_declaration .)
    IMPORT          reduce using rule 6 (stmt -> fun_declaration .)
    PRINT           reduce using rule 6 (stmt -> fun_declaration .)
    INT             reduce using rule 6 (stmt -> fun_declaration .)
    FLOAT           reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLE          reduce using rule 6 (stmt -> fun_declaration .)
    STRING          reduce using rule 6 (stmt -> fun_declaration .)
    BOOLEAN         reduce using rule 6 (stmt -> fun_declaration .)
    INTLIST         reduce using rule 6 (stmt -> fun_declaration .)
    FLOATLIST       reduce using rule 6 (stmt -> fun_declaration .)
    STRINGLIST      reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLELIST      reduce using rule 6 (stmt -> fun_declaration .)
    INTARRAY        reduce using rule 6 (stmt -> fun_declaration .)
    FLOATARRAY      reduce using rule 6 (stmt -> fun_declaration .)
    STRINGARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    DOUBLEARRAY     reduce using rule 6 (stmt -> fun_declaration .)
    IDENTIFIER      reduce using rule 6 (stmt -> fun_declaration .)
    IF              reduce using rule 6 (stmt -> fun_declaration .)
    FOR             reduce using rule 6 (stmt -> fun_declaration .)
    WHILE           reduce using rule 6 (stmt -> fun_declaration .)
    SWITCH          reduce using rule 6 (stmt -> fun_declaration .)
    NOT             reduce using rule 6 (stmt -> fun_declaration .)
    LPAREN          reduce using rule 6 (stmt -> fun_declaration .)
    NUMBER          reduce using rule 6 (stmt -> fun_declaration .)
    STRING_LITERAL  reduce using rule 6 (stmt -> fun_declaration .)
    TRUE            reduce using rule 6 (stmt -> fun_declaration .)
    FALSE           reduce using rule 6 (stmt -> fun_declaration .)
    $end            reduce using rule 6 (stmt -> fun_declaration .)
    RBRACE          reduce using rule 6 (stmt -> fun_declaration .)
    CASE            reduce using rule 6 (stmt -> fun_declaration .)
    DEFAULT         reduce using rule 6 (stmt -> fun_declaration .)


state 7

    (7) stmt -> import_declaration .

    CLASS           reduce using rule 7 (stmt -> import_declaration .)
    FUN             reduce using rule 7 (stmt -> import_declaration .)
    IMPORT          reduce using rule 7 (stmt -> import_declaration .)
    PRINT           reduce using rule 7 (stmt -> import_declaration .)
    INT             reduce using rule 7 (stmt -> import_declaration .)
    FLOAT           reduce using rule 7 (stmt -> import_declaration .)
    DOUBLE          reduce using rule 7 (stmt -> import_declaration .)
    STRING          reduce using rule 7 (stmt -> import_declaration .)
    BOOLEAN         reduce using rule 7 (stmt -> import_declaration .)
    INTLIST         reduce using rule 7 (stmt -> import_declaration .)
    FLOATLIST       reduce using rule 7 (stmt -> import_declaration .)
    STRINGLIST      reduce using rule 7 (stmt -> import_declaration .)
    DOUBLELIST      reduce using rule 7 (stmt -> import_declaration .)
    INTARRAY        reduce using rule 7 (stmt -> import_declaration .)
    FLOATARRAY      reduce using rule 7 (stmt -> import_declaration .)
    STRINGARRAY     reduce using rule 7 (stmt -> import_declaration .)
    DOUBLEARRAY     reduce using rule 7 (stmt -> import_declaration .)
    IDENTIFIER      reduce using rule 7 (stmt -> import_declaration .)
    IF              reduce using rule 7 (stmt -> import_declaration .)
    FOR             reduce using rule 7 (stmt -> import_declaration .)
    WHILE           reduce using rule 7 (stmt -> import_declaration .)
    SWITCH          reduce using rule 7 (stmt -> import_declaration .)
    NOT             reduce using rule 7 (stmt -> import_declaration .)
    LPAREN          reduce using rule 7 (stmt -> import_declaration .)
    NUMBER          reduce using rule 7 (stmt -> import_declaration .)
    STRING_LITERAL  reduce using rule 7 (stmt -> import_declaration .)
    TRUE            reduce using rule 7 (stmt -> import_declaration .)
    FALSE           reduce using rule 7 (stmt -> import_declaration .)
    $end            reduce using rule 7 (stmt -> import_declaration .)
    RBRACE          reduce using rule 7 (stmt -> import_declaration .)
    CASE            reduce using rule 7 (stmt -> import_declaration .)
    DEFAULT         reduce using rule 7 (stmt -> import_declaration .)


state 8

    (8) stmt -> assignment .

    CLASS           reduce using rule 8 (stmt -> assignment .)
    FUN             reduce using rule 8 (stmt -> assignment .)
    IMPORT          reduce using rule 8 (stmt -> assignment .)
    PRINT           reduce using rule 8 (stmt -> assignment .)
    INT             reduce using rule 8 (stmt -> assignment .)
    FLOAT           reduce using rule 8 (stmt -> assignment .)
    DOUBLE          reduce using rule 8 (stmt -> assignment .)
    STRING          reduce using rule 8 (stmt -> assignment .)
    BOOLEAN         reduce using rule 8 (stmt -> assignment .)
    INTLIST         reduce using rule 8 (stmt -> assignment .)
    FLOATLIST       reduce using rule 8 (stmt -> assignment .)
    STRINGLIST      reduce using rule 8 (stmt -> assignment .)
    DOUBLELIST      reduce using rule 8 (stmt -> assignment .)
    INTARRAY        reduce using rule 8 (stmt -> assignment .)
    FLOATARRAY      reduce using rule 8 (stmt -> assignment .)
    STRINGARRAY     reduce using rule 8 (stmt -> assignment .)
    DOUBLEARRAY     reduce using rule 8 (stmt -> assignment .)
    IDENTIFIER      reduce using rule 8 (stmt -> assignment .)
    IF              reduce using rule 8 (stmt -> assignment .)
    FOR             reduce using rule 8 (stmt -> assignment .)
    WHILE           reduce using rule 8 (stmt -> assignment .)
    SWITCH          reduce using rule 8 (stmt -> assignment .)
    NOT             reduce using rule 8 (stmt -> assignment .)
    LPAREN          reduce using rule 8 (stmt -> assignment .)
    NUMBER          reduce using rule 8 (stmt -> assignment .)
    STRING_LITERAL  reduce using rule 8 (stmt -> assignment .)
    TRUE            reduce using rule 8 (stmt -> assignment .)
    FALSE           reduce using rule 8 (stmt -> assignment .)
    $end            reduce using rule 8 (stmt -> assignment .)
    RBRACE          reduce using rule 8 (stmt -> assignment .)
    CASE            reduce using rule 8 (stmt -> assignment .)
    DEFAULT         reduce using rule 8 (stmt -> assignment .)


state 9

    (9) stmt -> variable_declaration .

    CLASS           reduce using rule 9 (stmt -> variable_declaration .)
    FUN             reduce using rule 9 (stmt -> variable_declaration .)
    IMPORT          reduce using rule 9 (stmt -> variable_declaration .)
    PRINT           reduce using rule 9 (stmt -> variable_declaration .)
    INT             reduce using rule 9 (stmt -> variable_declaration .)
    FLOAT           reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLE          reduce using rule 9 (stmt -> variable_declaration .)
    STRING          reduce using rule 9 (stmt -> variable_declaration .)
    BOOLEAN         reduce using rule 9 (stmt -> variable_declaration .)
    INTLIST         reduce using rule 9 (stmt -> variable_declaration .)
    FLOATLIST       reduce using rule 9 (stmt -> variable_declaration .)
    STRINGLIST      reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLELIST      reduce using rule 9 (stmt -> variable_declaration .)
    INTARRAY        reduce using rule 9 (stmt -> variable_declaration .)
    FLOATARRAY      reduce using rule 9 (stmt -> variable_declaration .)
    STRINGARRAY     reduce using rule 9 (stmt -> variable_declaration .)
    DOUBLEARRAY     reduce using rule 9 (stmt -> variable_declaration .)
    IDENTIFIER      reduce using rule 9 (stmt -> variable_declaration .)
    IF              reduce using rule 9 (stmt -> variable_declaration .)
    FOR             reduce using rule 9 (stmt -> variable_declaration .)
    WHILE           reduce using rule 9 (stmt -> variable_declaration .)
    SWITCH          reduce using rule 9 (stmt -> variable_declaration .)
    NOT             reduce using rule 9 (stmt -> variable_declaration .)
    LPAREN          reduce using rule 9 (stmt -> variable_declaration .)
    NUMBER          reduce using rule 9 (stmt -> variable_declaration .)
    STRING_LITERAL  reduce using rule 9 (stmt -> variable_declaration .)
    TRUE            reduce using rule 9 (stmt -> variable_declaration .)
    FALSE           reduce using rule 9 (stmt -> variable_declaration .)
    $end            reduce using rule 9 (stmt -> variable_declaration .)
    RBRACE          reduce using rule 9 (stmt -> variable_declaration .)
    CASE            reduce using rule 9 (stmt -> variable_declaration .)
    DEFAULT         reduce using rule 9 (stmt -> variable_declaration .)


state 10

    (10) stmt -> print_stmt .

    CLASS           reduce using rule 10 (stmt -> print_stmt .)
    FUN             reduce using rule 10 (stmt -> print_stmt .)
    IMPORT          reduce using rule 10 (stmt -> print_stmt .)
    PRINT           reduce using rule 10 (stmt -> print_stmt .)
    INT             reduce using rule 10 (stmt -> print_stmt .)
    FLOAT           reduce using rule 10 (stmt -> print_stmt .)
    DOUBLE          reduce using rule 10 (stmt -> print_stmt .)
    STRING          reduce using rule 10 (stmt -> print_stmt .)
    BOOLEAN         reduce using rule 10 (stmt -> print_stmt .)
    INTLIST         reduce using rule 10 (stmt -> print_stmt .)
    FLOATLIST       reduce using rule 10 (stmt -> print_stmt .)
    STRINGLIST      reduce using rule 10 (stmt -> print_stmt .)
    DOUBLELIST      reduce using rule 10 (stmt -> print_stmt .)
    INTARRAY        reduce using rule 10 (stmt -> print_stmt .)
    FLOATARRAY      reduce using rule 10 (stmt -> print_stmt .)
    STRINGARRAY     reduce using rule 10 (stmt -> print_stmt .)
    DOUBLEARRAY     reduce using rule 10 (stmt -> print_stmt .)
    IDENTIFIER      reduce using rule 10 (stmt -> print_stmt .)
    IF              reduce using rule 10 (stmt -> print_stmt .)
    FOR             reduce using rule 10 (stmt -> print_stmt .)
    WHILE           reduce using rule 10 (stmt -> print_stmt .)
    SWITCH          reduce using rule 10 (stmt -> print_stmt .)
    NOT             reduce using rule 10 (stmt -> print_stmt .)
    LPAREN          reduce using rule 10 (stmt -> print_stmt .)
    NUMBER          reduce using rule 10 (stmt -> print_stmt .)
    STRING_LITERAL  reduce using rule 10 (stmt -> print_stmt .)
    TRUE            reduce using rule 10 (stmt -> print_stmt .)
    FALSE           reduce using rule 10 (stmt -> print_stmt .)
    $end            reduce using rule 10 (stmt -> print_stmt .)
    RBRACE          reduce using rule 10 (stmt -> print_stmt .)
    CASE            reduce using rule 10 (stmt -> print_stmt .)
    DEFAULT         reduce using rule 10 (stmt -> print_stmt .)


state 11

    (11) stmt -> control_structure .

    CLASS           reduce using rule 11 (stmt -> control_structure .)
    FUN             reduce using rule 11 (stmt -> control_structure .)
    IMPORT          reduce using rule 11 (stmt -> control_structure .)
    PRINT           reduce using rule 11 (stmt -> control_structure .)
    INT             reduce using rule 11 (stmt -> control_structure .)
    FLOAT           reduce using rule 11 (stmt -> control_structure .)
    DOUBLE          reduce using rule 11 (stmt -> control_structure .)
    STRING          reduce using rule 11 (stmt -> control_structure .)
    BOOLEAN         reduce using rule 11 (stmt -> control_structure .)
    INTLIST         reduce using rule 11 (stmt -> control_structure .)
    FLOATLIST       reduce using rule 11 (stmt -> control_structure .)
    STRINGLIST      reduce using rule 11 (stmt -> control_structure .)
    DOUBLELIST      reduce using rule 11 (stmt -> control_structure .)
    INTARRAY        reduce using rule 11 (stmt -> control_structure .)
    FLOATARRAY      reduce using rule 11 (stmt -> control_structure .)
    STRINGARRAY     reduce using rule 11 (stmt -> control_structure .)
    DOUBLEARRAY     reduce using rule 11 (stmt -> control_structure .)
    IDENTIFIER      reduce using rule 11 (stmt -> control_structure .)
    IF              reduce using rule 11 (stmt -> control_structure .)
    FOR             reduce using rule 11 (stmt -> control_structure .)
    WHILE           reduce using rule 11 (stmt -> control_structure .)
    SWITCH          reduce using rule 11 (stmt -> control_structure .)
    NOT             reduce using rule 11 (stmt -> control_structure .)
    LPAREN          reduce using rule 11 (stmt -> control_structure .)
    NUMBER          reduce using rule 11 (stmt -> control_structure .)
    STRING_LITERAL  reduce using rule 11 (stmt -> control_structure .)
    TRUE            reduce using rule 11 (stmt -> control_structure .)
    FALSE           reduce using rule 11 (stmt -> control_structure .)
    $end            reduce using rule 11 (stmt -> control_structure .)
    RBRACE          reduce using rule 11 (stmt -> control_structure .)
    CASE            reduce using rule 11 (stmt -> control_structure .)
    DEFAULT         reduce using rule 11 (stmt -> control_structure .)


state 12

    (13) class_declaration -> CLASS . identifier LBRACE stmt_list RBRACE
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 53

state 13

    (27) assignment -> identifier . ASSIGN expression SEMICOLON
    (76) general_type -> identifier .
    (62) expression -> identifier .
    (66) expression -> identifier . LBRACKET expression RBRACKET
    (67) expression -> identifier . LBRACE expression RBRACE

    ASSIGN          shift and go to state 54
    IDENTIFIER      reduce using rule 76 (general_type -> identifier .)
    QUESTION        reduce using rule 62 (expression -> identifier .)
    PLUS            reduce using rule 62 (expression -> identifier .)
    MINUS           reduce using rule 62 (expression -> identifier .)
    MULTIPLY        reduce using rule 62 (expression -> identifier .)
    DIVIDE          reduce using rule 62 (expression -> identifier .)
    MODULUS         reduce using rule 62 (expression -> identifier .)
    AND             reduce using rule 62 (expression -> identifier .)
    OR              reduce using rule 62 (expression -> identifier .)
    EQUAL           reduce using rule 62 (expression -> identifier .)
    NOTEQUAL        reduce using rule 62 (expression -> identifier .)
    LESSTHAN        reduce using rule 62 (expression -> identifier .)
    GREATERTHAN     reduce using rule 62 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 62 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 62 (expression -> identifier .)
    INCREMENT       reduce using rule 62 (expression -> identifier .)
    DECREMENT       reduce using rule 62 (expression -> identifier .)
    COMMA           reduce using rule 62 (expression -> identifier .)
    POW             reduce using rule 62 (expression -> identifier .)
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 56


state 14

    (14) fun_declaration -> FUN . identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 57

state 15

    (61) expression -> LPAREN . expression RPAREN
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 58
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 16

    (18) import_declaration -> IMPORT . STRING_LITERAL

    STRING_LITERAL  shift and go to state 60


state 17

    (86) string -> STRING_LITERAL .

    QUESTION        reduce using rule 86 (string -> STRING_LITERAL .)
    PLUS            reduce using rule 86 (string -> STRING_LITERAL .)
    MINUS           reduce using rule 86 (string -> STRING_LITERAL .)
    MULTIPLY        reduce using rule 86 (string -> STRING_LITERAL .)
    DIVIDE          reduce using rule 86 (string -> STRING_LITERAL .)
    MODULUS         reduce using rule 86 (string -> STRING_LITERAL .)
    AND             reduce using rule 86 (string -> STRING_LITERAL .)
    OR              reduce using rule 86 (string -> STRING_LITERAL .)
    EQUAL           reduce using rule 86 (string -> STRING_LITERAL .)
    NOTEQUAL        reduce using rule 86 (string -> STRING_LITERAL .)
    LESSTHAN        reduce using rule 86 (string -> STRING_LITERAL .)
    GREATERTHAN     reduce using rule 86 (string -> STRING_LITERAL .)
    LESSTHANEQUAL   reduce using rule 86 (string -> STRING_LITERAL .)
    GREATERTHANEQUAL reduce using rule 86 (string -> STRING_LITERAL .)
    INCREMENT       reduce using rule 86 (string -> STRING_LITERAL .)
    DECREMENT       reduce using rule 86 (string -> STRING_LITERAL .)
    COMMA           reduce using rule 86 (string -> STRING_LITERAL .)
    POW             reduce using rule 86 (string -> STRING_LITERAL .)
    RPAREN          reduce using rule 86 (string -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 86 (string -> STRING_LITERAL .)
    RBRACKET        reduce using rule 86 (string -> STRING_LITERAL .)
    RBRACE          reduce using rule 86 (string -> STRING_LITERAL .)
    COLON           reduce using rule 86 (string -> STRING_LITERAL .)


state 18

    (22) assignment -> general_type . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> general_type . identifier SEMICOLON
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 61

state 19

    (35) if_stmt -> expression . QUESTION expression COLON expression SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    QUESTION        shift and go to state 62
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 20

    (23) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> list_type . identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (20) variable_declaration -> list_type . identifier LBRACKET RBRACKET SEMICOLON
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 80

state 21

    (63) expression -> digit .

    QUESTION        reduce using rule 63 (expression -> digit .)
    PLUS            reduce using rule 63 (expression -> digit .)
    MINUS           reduce using rule 63 (expression -> digit .)
    MULTIPLY        reduce using rule 63 (expression -> digit .)
    DIVIDE          reduce using rule 63 (expression -> digit .)
    MODULUS         reduce using rule 63 (expression -> digit .)
    AND             reduce using rule 63 (expression -> digit .)
    OR              reduce using rule 63 (expression -> digit .)
    EQUAL           reduce using rule 63 (expression -> digit .)
    NOTEQUAL        reduce using rule 63 (expression -> digit .)
    LESSTHAN        reduce using rule 63 (expression -> digit .)
    GREATERTHAN     reduce using rule 63 (expression -> digit .)
    LESSTHANEQUAL   reduce using rule 63 (expression -> digit .)
    GREATERTHANEQUAL reduce using rule 63 (expression -> digit .)
    INCREMENT       reduce using rule 63 (expression -> digit .)
    DECREMENT       reduce using rule 63 (expression -> digit .)
    COMMA           reduce using rule 63 (expression -> digit .)
    POW             reduce using rule 63 (expression -> digit .)
    RPAREN          reduce using rule 63 (expression -> digit .)
    SEMICOLON       reduce using rule 63 (expression -> digit .)
    RBRACKET        reduce using rule 63 (expression -> digit .)
    RBRACE          reduce using rule 63 (expression -> digit .)
    COLON           reduce using rule 63 (expression -> digit .)


state 22

    (25) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> array_type . identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (21) variable_declaration -> array_type . identifier LBRACE RBRACE SEMICOLON
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 81

state 23

    (28) print_stmt -> PRINT . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 82


state 24

    (29) control_structure -> if_stmt .

    CLASS           reduce using rule 29 (control_structure -> if_stmt .)
    FUN             reduce using rule 29 (control_structure -> if_stmt .)
    IMPORT          reduce using rule 29 (control_structure -> if_stmt .)
    PRINT           reduce using rule 29 (control_structure -> if_stmt .)
    INT             reduce using rule 29 (control_structure -> if_stmt .)
    FLOAT           reduce using rule 29 (control_structure -> if_stmt .)
    DOUBLE          reduce using rule 29 (control_structure -> if_stmt .)
    STRING          reduce using rule 29 (control_structure -> if_stmt .)
    BOOLEAN         reduce using rule 29 (control_structure -> if_stmt .)
    INTLIST         reduce using rule 29 (control_structure -> if_stmt .)
    FLOATLIST       reduce using rule 29 (control_structure -> if_stmt .)
    STRINGLIST      reduce using rule 29 (control_structure -> if_stmt .)
    DOUBLELIST      reduce using rule 29 (control_structure -> if_stmt .)
    INTARRAY        reduce using rule 29 (control_structure -> if_stmt .)
    FLOATARRAY      reduce using rule 29 (control_structure -> if_stmt .)
    STRINGARRAY     reduce using rule 29 (control_structure -> if_stmt .)
    DOUBLEARRAY     reduce using rule 29 (control_structure -> if_stmt .)
    IDENTIFIER      reduce using rule 29 (control_structure -> if_stmt .)
    IF              reduce using rule 29 (control_structure -> if_stmt .)
    FOR             reduce using rule 29 (control_structure -> if_stmt .)
    WHILE           reduce using rule 29 (control_structure -> if_stmt .)
    SWITCH          reduce using rule 29 (control_structure -> if_stmt .)
    NOT             reduce using rule 29 (control_structure -> if_stmt .)
    LPAREN          reduce using rule 29 (control_structure -> if_stmt .)
    NUMBER          reduce using rule 29 (control_structure -> if_stmt .)
    STRING_LITERAL  reduce using rule 29 (control_structure -> if_stmt .)
    TRUE            reduce using rule 29 (control_structure -> if_stmt .)
    FALSE           reduce using rule 29 (control_structure -> if_stmt .)
    $end            reduce using rule 29 (control_structure -> if_stmt .)
    RBRACE          reduce using rule 29 (control_structure -> if_stmt .)
    CASE            reduce using rule 29 (control_structure -> if_stmt .)
    DEFAULT         reduce using rule 29 (control_structure -> if_stmt .)


state 25

    (30) control_structure -> for_stmt .

    CLASS           reduce using rule 30 (control_structure -> for_stmt .)
    FUN             reduce using rule 30 (control_structure -> for_stmt .)
    IMPORT          reduce using rule 30 (control_structure -> for_stmt .)
    PRINT           reduce using rule 30 (control_structure -> for_stmt .)
    INT             reduce using rule 30 (control_structure -> for_stmt .)
    FLOAT           reduce using rule 30 (control_structure -> for_stmt .)
    DOUBLE          reduce using rule 30 (control_structure -> for_stmt .)
    STRING          reduce using rule 30 (control_structure -> for_stmt .)
    BOOLEAN         reduce using rule 30 (control_structure -> for_stmt .)
    INTLIST         reduce using rule 30 (control_structure -> for_stmt .)
    FLOATLIST       reduce using rule 30 (control_structure -> for_stmt .)
    STRINGLIST      reduce using rule 30 (control_structure -> for_stmt .)
    DOUBLELIST      reduce using rule 30 (control_structure -> for_stmt .)
    INTARRAY        reduce using rule 30 (control_structure -> for_stmt .)
    FLOATARRAY      reduce using rule 30 (control_structure -> for_stmt .)
    STRINGARRAY     reduce using rule 30 (control_structure -> for_stmt .)
    DOUBLEARRAY     reduce using rule 30 (control_structure -> for_stmt .)
    IDENTIFIER      reduce using rule 30 (control_structure -> for_stmt .)
    IF              reduce using rule 30 (control_structure -> for_stmt .)
    FOR             reduce using rule 30 (control_structure -> for_stmt .)
    WHILE           reduce using rule 30 (control_structure -> for_stmt .)
    SWITCH          reduce using rule 30 (control_structure -> for_stmt .)
    NOT             reduce using rule 30 (control_structure -> for_stmt .)
    LPAREN          reduce using rule 30 (control_structure -> for_stmt .)
    NUMBER          reduce using rule 30 (control_structure -> for_stmt .)
    STRING_LITERAL  reduce using rule 30 (control_structure -> for_stmt .)
    TRUE            reduce using rule 30 (control_structure -> for_stmt .)
    FALSE           reduce using rule 30 (control_structure -> for_stmt .)
    $end            reduce using rule 30 (control_structure -> for_stmt .)
    RBRACE          reduce using rule 30 (control_structure -> for_stmt .)
    CASE            reduce using rule 30 (control_structure -> for_stmt .)
    DEFAULT         reduce using rule 30 (control_structure -> for_stmt .)


state 26

    (31) control_structure -> while_stmt .

    CLASS           reduce using rule 31 (control_structure -> while_stmt .)
    FUN             reduce using rule 31 (control_structure -> while_stmt .)
    IMPORT          reduce using rule 31 (control_structure -> while_stmt .)
    PRINT           reduce using rule 31 (control_structure -> while_stmt .)
    INT             reduce using rule 31 (control_structure -> while_stmt .)
    FLOAT           reduce using rule 31 (control_structure -> while_stmt .)
    DOUBLE          reduce using rule 31 (control_structure -> while_stmt .)
    STRING          reduce using rule 31 (control_structure -> while_stmt .)
    BOOLEAN         reduce using rule 31 (control_structure -> while_stmt .)
    INTLIST         reduce using rule 31 (control_structure -> while_stmt .)
    FLOATLIST       reduce using rule 31 (control_structure -> while_stmt .)
    STRINGLIST      reduce using rule 31 (control_structure -> while_stmt .)
    DOUBLELIST      reduce using rule 31 (control_structure -> while_stmt .)
    INTARRAY        reduce using rule 31 (control_structure -> while_stmt .)
    FLOATARRAY      reduce using rule 31 (control_structure -> while_stmt .)
    STRINGARRAY     reduce using rule 31 (control_structure -> while_stmt .)
    DOUBLEARRAY     reduce using rule 31 (control_structure -> while_stmt .)
    IDENTIFIER      reduce using rule 31 (control_structure -> while_stmt .)
    IF              reduce using rule 31 (control_structure -> while_stmt .)
    FOR             reduce using rule 31 (control_structure -> while_stmt .)
    WHILE           reduce using rule 31 (control_structure -> while_stmt .)
    SWITCH          reduce using rule 31 (control_structure -> while_stmt .)
    NOT             reduce using rule 31 (control_structure -> while_stmt .)
    LPAREN          reduce using rule 31 (control_structure -> while_stmt .)
    NUMBER          reduce using rule 31 (control_structure -> while_stmt .)
    STRING_LITERAL  reduce using rule 31 (control_structure -> while_stmt .)
    TRUE            reduce using rule 31 (control_structure -> while_stmt .)
    FALSE           reduce using rule 31 (control_structure -> while_stmt .)
    $end            reduce using rule 31 (control_structure -> while_stmt .)
    RBRACE          reduce using rule 31 (control_structure -> while_stmt .)
    CASE            reduce using rule 31 (control_structure -> while_stmt .)
    DEFAULT         reduce using rule 31 (control_structure -> while_stmt .)


state 27

    (32) control_structure -> switch_stmt .

    CLASS           reduce using rule 32 (control_structure -> switch_stmt .)
    FUN             reduce using rule 32 (control_structure -> switch_stmt .)
    IMPORT          reduce using rule 32 (control_structure -> switch_stmt .)
    PRINT           reduce using rule 32 (control_structure -> switch_stmt .)
    INT             reduce using rule 32 (control_structure -> switch_stmt .)
    FLOAT           reduce using rule 32 (control_structure -> switch_stmt .)
    DOUBLE          reduce using rule 32 (control_structure -> switch_stmt .)
    STRING          reduce using rule 32 (control_structure -> switch_stmt .)
    BOOLEAN         reduce using rule 32 (control_structure -> switch_stmt .)
    INTLIST         reduce using rule 32 (control_structure -> switch_stmt .)
    FLOATLIST       reduce using rule 32 (control_structure -> switch_stmt .)
    STRINGLIST      reduce using rule 32 (control_structure -> switch_stmt .)
    DOUBLELIST      reduce using rule 32 (control_structure -> switch_stmt .)
    INTARRAY        reduce using rule 32 (control_structure -> switch_stmt .)
    FLOATARRAY      reduce using rule 32 (control_structure -> switch_stmt .)
    STRINGARRAY     reduce using rule 32 (control_structure -> switch_stmt .)
    DOUBLEARRAY     reduce using rule 32 (control_structure -> switch_stmt .)
    IDENTIFIER      reduce using rule 32 (control_structure -> switch_stmt .)
    IF              reduce using rule 32 (control_structure -> switch_stmt .)
    FOR             reduce using rule 32 (control_structure -> switch_stmt .)
    WHILE           reduce using rule 32 (control_structure -> switch_stmt .)
    SWITCH          reduce using rule 32 (control_structure -> switch_stmt .)
    NOT             reduce using rule 32 (control_structure -> switch_stmt .)
    LPAREN          reduce using rule 32 (control_structure -> switch_stmt .)
    NUMBER          reduce using rule 32 (control_structure -> switch_stmt .)
    STRING_LITERAL  reduce using rule 32 (control_structure -> switch_stmt .)
    TRUE            reduce using rule 32 (control_structure -> switch_stmt .)
    FALSE           reduce using rule 32 (control_structure -> switch_stmt .)
    $end            reduce using rule 32 (control_structure -> switch_stmt .)
    RBRACE          reduce using rule 32 (control_structure -> switch_stmt .)
    CASE            reduce using rule 32 (control_structure -> switch_stmt .)
    DEFAULT         reduce using rule 32 (control_structure -> switch_stmt .)


state 28

    (71) general_type -> INT .

    IDENTIFIER      reduce using rule 71 (general_type -> INT .)


state 29

    (72) general_type -> FLOAT .

    IDENTIFIER      reduce using rule 72 (general_type -> FLOAT .)


state 30

    (73) general_type -> DOUBLE .

    IDENTIFIER      reduce using rule 73 (general_type -> DOUBLE .)


state 31

    (74) general_type -> STRING .

    IDENTIFIER      reduce using rule 74 (general_type -> STRING .)


state 32

    (75) general_type -> BOOLEAN .

    IDENTIFIER      reduce using rule 75 (general_type -> BOOLEAN .)


state 33

    (81) list_type -> INTLIST .

    IDENTIFIER      reduce using rule 81 (list_type -> INTLIST .)


state 34

    (82) list_type -> FLOATLIST .

    IDENTIFIER      reduce using rule 82 (list_type -> FLOATLIST .)


state 35

    (83) list_type -> STRINGLIST .

    IDENTIFIER      reduce using rule 83 (list_type -> STRINGLIST .)


state 36

    (84) list_type -> DOUBLELIST .

    IDENTIFIER      reduce using rule 84 (list_type -> DOUBLELIST .)


state 37

    (77) array_type -> INTARRAY .

    IDENTIFIER      reduce using rule 77 (array_type -> INTARRAY .)


state 38

    (78) array_type -> FLOATARRAY .

    IDENTIFIER      reduce using rule 78 (array_type -> FLOATARRAY .)


state 39

    (79) array_type -> STRINGARRAY .

    IDENTIFIER      reduce using rule 79 (array_type -> STRINGARRAY .)


state 40

    (80) array_type -> DOUBLEARRAY .

    IDENTIFIER      reduce using rule 80 (array_type -> DOUBLEARRAY .)


state 41

    (85) identifier -> IDENTIFIER .

    ASSIGN          reduce using rule 85 (identifier -> IDENTIFIER .)
    LBRACKET        reduce using rule 85 (identifier -> IDENTIFIER .)
    LBRACE          reduce using rule 85 (identifier -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 85 (identifier -> IDENTIFIER .)
    QUESTION        reduce using rule 85 (identifier -> IDENTIFIER .)
    PLUS            reduce using rule 85 (identifier -> IDENTIFIER .)
    MINUS           reduce using rule 85 (identifier -> IDENTIFIER .)
    MULTIPLY        reduce using rule 85 (identifier -> IDENTIFIER .)
    DIVIDE          reduce using rule 85 (identifier -> IDENTIFIER .)
    MODULUS         reduce using rule 85 (identifier -> IDENTIFIER .)
    AND             reduce using rule 85 (identifier -> IDENTIFIER .)
    OR              reduce using rule 85 (identifier -> IDENTIFIER .)
    EQUAL           reduce using rule 85 (identifier -> IDENTIFIER .)
    NOTEQUAL        reduce using rule 85 (identifier -> IDENTIFIER .)
    LESSTHAN        reduce using rule 85 (identifier -> IDENTIFIER .)
    GREATERTHAN     reduce using rule 85 (identifier -> IDENTIFIER .)
    LESSTHANEQUAL   reduce using rule 85 (identifier -> IDENTIFIER .)
    GREATERTHANEQUAL reduce using rule 85 (identifier -> IDENTIFIER .)
    INCREMENT       reduce using rule 85 (identifier -> IDENTIFIER .)
    DECREMENT       reduce using rule 85 (identifier -> IDENTIFIER .)
    COMMA           reduce using rule 85 (identifier -> IDENTIFIER .)
    POW             reduce using rule 85 (identifier -> IDENTIFIER .)
    LPAREN          reduce using rule 85 (identifier -> IDENTIFIER .)
    RPAREN          reduce using rule 85 (identifier -> IDENTIFIER .)
    SEMICOLON       reduce using rule 85 (identifier -> IDENTIFIER .)
    RBRACKET        reduce using rule 85 (identifier -> IDENTIFIER .)
    RBRACE          reduce using rule 85 (identifier -> IDENTIFIER .)
    COLON           reduce using rule 85 (identifier -> IDENTIFIER .)


state 42

    (33) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> IF . LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 83


state 43

    (36) for_stmt -> FOR . LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 84


state 44

    (37) while_stmt -> WHILE . LPAREN expression RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 85


state 45

    (38) switch_stmt -> SWITCH . LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE

    LPAREN          shift and go to state 86


state 46

    (60) expression -> NOT . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 87
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 47

    (64) expression -> string .

    QUESTION        reduce using rule 64 (expression -> string .)
    PLUS            reduce using rule 64 (expression -> string .)
    MINUS           reduce using rule 64 (expression -> string .)
    MULTIPLY        reduce using rule 64 (expression -> string .)
    DIVIDE          reduce using rule 64 (expression -> string .)
    MODULUS         reduce using rule 64 (expression -> string .)
    AND             reduce using rule 64 (expression -> string .)
    OR              reduce using rule 64 (expression -> string .)
    EQUAL           reduce using rule 64 (expression -> string .)
    NOTEQUAL        reduce using rule 64 (expression -> string .)
    LESSTHAN        reduce using rule 64 (expression -> string .)
    GREATERTHAN     reduce using rule 64 (expression -> string .)
    LESSTHANEQUAL   reduce using rule 64 (expression -> string .)
    GREATERTHANEQUAL reduce using rule 64 (expression -> string .)
    INCREMENT       reduce using rule 64 (expression -> string .)
    DECREMENT       reduce using rule 64 (expression -> string .)
    COMMA           reduce using rule 64 (expression -> string .)
    POW             reduce using rule 64 (expression -> string .)
    RPAREN          reduce using rule 64 (expression -> string .)
    SEMICOLON       reduce using rule 64 (expression -> string .)
    RBRACKET        reduce using rule 64 (expression -> string .)
    RBRACE          reduce using rule 64 (expression -> string .)
    COLON           reduce using rule 64 (expression -> string .)


state 48

    (65) expression -> boolean .

    QUESTION        reduce using rule 65 (expression -> boolean .)
    PLUS            reduce using rule 65 (expression -> boolean .)
    MINUS           reduce using rule 65 (expression -> boolean .)
    MULTIPLY        reduce using rule 65 (expression -> boolean .)
    DIVIDE          reduce using rule 65 (expression -> boolean .)
    MODULUS         reduce using rule 65 (expression -> boolean .)
    AND             reduce using rule 65 (expression -> boolean .)
    OR              reduce using rule 65 (expression -> boolean .)
    EQUAL           reduce using rule 65 (expression -> boolean .)
    NOTEQUAL        reduce using rule 65 (expression -> boolean .)
    LESSTHAN        reduce using rule 65 (expression -> boolean .)
    GREATERTHAN     reduce using rule 65 (expression -> boolean .)
    LESSTHANEQUAL   reduce using rule 65 (expression -> boolean .)
    GREATERTHANEQUAL reduce using rule 65 (expression -> boolean .)
    INCREMENT       reduce using rule 65 (expression -> boolean .)
    DECREMENT       reduce using rule 65 (expression -> boolean .)
    COMMA           reduce using rule 65 (expression -> boolean .)
    POW             reduce using rule 65 (expression -> boolean .)
    RPAREN          reduce using rule 65 (expression -> boolean .)
    SEMICOLON       reduce using rule 65 (expression -> boolean .)
    RBRACKET        reduce using rule 65 (expression -> boolean .)
    RBRACE          reduce using rule 65 (expression -> boolean .)
    COLON           reduce using rule 65 (expression -> boolean .)


state 49

    (68) digit -> NUMBER .

    QUESTION        reduce using rule 68 (digit -> NUMBER .)
    PLUS            reduce using rule 68 (digit -> NUMBER .)
    MINUS           reduce using rule 68 (digit -> NUMBER .)
    MULTIPLY        reduce using rule 68 (digit -> NUMBER .)
    DIVIDE          reduce using rule 68 (digit -> NUMBER .)
    MODULUS         reduce using rule 68 (digit -> NUMBER .)
    AND             reduce using rule 68 (digit -> NUMBER .)
    OR              reduce using rule 68 (digit -> NUMBER .)
    EQUAL           reduce using rule 68 (digit -> NUMBER .)
    NOTEQUAL        reduce using rule 68 (digit -> NUMBER .)
    LESSTHAN        reduce using rule 68 (digit -> NUMBER .)
    GREATERTHAN     reduce using rule 68 (digit -> NUMBER .)
    LESSTHANEQUAL   reduce using rule 68 (digit -> NUMBER .)
    GREATERTHANEQUAL reduce using rule 68 (digit -> NUMBER .)
    INCREMENT       reduce using rule 68 (digit -> NUMBER .)
    DECREMENT       reduce using rule 68 (digit -> NUMBER .)
    COMMA           reduce using rule 68 (digit -> NUMBER .)
    POW             reduce using rule 68 (digit -> NUMBER .)
    RPAREN          reduce using rule 68 (digit -> NUMBER .)
    SEMICOLON       reduce using rule 68 (digit -> NUMBER .)
    RBRACKET        reduce using rule 68 (digit -> NUMBER .)
    RBRACE          reduce using rule 68 (digit -> NUMBER .)
    COLON           reduce using rule 68 (digit -> NUMBER .)


state 50

    (69) boolean -> TRUE .

    QUESTION        reduce using rule 69 (boolean -> TRUE .)
    PLUS            reduce using rule 69 (boolean -> TRUE .)
    MINUS           reduce using rule 69 (boolean -> TRUE .)
    MULTIPLY        reduce using rule 69 (boolean -> TRUE .)
    DIVIDE          reduce using rule 69 (boolean -> TRUE .)
    MODULUS         reduce using rule 69 (boolean -> TRUE .)
    AND             reduce using rule 69 (boolean -> TRUE .)
    OR              reduce using rule 69 (boolean -> TRUE .)
    EQUAL           reduce using rule 69 (boolean -> TRUE .)
    NOTEQUAL        reduce using rule 69 (boolean -> TRUE .)
    LESSTHAN        reduce using rule 69 (boolean -> TRUE .)
    GREATERTHAN     reduce using rule 69 (boolean -> TRUE .)
    LESSTHANEQUAL   reduce using rule 69 (boolean -> TRUE .)
    GREATERTHANEQUAL reduce using rule 69 (boolean -> TRUE .)
    INCREMENT       reduce using rule 69 (boolean -> TRUE .)
    DECREMENT       reduce using rule 69 (boolean -> TRUE .)
    COMMA           reduce using rule 69 (boolean -> TRUE .)
    POW             reduce using rule 69 (boolean -> TRUE .)
    RPAREN          reduce using rule 69 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 69 (boolean -> TRUE .)
    RBRACKET        reduce using rule 69 (boolean -> TRUE .)
    RBRACE          reduce using rule 69 (boolean -> TRUE .)
    COLON           reduce using rule 69 (boolean -> TRUE .)


state 51

    (70) boolean -> FALSE .

    QUESTION        reduce using rule 70 (boolean -> FALSE .)
    PLUS            reduce using rule 70 (boolean -> FALSE .)
    MINUS           reduce using rule 70 (boolean -> FALSE .)
    MULTIPLY        reduce using rule 70 (boolean -> FALSE .)
    DIVIDE          reduce using rule 70 (boolean -> FALSE .)
    MODULUS         reduce using rule 70 (boolean -> FALSE .)
    AND             reduce using rule 70 (boolean -> FALSE .)
    OR              reduce using rule 70 (boolean -> FALSE .)
    EQUAL           reduce using rule 70 (boolean -> FALSE .)
    NOTEQUAL        reduce using rule 70 (boolean -> FALSE .)
    LESSTHAN        reduce using rule 70 (boolean -> FALSE .)
    GREATERTHAN     reduce using rule 70 (boolean -> FALSE .)
    LESSTHANEQUAL   reduce using rule 70 (boolean -> FALSE .)
    GREATERTHANEQUAL reduce using rule 70 (boolean -> FALSE .)
    INCREMENT       reduce using rule 70 (boolean -> FALSE .)
    DECREMENT       reduce using rule 70 (boolean -> FALSE .)
    COMMA           reduce using rule 70 (boolean -> FALSE .)
    POW             reduce using rule 70 (boolean -> FALSE .)
    RPAREN          reduce using rule 70 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 70 (boolean -> FALSE .)
    RBRACKET        reduce using rule 70 (boolean -> FALSE .)
    RBRACE          reduce using rule 70 (boolean -> FALSE .)
    COLON           reduce using rule 70 (boolean -> FALSE .)


state 52

    (2) stmt_list -> stmt stmt_list .

    $end            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    RBRACE          reduce using rule 2 (stmt_list -> stmt stmt_list .)
    CASE            reduce using rule 2 (stmt_list -> stmt stmt_list .)
    DEFAULT         reduce using rule 2 (stmt_list -> stmt stmt_list .)


state 53

    (13) class_declaration -> CLASS identifier . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 88


state 54

    (27) assignment -> identifier ASSIGN . expression SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    expression                     shift and go to state 89
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 55

    (66) expression -> identifier LBRACKET . expression RBRACKET
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    expression                     shift and go to state 90
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 56

    (67) expression -> identifier LBRACE . expression RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    expression                     shift and go to state 91
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 57

    (14) fun_declaration -> FUN identifier . LPAREN params RPAREN LBRACE stmt_list RBRACE

    LPAREN          shift and go to state 92


state 58

    (61) expression -> LPAREN expression . RPAREN
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RPAREN          shift and go to state 93
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 59

    (62) expression -> identifier .
    (66) expression -> identifier . LBRACKET expression RBRACKET
    (67) expression -> identifier . LBRACE expression RBRACE

    RPAREN          reduce using rule 62 (expression -> identifier .)
    PLUS            reduce using rule 62 (expression -> identifier .)
    MINUS           reduce using rule 62 (expression -> identifier .)
    MULTIPLY        reduce using rule 62 (expression -> identifier .)
    DIVIDE          reduce using rule 62 (expression -> identifier .)
    MODULUS         reduce using rule 62 (expression -> identifier .)
    AND             reduce using rule 62 (expression -> identifier .)
    OR              reduce using rule 62 (expression -> identifier .)
    EQUAL           reduce using rule 62 (expression -> identifier .)
    NOTEQUAL        reduce using rule 62 (expression -> identifier .)
    LESSTHAN        reduce using rule 62 (expression -> identifier .)
    GREATERTHAN     reduce using rule 62 (expression -> identifier .)
    LESSTHANEQUAL   reduce using rule 62 (expression -> identifier .)
    GREATERTHANEQUAL reduce using rule 62 (expression -> identifier .)
    INCREMENT       reduce using rule 62 (expression -> identifier .)
    DECREMENT       reduce using rule 62 (expression -> identifier .)
    COMMA           reduce using rule 62 (expression -> identifier .)
    POW             reduce using rule 62 (expression -> identifier .)
    QUESTION        reduce using rule 62 (expression -> identifier .)
    SEMICOLON       reduce using rule 62 (expression -> identifier .)
    RBRACKET        reduce using rule 62 (expression -> identifier .)
    RBRACE          reduce using rule 62 (expression -> identifier .)
    COLON           reduce using rule 62 (expression -> identifier .)
    LBRACKET        shift and go to state 55
    LBRACE          shift and go to state 56


state 60

    (18) import_declaration -> IMPORT STRING_LITERAL .

    CLASS           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FUN             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    IMPORT          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    PRINT           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    INT             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOAT           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLE          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    BOOLEAN         reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    INTLIST         reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATLIST       reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGLIST      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLELIST      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    INTARRAY        reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FLOATARRAY      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRINGARRAY     reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DOUBLEARRAY     reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    IDENTIFIER      reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    IF              reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FOR             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    WHILE           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    SWITCH          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    NOT             reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    LPAREN          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    NUMBER          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    STRING_LITERAL  reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    TRUE            reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    FALSE           reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    $end            reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    RBRACE          reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    CASE            reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)
    DEFAULT         reduce using rule 18 (import_declaration -> IMPORT STRING_LITERAL .)


state 61

    (22) assignment -> general_type identifier . ASSIGN expression SEMICOLON
    (19) variable_declaration -> general_type identifier . SEMICOLON

    ASSIGN          shift and go to state 94
    SEMICOLON       shift and go to state 95


state 62

    (35) if_stmt -> expression QUESTION . expression COLON expression SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 96
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 63

    (43) expression -> expression PLUS . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 97
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 64

    (44) expression -> expression MINUS . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 98
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 65

    (45) expression -> expression MULTIPLY . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 99
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 66

    (46) expression -> expression DIVIDE . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 100
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 67

    (47) expression -> expression MODULUS . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 101
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 68

    (48) expression -> expression AND . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 102
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 69

    (49) expression -> expression OR . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 103
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 70

    (50) expression -> expression EQUAL . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 104
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 71

    (51) expression -> expression NOTEQUAL . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 105
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 72

    (52) expression -> expression LESSTHAN . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 106
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 73

    (53) expression -> expression GREATERTHAN . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 107
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 74

    (54) expression -> expression LESSTHANEQUAL . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 108
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 75

    (55) expression -> expression GREATERTHANEQUAL . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 109
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 76

    (56) expression -> expression INCREMENT .

    QUESTION        reduce using rule 56 (expression -> expression INCREMENT .)
    PLUS            reduce using rule 56 (expression -> expression INCREMENT .)
    MINUS           reduce using rule 56 (expression -> expression INCREMENT .)
    MULTIPLY        reduce using rule 56 (expression -> expression INCREMENT .)
    DIVIDE          reduce using rule 56 (expression -> expression INCREMENT .)
    MODULUS         reduce using rule 56 (expression -> expression INCREMENT .)
    AND             reduce using rule 56 (expression -> expression INCREMENT .)
    OR              reduce using rule 56 (expression -> expression INCREMENT .)
    EQUAL           reduce using rule 56 (expression -> expression INCREMENT .)
    NOTEQUAL        reduce using rule 56 (expression -> expression INCREMENT .)
    LESSTHAN        reduce using rule 56 (expression -> expression INCREMENT .)
    GREATERTHAN     reduce using rule 56 (expression -> expression INCREMENT .)
    LESSTHANEQUAL   reduce using rule 56 (expression -> expression INCREMENT .)
    GREATERTHANEQUAL reduce using rule 56 (expression -> expression INCREMENT .)
    INCREMENT       reduce using rule 56 (expression -> expression INCREMENT .)
    DECREMENT       reduce using rule 56 (expression -> expression INCREMENT .)
    COMMA           reduce using rule 56 (expression -> expression INCREMENT .)
    POW             reduce using rule 56 (expression -> expression INCREMENT .)
    RPAREN          reduce using rule 56 (expression -> expression INCREMENT .)
    SEMICOLON       reduce using rule 56 (expression -> expression INCREMENT .)
    RBRACKET        reduce using rule 56 (expression -> expression INCREMENT .)
    RBRACE          reduce using rule 56 (expression -> expression INCREMENT .)
    COLON           reduce using rule 56 (expression -> expression INCREMENT .)


state 77

    (57) expression -> expression DECREMENT .

    QUESTION        reduce using rule 57 (expression -> expression DECREMENT .)
    PLUS            reduce using rule 57 (expression -> expression DECREMENT .)
    MINUS           reduce using rule 57 (expression -> expression DECREMENT .)
    MULTIPLY        reduce using rule 57 (expression -> expression DECREMENT .)
    DIVIDE          reduce using rule 57 (expression -> expression DECREMENT .)
    MODULUS         reduce using rule 57 (expression -> expression DECREMENT .)
    AND             reduce using rule 57 (expression -> expression DECREMENT .)
    OR              reduce using rule 57 (expression -> expression DECREMENT .)
    EQUAL           reduce using rule 57 (expression -> expression DECREMENT .)
    NOTEQUAL        reduce using rule 57 (expression -> expression DECREMENT .)
    LESSTHAN        reduce using rule 57 (expression -> expression DECREMENT .)
    GREATERTHAN     reduce using rule 57 (expression -> expression DECREMENT .)
    LESSTHANEQUAL   reduce using rule 57 (expression -> expression DECREMENT .)
    GREATERTHANEQUAL reduce using rule 57 (expression -> expression DECREMENT .)
    INCREMENT       reduce using rule 57 (expression -> expression DECREMENT .)
    DECREMENT       reduce using rule 57 (expression -> expression DECREMENT .)
    COMMA           reduce using rule 57 (expression -> expression DECREMENT .)
    POW             reduce using rule 57 (expression -> expression DECREMENT .)
    RPAREN          reduce using rule 57 (expression -> expression DECREMENT .)
    SEMICOLON       reduce using rule 57 (expression -> expression DECREMENT .)
    RBRACKET        reduce using rule 57 (expression -> expression DECREMENT .)
    RBRACE          reduce using rule 57 (expression -> expression DECREMENT .)
    COLON           reduce using rule 57 (expression -> expression DECREMENT .)


state 78

    (58) expression -> expression COMMA . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 110
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 79

    (59) expression -> expression POW . expression
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 111
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 80

    (23) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> list_type identifier . ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (20) variable_declaration -> list_type identifier . LBRACKET RBRACKET SEMICOLON

    LBRACKET        shift and go to state 112
    ASSIGN          shift and go to state 113


state 81

    (25) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> array_type identifier . ASSIGN LBRACE expression RBRACE SEMICOLON
    (21) variable_declaration -> array_type identifier . LBRACE RBRACE SEMICOLON

    LBRACE          shift and go to state 114
    ASSIGN          shift and go to state 115


state 82

    (28) print_stmt -> PRINT LPAREN . expression RPAREN SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 116
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 83

    (33) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> IF LPAREN . expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 117
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 84

    (36) for_stmt -> FOR LPAREN . assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41

    assignment                     shift and go to state 118
    general_type                   shift and go to state 119
    identifier                     shift and go to state 120
    list_type                      shift and go to state 121
    array_type                     shift and go to state 122

state 85

    (37) while_stmt -> WHILE LPAREN . expression RPAREN LBRACE stmt_list RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 123
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 86

    (38) switch_stmt -> SWITCH LPAREN . expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 124
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 87

    (60) expression -> NOT expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 60 (expression -> NOT expression .)
    RPAREN          reduce using rule 60 (expression -> NOT expression .)
    SEMICOLON       reduce using rule 60 (expression -> NOT expression .)
    RBRACKET        reduce using rule 60 (expression -> NOT expression .)
    RBRACE          reduce using rule 60 (expression -> NOT expression .)
    COLON           reduce using rule 60 (expression -> NOT expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 60 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 60 (expression -> NOT expression .) ]
  ! MULTIPLY        [ reduce using rule 60 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 60 (expression -> NOT expression .) ]
  ! MODULUS         [ reduce using rule 60 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 60 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 60 (expression -> NOT expression .) ]
  ! EQUAL           [ reduce using rule 60 (expression -> NOT expression .) ]
  ! NOTEQUAL        [ reduce using rule 60 (expression -> NOT expression .) ]
  ! LESSTHAN        [ reduce using rule 60 (expression -> NOT expression .) ]
  ! GREATERTHAN     [ reduce using rule 60 (expression -> NOT expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 60 (expression -> NOT expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 60 (expression -> NOT expression .) ]
  ! INCREMENT       [ reduce using rule 60 (expression -> NOT expression .) ]
  ! DECREMENT       [ reduce using rule 60 (expression -> NOT expression .) ]
  ! COMMA           [ reduce using rule 60 (expression -> NOT expression .) ]
  ! POW             [ reduce using rule 60 (expression -> NOT expression .) ]


state 88

    (13) class_declaration -> CLASS identifier LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    identifier                     shift and go to state 13
    stmt_list                      shift and go to state 125
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 89

    (27) assignment -> identifier ASSIGN expression . SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    SEMICOLON       shift and go to state 126
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 90

    (66) expression -> identifier LBRACKET expression . RBRACKET
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RBRACKET        shift and go to state 127
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 91

    (67) expression -> identifier LBRACE expression . RBRACE
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RBRACE          shift and go to state 128
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 92

    (14) fun_declaration -> FUN identifier LPAREN . params RPAREN LBRACE stmt_list RBRACE
    (15) params -> . general_type identifier COMMA params
    (16) params -> . general_type identifier
    (17) params -> . empty
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (87) empty -> .
    (85) identifier -> . IDENTIFIER

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    RPAREN          reduce using rule 87 (empty -> .)
    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 129
    params                         shift and go to state 130
    general_type                   shift and go to state 131
    empty                          shift and go to state 132

state 93

    (61) expression -> LPAREN expression RPAREN .

    QUESTION        reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    MODULUS         reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    LESSTHANEQUAL   reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    GREATERTHANEQUAL reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    POW             reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 61 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 61 (expression -> LPAREN expression RPAREN .)


state 94

    (22) assignment -> general_type identifier ASSIGN . expression SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    expression                     shift and go to state 133
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 95

    (19) variable_declaration -> general_type identifier SEMICOLON .

    CLASS           reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    FUN             reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    IMPORT          reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    PRINT           reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    INT             reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOAT           reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLE          reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    STRING          reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    BOOLEAN         reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    INTLIST         reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOATLIST       reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    STRINGLIST      reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLELIST      reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    INTARRAY        reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    FLOATARRAY      reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    STRINGARRAY     reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    DOUBLEARRAY     reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    IDENTIFIER      reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    IF              reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    FOR             reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    WHILE           reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    SWITCH          reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    NOT             reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    LPAREN          reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    NUMBER          reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    STRING_LITERAL  reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    TRUE            reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    FALSE           reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    $end            reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    RBRACE          reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    CASE            reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)
    DEFAULT         reduce using rule 19 (variable_declaration -> general_type identifier SEMICOLON .)


state 96

    (35) if_stmt -> expression QUESTION expression . COLON expression SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    COLON           shift and go to state 134
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 97

    (43) expression -> expression PLUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 43 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 43 (expression -> expression PLUS expression .)
    SEMICOLON       reduce using rule 43 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 43 (expression -> expression PLUS expression .)
    RBRACE          reduce using rule 43 (expression -> expression PLUS expression .)
    COLON           reduce using rule 43 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! MODULUS         [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! EQUAL           [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! LESSTHAN        [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! INCREMENT       [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! DECREMENT       [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! COMMA           [ reduce using rule 43 (expression -> expression PLUS expression .) ]
  ! POW             [ reduce using rule 43 (expression -> expression PLUS expression .) ]


state 98

    (44) expression -> expression MINUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 44 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 44 (expression -> expression MINUS expression .)
    SEMICOLON       reduce using rule 44 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 44 (expression -> expression MINUS expression .)
    RBRACE          reduce using rule 44 (expression -> expression MINUS expression .)
    COLON           reduce using rule 44 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! MODULUS         [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! EQUAL           [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! LESSTHAN        [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! INCREMENT       [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! DECREMENT       [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! COMMA           [ reduce using rule 44 (expression -> expression MINUS expression .) ]
  ! POW             [ reduce using rule 44 (expression -> expression MINUS expression .) ]


state 99

    (45) expression -> expression MULTIPLY expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 45 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 45 (expression -> expression MULTIPLY expression .)
    SEMICOLON       reduce using rule 45 (expression -> expression MULTIPLY expression .)
    RBRACKET        reduce using rule 45 (expression -> expression MULTIPLY expression .)
    RBRACE          reduce using rule 45 (expression -> expression MULTIPLY expression .)
    COLON           reduce using rule 45 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! MODULUS         [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! AND             [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! OR              [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! EQUAL           [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! NOTEQUAL        [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHAN        [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHAN     [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! INCREMENT       [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! DECREMENT       [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! COMMA           [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]
  ! POW             [ reduce using rule 45 (expression -> expression MULTIPLY expression .) ]


state 100

    (46) expression -> expression DIVIDE expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 46 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 46 (expression -> expression DIVIDE expression .)
    SEMICOLON       reduce using rule 46 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 46 (expression -> expression DIVIDE expression .)
    RBRACE          reduce using rule 46 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 46 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! MODULUS         [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! AND             [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! EQUAL           [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! NOTEQUAL        [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! LESSTHAN        [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHAN     [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! INCREMENT       [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! DECREMENT       [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! COMMA           [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]
  ! POW             [ reduce using rule 46 (expression -> expression DIVIDE expression .) ]


state 101

    (47) expression -> expression MODULUS expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 47 (expression -> expression MODULUS expression .)
    RPAREN          reduce using rule 47 (expression -> expression MODULUS expression .)
    SEMICOLON       reduce using rule 47 (expression -> expression MODULUS expression .)
    RBRACKET        reduce using rule 47 (expression -> expression MODULUS expression .)
    RBRACE          reduce using rule 47 (expression -> expression MODULUS expression .)
    COLON           reduce using rule 47 (expression -> expression MODULUS expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! MINUS           [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! MULTIPLY        [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! DIVIDE          [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! MODULUS         [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! AND             [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! OR              [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! EQUAL           [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! NOTEQUAL        [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! LESSTHAN        [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! GREATERTHAN     [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! INCREMENT       [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! DECREMENT       [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! COMMA           [ reduce using rule 47 (expression -> expression MODULUS expression .) ]
  ! POW             [ reduce using rule 47 (expression -> expression MODULUS expression .) ]


state 102

    (48) expression -> expression AND expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 48 (expression -> expression AND expression .)
    RPAREN          reduce using rule 48 (expression -> expression AND expression .)
    SEMICOLON       reduce using rule 48 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 48 (expression -> expression AND expression .)
    RBRACE          reduce using rule 48 (expression -> expression AND expression .)
    COLON           reduce using rule 48 (expression -> expression AND expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! MULTIPLY        [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! MODULUS         [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! AND             [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! OR              [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! EQUAL           [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! NOTEQUAL        [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! LESSTHAN        [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! GREATERTHAN     [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! INCREMENT       [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! DECREMENT       [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! COMMA           [ reduce using rule 48 (expression -> expression AND expression .) ]
  ! POW             [ reduce using rule 48 (expression -> expression AND expression .) ]


state 103

    (49) expression -> expression OR expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 49 (expression -> expression OR expression .)
    RPAREN          reduce using rule 49 (expression -> expression OR expression .)
    SEMICOLON       reduce using rule 49 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 49 (expression -> expression OR expression .)
    RBRACE          reduce using rule 49 (expression -> expression OR expression .)
    COLON           reduce using rule 49 (expression -> expression OR expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! MULTIPLY        [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! MODULUS         [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! OR              [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! EQUAL           [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! NOTEQUAL        [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! LESSTHAN        [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! GREATERTHAN     [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! INCREMENT       [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! DECREMENT       [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! COMMA           [ reduce using rule 49 (expression -> expression OR expression .) ]
  ! POW             [ reduce using rule 49 (expression -> expression OR expression .) ]


state 104

    (50) expression -> expression EQUAL expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 50 (expression -> expression EQUAL expression .)
    RPAREN          reduce using rule 50 (expression -> expression EQUAL expression .)
    SEMICOLON       reduce using rule 50 (expression -> expression EQUAL expression .)
    RBRACKET        reduce using rule 50 (expression -> expression EQUAL expression .)
    RBRACE          reduce using rule 50 (expression -> expression EQUAL expression .)
    COLON           reduce using rule 50 (expression -> expression EQUAL expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! MINUS           [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! MODULUS         [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! AND             [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! OR              [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! EQUAL           [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! COMMA           [ reduce using rule 50 (expression -> expression EQUAL expression .) ]
  ! POW             [ reduce using rule 50 (expression -> expression EQUAL expression .) ]


state 105

    (51) expression -> expression NOTEQUAL expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 51 (expression -> expression NOTEQUAL expression .)
    RPAREN          reduce using rule 51 (expression -> expression NOTEQUAL expression .)
    SEMICOLON       reduce using rule 51 (expression -> expression NOTEQUAL expression .)
    RBRACKET        reduce using rule 51 (expression -> expression NOTEQUAL expression .)
    RBRACE          reduce using rule 51 (expression -> expression NOTEQUAL expression .)
    COLON           reduce using rule 51 (expression -> expression NOTEQUAL expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! MINUS           [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! AND             [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! OR              [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! COMMA           [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]
  ! POW             [ reduce using rule 51 (expression -> expression NOTEQUAL expression .) ]


state 106

    (52) expression -> expression LESSTHAN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 52 (expression -> expression LESSTHAN expression .)
    RPAREN          reduce using rule 52 (expression -> expression LESSTHAN expression .)
    SEMICOLON       reduce using rule 52 (expression -> expression LESSTHAN expression .)
    RBRACKET        reduce using rule 52 (expression -> expression LESSTHAN expression .)
    RBRACE          reduce using rule 52 (expression -> expression LESSTHAN expression .)
    COLON           reduce using rule 52 (expression -> expression LESSTHAN expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! MINUS           [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! MODULUS         [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! AND             [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! OR              [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! EQUAL           [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! COMMA           [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]
  ! POW             [ reduce using rule 52 (expression -> expression LESSTHAN expression .) ]


state 107

    (53) expression -> expression GREATERTHAN expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 53 (expression -> expression GREATERTHAN expression .)
    RPAREN          reduce using rule 53 (expression -> expression GREATERTHAN expression .)
    SEMICOLON       reduce using rule 53 (expression -> expression GREATERTHAN expression .)
    RBRACKET        reduce using rule 53 (expression -> expression GREATERTHAN expression .)
    RBRACE          reduce using rule 53 (expression -> expression GREATERTHAN expression .)
    COLON           reduce using rule 53 (expression -> expression GREATERTHAN expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! MINUS           [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! MULTIPLY        [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! MODULUS         [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! AND             [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! OR              [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! EQUAL           [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! NOTEQUAL        [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHAN        [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHAN     [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! INCREMENT       [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! DECREMENT       [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! COMMA           [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]
  ! POW             [ reduce using rule 53 (expression -> expression GREATERTHAN expression .) ]


state 108

    (54) expression -> expression LESSTHANEQUAL expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .)
    RPAREN          reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .)
    SEMICOLON       reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .)
    RBRACKET        reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .)
    RBRACE          reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .)
    COLON           reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! COMMA           [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 54 (expression -> expression LESSTHANEQUAL expression .) ]


state 109

    (55) expression -> expression GREATERTHANEQUAL expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .)
    RPAREN          reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .)
    SEMICOLON       reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACKET        reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .)
    RBRACE          reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .)
    COLON           reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MINUS           [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MULTIPLY        [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! MODULUS         [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! EQUAL           [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! NOTEQUAL        [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHAN        [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHAN     [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! COMMA           [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]
  ! POW             [ reduce using rule 55 (expression -> expression GREATERTHANEQUAL expression .) ]


state 110

    (58) expression -> expression COMMA expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 58 (expression -> expression COMMA expression .)
    RPAREN          reduce using rule 58 (expression -> expression COMMA expression .)
    SEMICOLON       reduce using rule 58 (expression -> expression COMMA expression .)
    RBRACKET        reduce using rule 58 (expression -> expression COMMA expression .)
    RBRACE          reduce using rule 58 (expression -> expression COMMA expression .)
    COLON           reduce using rule 58 (expression -> expression COMMA expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! MULTIPLY        [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! MODULUS         [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! EQUAL           [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! NOTEQUAL        [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! LESSTHAN        [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! GREATERTHAN     [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! INCREMENT       [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! DECREMENT       [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! COMMA           [ reduce using rule 58 (expression -> expression COMMA expression .) ]
  ! POW             [ reduce using rule 58 (expression -> expression COMMA expression .) ]


state 111

    (59) expression -> expression POW expression .
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MODULUS resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
  ! shift/reduce conflict for LESSTHANEQUAL resolved as shift
  ! shift/reduce conflict for GREATERTHANEQUAL resolved as shift
  ! shift/reduce conflict for INCREMENT resolved as shift
  ! shift/reduce conflict for DECREMENT resolved as shift
  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for POW resolved as shift
    QUESTION        reduce using rule 59 (expression -> expression POW expression .)
    RPAREN          reduce using rule 59 (expression -> expression POW expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression POW expression .)
    RBRACKET        reduce using rule 59 (expression -> expression POW expression .)
    RBRACE          reduce using rule 59 (expression -> expression POW expression .)
    COLON           reduce using rule 59 (expression -> expression POW expression .)
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79

  ! PLUS            [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! MULTIPLY        [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! MODULUS         [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! EQUAL           [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! NOTEQUAL        [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! LESSTHAN        [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! GREATERTHAN     [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! LESSTHANEQUAL   [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! GREATERTHANEQUAL [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! INCREMENT       [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! DECREMENT       [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! COMMA           [ reduce using rule 59 (expression -> expression POW expression .) ]
  ! POW             [ reduce using rule 59 (expression -> expression POW expression .) ]


state 112

    (23) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN expression SEMICOLON
    (20) variable_declaration -> list_type identifier LBRACKET . RBRACKET SEMICOLON
    (68) digit -> . NUMBER

    RBRACKET        shift and go to state 136
    NUMBER          shift and go to state 49

    digit                          shift and go to state 135

state 113

    (24) assignment -> list_type identifier ASSIGN . LBRACKET expression RBRACKET SEMICOLON

    LBRACKET        shift and go to state 137


state 114

    (25) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN expression SEMICOLON
    (21) variable_declaration -> array_type identifier LBRACE . RBRACE SEMICOLON
    (68) digit -> . NUMBER

    RBRACE          shift and go to state 139
    NUMBER          shift and go to state 49

    digit                          shift and go to state 138

state 115

    (26) assignment -> array_type identifier ASSIGN . LBRACE expression RBRACE SEMICOLON

    LBRACE          shift and go to state 140


state 116

    (28) print_stmt -> PRINT LPAREN expression . RPAREN SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RPAREN          shift and go to state 141
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 117

    (33) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> IF LPAREN expression . RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RPAREN          shift and go to state 142
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 118

    (36) for_stmt -> FOR LPAREN assignment . SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE

    SEMICOLON       shift and go to state 143


state 119

    (22) assignment -> general_type . identifier ASSIGN expression SEMICOLON
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 144

state 120

    (27) assignment -> identifier . ASSIGN expression SEMICOLON
    (76) general_type -> identifier .

    ASSIGN          shift and go to state 54
    IDENTIFIER      reduce using rule 76 (general_type -> identifier .)


state 121

    (23) assignment -> list_type . identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> list_type . identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 145

state 122

    (25) assignment -> array_type . identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> array_type . identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 146

state 123

    (37) while_stmt -> WHILE LPAREN expression . RPAREN LBRACE stmt_list RBRACE
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RPAREN          shift and go to state 147
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 124

    (38) switch_stmt -> SWITCH LPAREN expression . RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RPAREN          shift and go to state 148
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 125

    (13) class_declaration -> CLASS identifier LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 149


state 126

    (27) assignment -> identifier ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INT             reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    IF              reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    $end            reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 27 (assignment -> identifier ASSIGN expression SEMICOLON .)


state 127

    (66) expression -> identifier LBRACKET expression RBRACKET .

    QUESTION        reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    MULTIPLY        reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    MODULUS         reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    AND             reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    OR              reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    EQUAL           reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    NOTEQUAL        reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    LESSTHAN        reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    GREATERTHAN     reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    LESSTHANEQUAL   reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    GREATERTHANEQUAL reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    POW             reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)
    COLON           reduce using rule 66 (expression -> identifier LBRACKET expression RBRACKET .)


state 128

    (67) expression -> identifier LBRACE expression RBRACE .

    QUESTION        reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    PLUS            reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    MINUS           reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    MULTIPLY        reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    DIVIDE          reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    MODULUS         reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    AND             reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    OR              reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    EQUAL           reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    NOTEQUAL        reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    LESSTHAN        reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    GREATERTHAN     reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    LESSTHANEQUAL   reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    GREATERTHANEQUAL reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    INCREMENT       reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    DECREMENT       reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    COMMA           reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    POW             reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    RPAREN          reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    SEMICOLON       reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    RBRACKET        reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    RBRACE          reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)
    COLON           reduce using rule 67 (expression -> identifier LBRACE expression RBRACE .)


state 129

    (76) general_type -> identifier .

    IDENTIFIER      reduce using rule 76 (general_type -> identifier .)


state 130

    (14) fun_declaration -> FUN identifier LPAREN params . RPAREN LBRACE stmt_list RBRACE

    RPAREN          shift and go to state 150


state 131

    (15) params -> general_type . identifier COMMA params
    (16) params -> general_type . identifier
    (85) identifier -> . IDENTIFIER

    IDENTIFIER      shift and go to state 41

    identifier                     shift and go to state 151

state 132

    (17) params -> empty .

    RPAREN          reduce using rule 17 (params -> empty .)


state 133

    (22) assignment -> general_type identifier ASSIGN expression . SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    SEMICOLON       shift and go to state 152
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 134

    (35) if_stmt -> expression QUESTION expression COLON . expression SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 153
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 135

    (23) assignment -> list_type identifier LBRACKET digit . RBRACKET ASSIGN expression SEMICOLON

    RBRACKET        shift and go to state 154


state 136

    (20) variable_declaration -> list_type identifier LBRACKET RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 155


state 137

    (24) assignment -> list_type identifier ASSIGN LBRACKET . expression RBRACKET SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    expression                     shift and go to state 156
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 138

    (25) assignment -> array_type identifier LBRACE digit . RBRACE ASSIGN expression SEMICOLON

    RBRACE          shift and go to state 157


state 139

    (21) variable_declaration -> array_type identifier LBRACE RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 158


state 140

    (26) assignment -> array_type identifier ASSIGN LBRACE . expression RBRACE SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    expression                     shift and go to state 159
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 141

    (28) print_stmt -> PRINT LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 160


state 142

    (33) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE
    (34) if_stmt -> IF LPAREN expression RPAREN . LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 161


state 143

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON . expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 162
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 144

    (22) assignment -> general_type identifier . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 94


state 145

    (23) assignment -> list_type identifier . LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> list_type identifier . ASSIGN LBRACKET expression RBRACKET SEMICOLON

    LBRACKET        shift and go to state 163
    ASSIGN          shift and go to state 113


state 146

    (25) assignment -> array_type identifier . LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> array_type identifier . ASSIGN LBRACE expression RBRACE SEMICOLON

    LBRACE          shift and go to state 164
    ASSIGN          shift and go to state 115


state 147

    (37) while_stmt -> WHILE LPAREN expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 165


state 148

    (38) switch_stmt -> SWITCH LPAREN expression RPAREN . LBRACE case_stmts default_stmt RBRACE

    LBRACE          shift and go to state 166


state 149

    (13) class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    INT             reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    IF              reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    $end            reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 13 (class_declaration -> CLASS identifier LBRACE stmt_list RBRACE .)


state 150

    (14) fun_declaration -> FUN identifier LPAREN params RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 167


state 151

    (15) params -> general_type identifier . COMMA params
    (16) params -> general_type identifier .

    COMMA           shift and go to state 168
    RPAREN          reduce using rule 16 (params -> general_type identifier .)


state 152

    (22) assignment -> general_type identifier ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INT             reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    IF              reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    $end            reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 22 (assignment -> general_type identifier ASSIGN expression SEMICOLON .)


state 153

    (35) if_stmt -> expression QUESTION expression COLON expression . SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    SEMICOLON       shift and go to state 169
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 154

    (23) assignment -> list_type identifier LBRACKET digit RBRACKET . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 170


state 155

    (20) variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .

    CLASS           reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FUN             reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IMPORT          reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    PRINT           reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INT             reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRING          reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INTLIST         reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOATLIST       reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRINGLIST      reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLELIST      reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    INTARRAY        reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FLOATARRAY      reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRINGARRAY     reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DOUBLEARRAY     reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    IF              reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FOR             reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    WHILE           reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    NOT             reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    TRUE            reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    FALSE           reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    $end            reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    CASE            reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 20 (variable_declaration -> list_type identifier LBRACKET RBRACKET SEMICOLON .)


state 156

    (24) assignment -> list_type identifier ASSIGN LBRACKET expression . RBRACKET SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RBRACKET        shift and go to state 171
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 157

    (25) assignment -> array_type identifier LBRACE digit RBRACE . ASSIGN expression SEMICOLON

    ASSIGN          shift and go to state 172


state 158

    (21) variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .

    CLASS           reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FUN             reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IMPORT          reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    PRINT           reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INT             reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOAT           reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLE          reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRING          reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    BOOLEAN         reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INTLIST         reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOATLIST       reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRINGLIST      reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLELIST      reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    INTARRAY        reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FLOATARRAY      reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRINGARRAY     reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DOUBLEARRAY     reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    IF              reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FOR             reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    WHILE           reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    SWITCH          reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    NOT             reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    LPAREN          reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    NUMBER          reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    STRING_LITERAL  reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    TRUE            reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    FALSE           reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    $end            reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    RBRACE          reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    CASE            reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 21 (variable_declaration -> array_type identifier LBRACE RBRACE SEMICOLON .)


state 159

    (26) assignment -> array_type identifier ASSIGN LBRACE expression . RBRACE SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RBRACE          shift and go to state 173
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 160

    (28) print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .

    CLASS           reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FUN             reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IMPORT          reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    PRINT           reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INT             reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOAT           reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLE          reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING          reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    BOOLEAN         reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTLIST         reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATLIST       reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGLIST      reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLELIST      reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    INTARRAY        reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FLOATARRAY      reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRINGARRAY     reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DOUBLEARRAY     reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    SWITCH          reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NOT             reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    STRING_LITERAL  reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    TRUE            reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    FALSE           reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    $end            reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    RBRACE          reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    CASE            reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 28 (print_stmt -> PRINT LPAREN expression RPAREN SEMICOLON .)


state 161

    (33) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (34) if_stmt -> IF LPAREN expression RPAREN LBRACE . stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 174
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 162

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON expression . SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    SEMICOLON       shift and go to state 175
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 163

    (23) assignment -> list_type identifier LBRACKET . digit RBRACKET ASSIGN expression SEMICOLON
    (68) digit -> . NUMBER

    NUMBER          shift and go to state 49

    digit                          shift and go to state 135

state 164

    (25) assignment -> array_type identifier LBRACE . digit RBRACE ASSIGN expression SEMICOLON
    (68) digit -> . NUMBER

    NUMBER          shift and go to state 49

    digit                          shift and go to state 138

state 165

    (37) while_stmt -> WHILE LPAREN expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 176
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 166

    (38) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE . case_stmts default_stmt RBRACE
    (39) case_stmts -> . CASE expression COLON stmt_list case_stmts
    (40) case_stmts -> . empty
    (87) empty -> .

    CASE            shift and go to state 178
    DEFAULT         reduce using rule 87 (empty -> .)
    RBRACE          reduce using rule 87 (empty -> .)

    case_stmts                     shift and go to state 177
    empty                          shift and go to state 179

state 167

    (14) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    identifier                     shift and go to state 13
    stmt_list                      shift and go to state 180
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 168

    (15) params -> general_type identifier COMMA . params
    (15) params -> . general_type identifier COMMA params
    (16) params -> . general_type identifier
    (17) params -> . empty
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (87) empty -> .
    (85) identifier -> . IDENTIFIER

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    RPAREN          reduce using rule 87 (empty -> .)
    IDENTIFIER      shift and go to state 41

    general_type                   shift and go to state 131
    identifier                     shift and go to state 129
    params                         shift and go to state 181
    empty                          shift and go to state 132

state 169

    (35) if_stmt -> expression QUESTION expression COLON expression SEMICOLON .

    CLASS           reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FUN             reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IMPORT          reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    PRINT           reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INT             reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOAT           reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLE          reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING          reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    BOOLEAN         reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTLIST         reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATLIST       reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGLIST      reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLELIST      reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    INTARRAY        reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FLOATARRAY      reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRINGARRAY     reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IDENTIFIER      reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    IF              reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FOR             reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    WHILE           reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    SWITCH          reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NOT             reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    LPAREN          reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    NUMBER          reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    TRUE            reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    FALSE           reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    $end            reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    RBRACE          reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    CASE            reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)
    DEFAULT         reduce using rule 35 (if_stmt -> expression QUESTION expression COLON expression SEMICOLON .)


state 170

    (23) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN . expression SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    expression                     shift and go to state 182
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 171

    (24) assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET . SEMICOLON

    SEMICOLON       shift and go to state 183


state 172

    (25) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN . expression SEMICOLON
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    expression                     shift and go to state 184
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 173

    (26) assignment -> array_type identifier ASSIGN LBRACE expression RBRACE . SEMICOLON

    SEMICOLON       shift and go to state 185


state 174

    (33) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE
    (34) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list . RBRACE ELSE LBRACE stmt_list RBRACE

    RBRACE          shift and go to state 186


state 175

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON . expression RPAREN LBRACE stmt_list RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 187
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 176

    (37) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 188


state 177

    (38) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts . default_stmt RBRACE
    (41) default_stmt -> . DEFAULT COLON stmt_list
    (42) default_stmt -> . empty
    (87) empty -> .

    DEFAULT         shift and go to state 190
    RBRACE          reduce using rule 87 (empty -> .)

    default_stmt                   shift and go to state 189
    empty                          shift and go to state 191

state 178

    (39) case_stmts -> CASE . expression COLON stmt_list case_stmts
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (85) identifier -> . IDENTIFIER
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    IDENTIFIER      shift and go to state 41
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

    expression                     shift and go to state 192
    identifier                     shift and go to state 59
    digit                          shift and go to state 21
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 179

    (40) case_stmts -> empty .

    DEFAULT         reduce using rule 40 (case_stmts -> empty .)
    RBRACE          reduce using rule 40 (case_stmts -> empty .)


state 180

    (14) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 193


state 181

    (15) params -> general_type identifier COMMA params .

    RPAREN          reduce using rule 15 (params -> general_type identifier COMMA params .)


state 182

    (23) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression . SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    SEMICOLON       shift and go to state 194
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 183

    (24) assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .

    CLASS           reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FUN             reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IMPORT          reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    PRINT           reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INT             reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOAT           reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLE          reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRING          reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    BOOLEAN         reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INTLIST         reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOATLIST       reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRINGLIST      reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLELIST      reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    INTARRAY        reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FLOATARRAY      reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRINGARRAY     reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DOUBLEARRAY     reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IDENTIFIER      reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    IF              reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FOR             reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    WHILE           reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    SWITCH          reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    NOT             reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    LPAREN          reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    NUMBER          reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    STRING_LITERAL  reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    TRUE            reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    FALSE           reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    $end            reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    RBRACE          reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    CASE            reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    DEFAULT         reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)
    SEMICOLON       reduce using rule 24 (assignment -> list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON .)


state 184

    (25) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression . SEMICOLON
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    SEMICOLON       shift and go to state 195
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 185

    (26) assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .

    CLASS           reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FUN             reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IMPORT          reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    PRINT           reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INT             reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOAT           reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLE          reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRING          reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    BOOLEAN         reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INTLIST         reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOATLIST       reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRINGLIST      reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLELIST      reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    INTARRAY        reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FLOATARRAY      reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRINGARRAY     reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DOUBLEARRAY     reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IDENTIFIER      reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    IF              reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FOR             reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    WHILE           reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    SWITCH          reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    NOT             reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    LPAREN          reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    NUMBER          reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    STRING_LITERAL  reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    TRUE            reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    FALSE           reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    $end            reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    RBRACE          reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    CASE            reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    DEFAULT         reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)
    SEMICOLON       reduce using rule 26 (assignment -> array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON .)


state 186

    (33) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .
    (34) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE . ELSE LBRACE stmt_list RBRACE

    CLASS           reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 33 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    ELSE            shift and go to state 196


state 187

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression . RPAREN LBRACE stmt_list RBRACE
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    RPAREN          shift and go to state 197
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 188

    (37) while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 37 (while_stmt -> WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE .)


state 189

    (38) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt . RBRACE

    RBRACE          shift and go to state 198


state 190

    (41) default_stmt -> DEFAULT . COLON stmt_list

    COLON           shift and go to state 199


state 191

    (42) default_stmt -> empty .

    RBRACE          reduce using rule 42 (default_stmt -> empty .)


state 192

    (39) case_stmts -> CASE expression . COLON stmt_list case_stmts
    (43) expression -> expression . PLUS expression
    (44) expression -> expression . MINUS expression
    (45) expression -> expression . MULTIPLY expression
    (46) expression -> expression . DIVIDE expression
    (47) expression -> expression . MODULUS expression
    (48) expression -> expression . AND expression
    (49) expression -> expression . OR expression
    (50) expression -> expression . EQUAL expression
    (51) expression -> expression . NOTEQUAL expression
    (52) expression -> expression . LESSTHAN expression
    (53) expression -> expression . GREATERTHAN expression
    (54) expression -> expression . LESSTHANEQUAL expression
    (55) expression -> expression . GREATERTHANEQUAL expression
    (56) expression -> expression . INCREMENT
    (57) expression -> expression . DECREMENT
    (58) expression -> expression . COMMA expression
    (59) expression -> expression . POW expression

    COLON           shift and go to state 200
    PLUS            shift and go to state 63
    MINUS           shift and go to state 64
    MULTIPLY        shift and go to state 65
    DIVIDE          shift and go to state 66
    MODULUS         shift and go to state 67
    AND             shift and go to state 68
    OR              shift and go to state 69
    EQUAL           shift and go to state 70
    NOTEQUAL        shift and go to state 71
    LESSTHAN        shift and go to state 72
    GREATERTHAN     shift and go to state 73
    LESSTHANEQUAL   shift and go to state 74
    GREATERTHANEQUAL shift and go to state 75
    INCREMENT       shift and go to state 76
    DECREMENT       shift and go to state 77
    COMMA           shift and go to state 78
    POW             shift and go to state 79


state 193

    (14) fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 14 (fun_declaration -> FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE .)


state 194

    (23) assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INT             reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    IF              reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    $end            reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 23 (assignment -> list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON .)


state 195

    (25) assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .

    CLASS           reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FUN             reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IMPORT          reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    PRINT           reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INT             reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOAT           reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLE          reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRING          reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    BOOLEAN         reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INTLIST         reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOATLIST       reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRINGLIST      reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLELIST      reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    INTARRAY        reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FLOATARRAY      reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRINGARRAY     reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DOUBLEARRAY     reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IDENTIFIER      reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    IF              reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FOR             reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    WHILE           reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    SWITCH          reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    NOT             reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    LPAREN          reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    NUMBER          reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    STRING_LITERAL  reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    TRUE            reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    FALSE           reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    $end            reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    RBRACE          reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    CASE            reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    DEFAULT         reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)
    SEMICOLON       reduce using rule 25 (assignment -> array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON .)


state 196

    (34) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 201


state 197

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN . LBRACE stmt_list RBRACE

    LBRACE          shift and go to state 202


state 198

    (38) switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .

    CLASS           reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FUN             reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IMPORT          reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    PRINT           reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INT             reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOAT           reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLE          reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRING          reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    BOOLEAN         reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INTLIST         reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOATLIST       reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRINGLIST      reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLELIST      reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    INTARRAY        reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FLOATARRAY      reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRINGARRAY     reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DOUBLEARRAY     reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IDENTIFIER      reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    IF              reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FOR             reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    WHILE           reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    SWITCH          reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    NOT             reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    LPAREN          reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    NUMBER          reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    STRING_LITERAL  reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    TRUE            reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    FALSE           reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    $end            reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    RBRACE          reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    CASE            reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)
    DEFAULT         reduce using rule 38 (switch_stmt -> SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE .)


state 199

    (41) default_stmt -> DEFAULT COLON . stmt_list
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    stmt_list                      shift and go to state 203
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    expression                     shift and go to state 19
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 200

    (39) case_stmts -> CASE expression COLON . stmt_list case_stmts
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    CASE            reduce using rule 87 (empty -> .)
    DEFAULT         reduce using rule 87 (empty -> .)
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 204
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 201

    (34) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    expression                     shift and go to state 19
    stmt_list                      shift and go to state 205
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    assignment                     shift and go to state 8
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 202

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE . stmt_list RBRACE
    (2) stmt_list -> . stmt stmt_list
    (3) stmt_list -> . stmt
    (4) stmt_list -> . empty
    (5) stmt -> . class_declaration
    (6) stmt -> . fun_declaration
    (7) stmt -> . import_declaration
    (8) stmt -> . assignment
    (9) stmt -> . variable_declaration
    (10) stmt -> . print_stmt
    (11) stmt -> . control_structure
    (12) stmt -> . empty
    (87) empty -> .
    (13) class_declaration -> . CLASS identifier LBRACE stmt_list RBRACE
    (14) fun_declaration -> . FUN identifier LPAREN params RPAREN LBRACE stmt_list RBRACE
    (18) import_declaration -> . IMPORT STRING_LITERAL
    (22) assignment -> . general_type identifier ASSIGN expression SEMICOLON
    (23) assignment -> . list_type identifier LBRACKET digit RBRACKET ASSIGN expression SEMICOLON
    (24) assignment -> . list_type identifier ASSIGN LBRACKET expression RBRACKET SEMICOLON
    (25) assignment -> . array_type identifier LBRACE digit RBRACE ASSIGN expression SEMICOLON
    (26) assignment -> . array_type identifier ASSIGN LBRACE expression RBRACE SEMICOLON
    (27) assignment -> . identifier ASSIGN expression SEMICOLON
    (19) variable_declaration -> . general_type identifier SEMICOLON
    (20) variable_declaration -> . list_type identifier LBRACKET RBRACKET SEMICOLON
    (21) variable_declaration -> . array_type identifier LBRACE RBRACE SEMICOLON
    (28) print_stmt -> . PRINT LPAREN expression RPAREN SEMICOLON
    (29) control_structure -> . if_stmt
    (30) control_structure -> . for_stmt
    (31) control_structure -> . while_stmt
    (32) control_structure -> . switch_stmt
    (71) general_type -> . INT
    (72) general_type -> . FLOAT
    (73) general_type -> . DOUBLE
    (74) general_type -> . STRING
    (75) general_type -> . BOOLEAN
    (76) general_type -> . identifier
    (81) list_type -> . INTLIST
    (82) list_type -> . FLOATLIST
    (83) list_type -> . STRINGLIST
    (84) list_type -> . DOUBLELIST
    (77) array_type -> . INTARRAY
    (78) array_type -> . FLOATARRAY
    (79) array_type -> . STRINGARRAY
    (80) array_type -> . DOUBLEARRAY
    (85) identifier -> . IDENTIFIER
    (33) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (34) if_stmt -> . IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE
    (35) if_stmt -> . expression QUESTION expression COLON expression SEMICOLON
    (36) for_stmt -> . FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE
    (37) while_stmt -> . WHILE LPAREN expression RPAREN LBRACE stmt_list RBRACE
    (38) switch_stmt -> . SWITCH LPAREN expression RPAREN LBRACE case_stmts default_stmt RBRACE
    (43) expression -> . expression PLUS expression
    (44) expression -> . expression MINUS expression
    (45) expression -> . expression MULTIPLY expression
    (46) expression -> . expression DIVIDE expression
    (47) expression -> . expression MODULUS expression
    (48) expression -> . expression AND expression
    (49) expression -> . expression OR expression
    (50) expression -> . expression EQUAL expression
    (51) expression -> . expression NOTEQUAL expression
    (52) expression -> . expression LESSTHAN expression
    (53) expression -> . expression GREATERTHAN expression
    (54) expression -> . expression LESSTHANEQUAL expression
    (55) expression -> . expression GREATERTHANEQUAL expression
    (56) expression -> . expression INCREMENT
    (57) expression -> . expression DECREMENT
    (58) expression -> . expression COMMA expression
    (59) expression -> . expression POW expression
    (60) expression -> . NOT expression
    (61) expression -> . LPAREN expression RPAREN
    (62) expression -> . identifier
    (63) expression -> . digit
    (64) expression -> . string
    (65) expression -> . boolean
    (66) expression -> . identifier LBRACKET expression RBRACKET
    (67) expression -> . identifier LBRACE expression RBRACE
    (68) digit -> . NUMBER
    (86) string -> . STRING_LITERAL
    (69) boolean -> . TRUE
    (70) boolean -> . FALSE

  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for FUN resolved as shift
  ! shift/reduce conflict for IMPORT resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for DOUBLE resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for INTLIST resolved as shift
  ! shift/reduce conflict for FLOATLIST resolved as shift
  ! shift/reduce conflict for STRINGLIST resolved as shift
  ! shift/reduce conflict for DOUBLELIST resolved as shift
  ! shift/reduce conflict for INTARRAY resolved as shift
  ! shift/reduce conflict for FLOATARRAY resolved as shift
  ! shift/reduce conflict for STRINGARRAY resolved as shift
  ! shift/reduce conflict for DOUBLEARRAY resolved as shift
  ! shift/reduce conflict for IDENTIFIER resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING_LITERAL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBRACE          reduce using rule 87 (empty -> .)
    CLASS           shift and go to state 12
    FUN             shift and go to state 14
    IMPORT          shift and go to state 16
    PRINT           shift and go to state 23
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    DOUBLE          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    INTLIST         shift and go to state 33
    FLOATLIST       shift and go to state 34
    STRINGLIST      shift and go to state 35
    DOUBLELIST      shift and go to state 36
    INTARRAY        shift and go to state 37
    FLOATARRAY      shift and go to state 38
    STRINGARRAY     shift and go to state 39
    DOUBLEARRAY     shift and go to state 40
    IDENTIFIER      shift and go to state 41
    IF              shift and go to state 42
    FOR             shift and go to state 43
    WHILE           shift and go to state 44
    SWITCH          shift and go to state 45
    NOT             shift and go to state 46
    LPAREN          shift and go to state 15
    NUMBER          shift and go to state 49
    STRING_LITERAL  shift and go to state 17
    TRUE            shift and go to state 50
    FALSE           shift and go to state 51

  ! CLASS           [ reduce using rule 87 (empty -> .) ]
  ! FUN             [ reduce using rule 87 (empty -> .) ]
  ! IMPORT          [ reduce using rule 87 (empty -> .) ]
  ! PRINT           [ reduce using rule 87 (empty -> .) ]
  ! INT             [ reduce using rule 87 (empty -> .) ]
  ! FLOAT           [ reduce using rule 87 (empty -> .) ]
  ! DOUBLE          [ reduce using rule 87 (empty -> .) ]
  ! STRING          [ reduce using rule 87 (empty -> .) ]
  ! BOOLEAN         [ reduce using rule 87 (empty -> .) ]
  ! INTLIST         [ reduce using rule 87 (empty -> .) ]
  ! FLOATLIST       [ reduce using rule 87 (empty -> .) ]
  ! STRINGLIST      [ reduce using rule 87 (empty -> .) ]
  ! DOUBLELIST      [ reduce using rule 87 (empty -> .) ]
  ! INTARRAY        [ reduce using rule 87 (empty -> .) ]
  ! FLOATARRAY      [ reduce using rule 87 (empty -> .) ]
  ! STRINGARRAY     [ reduce using rule 87 (empty -> .) ]
  ! DOUBLEARRAY     [ reduce using rule 87 (empty -> .) ]
  ! IDENTIFIER      [ reduce using rule 87 (empty -> .) ]
  ! IF              [ reduce using rule 87 (empty -> .) ]
  ! FOR             [ reduce using rule 87 (empty -> .) ]
  ! WHILE           [ reduce using rule 87 (empty -> .) ]
  ! SWITCH          [ reduce using rule 87 (empty -> .) ]
  ! NOT             [ reduce using rule 87 (empty -> .) ]
  ! LPAREN          [ reduce using rule 87 (empty -> .) ]
  ! NUMBER          [ reduce using rule 87 (empty -> .) ]
  ! STRING_LITERAL  [ reduce using rule 87 (empty -> .) ]
  ! TRUE            [ reduce using rule 87 (empty -> .) ]
  ! FALSE           [ reduce using rule 87 (empty -> .) ]

    assignment                     shift and go to state 8
    expression                     shift and go to state 19
    stmt_list                      shift and go to state 206
    stmt                           shift and go to state 3
    empty                          shift and go to state 4
    class_declaration              shift and go to state 5
    fun_declaration                shift and go to state 6
    import_declaration             shift and go to state 7
    variable_declaration           shift and go to state 9
    print_stmt                     shift and go to state 10
    control_structure              shift and go to state 11
    identifier                     shift and go to state 13
    general_type                   shift and go to state 18
    list_type                      shift and go to state 20
    digit                          shift and go to state 21
    array_type                     shift and go to state 22
    if_stmt                        shift and go to state 24
    for_stmt                       shift and go to state 25
    while_stmt                     shift and go to state 26
    switch_stmt                    shift and go to state 27
    string                         shift and go to state 47
    boolean                        shift and go to state 48

state 203

    (41) default_stmt -> DEFAULT COLON stmt_list .

    RBRACE          reduce using rule 41 (default_stmt -> DEFAULT COLON stmt_list .)


state 204

    (39) case_stmts -> CASE expression COLON stmt_list . case_stmts
    (39) case_stmts -> . CASE expression COLON stmt_list case_stmts
    (40) case_stmts -> . empty
    (87) empty -> .

    CASE            shift and go to state 178
    DEFAULT         reduce using rule 87 (empty -> .)
    RBRACE          reduce using rule 87 (empty -> .)

    case_stmts                     shift and go to state 207
    empty                          shift and go to state 179

state 205

    (34) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 208


state 206

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list . RBRACE

    RBRACE          shift and go to state 209


state 207

    (39) case_stmts -> CASE expression COLON stmt_list case_stmts .

    DEFAULT         reduce using rule 39 (case_stmts -> CASE expression COLON stmt_list case_stmts .)
    RBRACE          reduce using rule 39 (case_stmts -> CASE expression COLON stmt_list case_stmts .)


state 208

    (34) if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INT             reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    IF              reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    $end            reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 34 (if_stmt -> IF LPAREN expression RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE .)


state 209

    (36) for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .

    CLASS           reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FUN             reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IMPORT          reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    PRINT           reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INT             reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOAT           reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLE          reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING          reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    BOOLEAN         reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTLIST         reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATLIST       reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGLIST      reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLELIST      reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    INTARRAY        reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FLOATARRAY      reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRINGARRAY     reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DOUBLEARRAY     reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IDENTIFIER      reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    IF              reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FOR             reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    WHILE           reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    SWITCH          reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NOT             reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    LPAREN          reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    NUMBER          reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    STRING_LITERAL  reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    TRUE            reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    FALSE           reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    $end            reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    RBRACE          reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    CASE            reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)
    DEFAULT         reduce using rule 36 (for_stmt -> FOR LPAREN assignment SEMICOLON expression SEMICOLON expression RPAREN LBRACE stmt_list RBRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for CLASS in state 0 resolved as shift
WARNING: shift/reduce conflict for FUN in state 0 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 0 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 0 resolved as shift
WARNING: shift/reduce conflict for INT in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING in state 0 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 0 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 0 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 0 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 0 resolved as shift
WARNING: shift/reduce conflict for IF in state 0 resolved as shift
WARNING: shift/reduce conflict for FOR in state 0 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 0 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 0 resolved as shift
WARNING: shift/reduce conflict for NOT in state 0 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 0 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 0 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 0 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 0 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 0 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 3 resolved as shift
WARNING: shift/reduce conflict for FUN in state 3 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 3 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 3 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 3 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 3 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 3 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 3 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 87 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 87 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 87 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 87 resolved as shift
WARNING: shift/reduce conflict for AND in state 87 resolved as shift
WARNING: shift/reduce conflict for OR in state 87 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 87 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 87 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 87 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 87 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 87 resolved as shift
WARNING: shift/reduce conflict for POW in state 87 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 88 resolved as shift
WARNING: shift/reduce conflict for FUN in state 88 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 88 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 88 resolved as shift
WARNING: shift/reduce conflict for INT in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 88 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 88 resolved as shift
WARNING: shift/reduce conflict for STRING in state 88 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 88 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 88 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 88 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 88 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 88 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 88 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 88 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 88 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 88 resolved as shift
WARNING: shift/reduce conflict for IF in state 88 resolved as shift
WARNING: shift/reduce conflict for FOR in state 88 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 88 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 88 resolved as shift
WARNING: shift/reduce conflict for NOT in state 88 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 88 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 88 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 88 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 88 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 97 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 97 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 97 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 97 resolved as shift
WARNING: shift/reduce conflict for AND in state 97 resolved as shift
WARNING: shift/reduce conflict for OR in state 97 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 97 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 97 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 97 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 97 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 97 resolved as shift
WARNING: shift/reduce conflict for POW in state 97 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 98 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 98 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 98 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 98 resolved as shift
WARNING: shift/reduce conflict for AND in state 98 resolved as shift
WARNING: shift/reduce conflict for OR in state 98 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 98 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 98 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 98 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 98 resolved as shift
WARNING: shift/reduce conflict for POW in state 98 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 99 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 99 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 99 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 99 resolved as shift
WARNING: shift/reduce conflict for AND in state 99 resolved as shift
WARNING: shift/reduce conflict for OR in state 99 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 99 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 99 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 99 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 99 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 99 resolved as shift
WARNING: shift/reduce conflict for POW in state 99 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 100 resolved as shift
WARNING: shift/reduce conflict for AND in state 100 resolved as shift
WARNING: shift/reduce conflict for OR in state 100 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 100 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 100 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 100 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 100 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 100 resolved as shift
WARNING: shift/reduce conflict for POW in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 101 resolved as shift
WARNING: shift/reduce conflict for AND in state 101 resolved as shift
WARNING: shift/reduce conflict for OR in state 101 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 101 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 101 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 101 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 101 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 101 resolved as shift
WARNING: shift/reduce conflict for POW in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 102 resolved as shift
WARNING: shift/reduce conflict for AND in state 102 resolved as shift
WARNING: shift/reduce conflict for OR in state 102 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 102 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 102 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 102 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 102 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 102 resolved as shift
WARNING: shift/reduce conflict for POW in state 102 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 103 resolved as shift
WARNING: shift/reduce conflict for AND in state 103 resolved as shift
WARNING: shift/reduce conflict for OR in state 103 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 103 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 103 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 103 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 103 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 103 resolved as shift
WARNING: shift/reduce conflict for POW in state 103 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 104 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 104 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 104 resolved as shift
WARNING: shift/reduce conflict for AND in state 104 resolved as shift
WARNING: shift/reduce conflict for OR in state 104 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 104 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 104 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 104 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 104 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 104 resolved as shift
WARNING: shift/reduce conflict for POW in state 104 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 105 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 105 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 105 resolved as shift
WARNING: shift/reduce conflict for AND in state 105 resolved as shift
WARNING: shift/reduce conflict for OR in state 105 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 105 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 105 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 105 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 105 resolved as shift
WARNING: shift/reduce conflict for POW in state 105 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 106 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 106 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 106 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 106 resolved as shift
WARNING: shift/reduce conflict for AND in state 106 resolved as shift
WARNING: shift/reduce conflict for OR in state 106 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 106 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 106 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 106 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 106 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 106 resolved as shift
WARNING: shift/reduce conflict for POW in state 106 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 107 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 107 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 107 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 107 resolved as shift
WARNING: shift/reduce conflict for AND in state 107 resolved as shift
WARNING: shift/reduce conflict for OR in state 107 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 107 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 107 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 107 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 107 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 107 resolved as shift
WARNING: shift/reduce conflict for POW in state 107 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 108 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 108 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 108 resolved as shift
WARNING: shift/reduce conflict for AND in state 108 resolved as shift
WARNING: shift/reduce conflict for OR in state 108 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 108 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 108 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 108 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 108 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 108 resolved as shift
WARNING: shift/reduce conflict for POW in state 108 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 109 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 109 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 109 resolved as shift
WARNING: shift/reduce conflict for AND in state 109 resolved as shift
WARNING: shift/reduce conflict for OR in state 109 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 109 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 109 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 109 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 109 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 109 resolved as shift
WARNING: shift/reduce conflict for POW in state 109 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 110 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 110 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 110 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 110 resolved as shift
WARNING: shift/reduce conflict for AND in state 110 resolved as shift
WARNING: shift/reduce conflict for OR in state 110 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 110 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 110 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 110 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 110 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 110 resolved as shift
WARNING: shift/reduce conflict for POW in state 110 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 111 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 111 resolved as shift
WARNING: shift/reduce conflict for MODULUS in state 111 resolved as shift
WARNING: shift/reduce conflict for AND in state 111 resolved as shift
WARNING: shift/reduce conflict for OR in state 111 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 111 resolved as shift
WARNING: shift/reduce conflict for LESSTHANEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for GREATERTHANEQUAL in state 111 resolved as shift
WARNING: shift/reduce conflict for INCREMENT in state 111 resolved as shift
WARNING: shift/reduce conflict for DECREMENT in state 111 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 111 resolved as shift
WARNING: shift/reduce conflict for POW in state 111 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 161 resolved as shift
WARNING: shift/reduce conflict for FUN in state 161 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 161 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 161 resolved as shift
WARNING: shift/reduce conflict for INT in state 161 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 161 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 161 resolved as shift
WARNING: shift/reduce conflict for STRING in state 161 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 161 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 161 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 161 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 161 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 161 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 161 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 161 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 161 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 161 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 161 resolved as shift
WARNING: shift/reduce conflict for IF in state 161 resolved as shift
WARNING: shift/reduce conflict for FOR in state 161 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 161 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 161 resolved as shift
WARNING: shift/reduce conflict for NOT in state 161 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 161 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 161 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 161 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 161 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 161 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 165 resolved as shift
WARNING: shift/reduce conflict for FUN in state 165 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 165 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 165 resolved as shift
WARNING: shift/reduce conflict for INT in state 165 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 165 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 165 resolved as shift
WARNING: shift/reduce conflict for STRING in state 165 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 165 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 165 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 165 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 165 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 165 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 165 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 165 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 165 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 165 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 165 resolved as shift
WARNING: shift/reduce conflict for IF in state 165 resolved as shift
WARNING: shift/reduce conflict for FOR in state 165 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 165 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 165 resolved as shift
WARNING: shift/reduce conflict for NOT in state 165 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 165 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 165 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 165 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 165 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 165 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 167 resolved as shift
WARNING: shift/reduce conflict for FUN in state 167 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 167 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 167 resolved as shift
WARNING: shift/reduce conflict for INT in state 167 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 167 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 167 resolved as shift
WARNING: shift/reduce conflict for STRING in state 167 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 167 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 167 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 167 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 167 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 167 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 167 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 167 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 167 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 167 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 167 resolved as shift
WARNING: shift/reduce conflict for IF in state 167 resolved as shift
WARNING: shift/reduce conflict for FOR in state 167 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 167 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 167 resolved as shift
WARNING: shift/reduce conflict for NOT in state 167 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 167 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 167 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 167 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 167 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 167 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 199 resolved as shift
WARNING: shift/reduce conflict for FUN in state 199 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 199 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 199 resolved as shift
WARNING: shift/reduce conflict for INT in state 199 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 199 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 199 resolved as shift
WARNING: shift/reduce conflict for STRING in state 199 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 199 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 199 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 199 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 199 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 199 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 199 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 199 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 199 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 199 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 199 resolved as shift
WARNING: shift/reduce conflict for IF in state 199 resolved as shift
WARNING: shift/reduce conflict for FOR in state 199 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 199 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 199 resolved as shift
WARNING: shift/reduce conflict for NOT in state 199 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 199 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 199 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 199 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 199 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 199 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 200 resolved as shift
WARNING: shift/reduce conflict for FUN in state 200 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 200 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 200 resolved as shift
WARNING: shift/reduce conflict for INT in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING in state 200 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 200 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 200 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 200 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 200 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 200 resolved as shift
WARNING: shift/reduce conflict for IF in state 200 resolved as shift
WARNING: shift/reduce conflict for FOR in state 200 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 200 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 200 resolved as shift
WARNING: shift/reduce conflict for NOT in state 200 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 200 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 200 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 200 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 200 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 200 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 201 resolved as shift
WARNING: shift/reduce conflict for FUN in state 201 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 201 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 201 resolved as shift
WARNING: shift/reduce conflict for INT in state 201 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 201 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 201 resolved as shift
WARNING: shift/reduce conflict for STRING in state 201 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 201 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 201 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 201 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 201 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 201 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 201 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 201 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 201 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 201 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 201 resolved as shift
WARNING: shift/reduce conflict for IF in state 201 resolved as shift
WARNING: shift/reduce conflict for FOR in state 201 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 201 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 201 resolved as shift
WARNING: shift/reduce conflict for NOT in state 201 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 201 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 201 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 201 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 201 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 201 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 202 resolved as shift
WARNING: shift/reduce conflict for FUN in state 202 resolved as shift
WARNING: shift/reduce conflict for IMPORT in state 202 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 202 resolved as shift
WARNING: shift/reduce conflict for INT in state 202 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 202 resolved as shift
WARNING: shift/reduce conflict for DOUBLE in state 202 resolved as shift
WARNING: shift/reduce conflict for STRING in state 202 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 202 resolved as shift
WARNING: shift/reduce conflict for INTLIST in state 202 resolved as shift
WARNING: shift/reduce conflict for FLOATLIST in state 202 resolved as shift
WARNING: shift/reduce conflict for STRINGLIST in state 202 resolved as shift
WARNING: shift/reduce conflict for DOUBLELIST in state 202 resolved as shift
WARNING: shift/reduce conflict for INTARRAY in state 202 resolved as shift
WARNING: shift/reduce conflict for FLOATARRAY in state 202 resolved as shift
WARNING: shift/reduce conflict for STRINGARRAY in state 202 resolved as shift
WARNING: shift/reduce conflict for DOUBLEARRAY in state 202 resolved as shift
WARNING: shift/reduce conflict for IDENTIFIER in state 202 resolved as shift
WARNING: shift/reduce conflict for IF in state 202 resolved as shift
WARNING: shift/reduce conflict for FOR in state 202 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 202 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 202 resolved as shift
WARNING: shift/reduce conflict for NOT in state 202 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 202 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 202 resolved as shift
WARNING: shift/reduce conflict for STRING_LITERAL in state 202 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 202 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 202 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (stmt_list -> stmt)
WARNING: rejected rule (empty -> <empty>) in state 3
WARNING: reduce/reduce conflict in state 4 resolved using rule (stmt_list -> empty)
WARNING: rejected rule (stmt -> empty) in state 4
